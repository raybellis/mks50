$CONDONLY
$INCLUDE (mks50.mcu)    ; include 8053 type SFR symbol definition file for MKS50 -- must be used with ASEM [MKS50.MCU in same folder as ASEMW.EXE]!!!!

;
; 	D52 V3.3.6 8052 Disassembly
;
;	Note: All I2STA.7 symbols produced by D52 had to be changed to I2STA7 for compiling with ASEM
;
;	Compile in Windows with:
;
;	"ASEMW mk50-cfw.asm"
;	"hexbinw mk50-cfw.hex mks50-cfw.bin"
;
; ########################
; # CONDITIONAL ASSEMBLY #
; ########################
;
; Odd... this assembler doesn't seem to support FALSE/TRUE, so 0 and 1 are used here instead!
;

;CFW		EQU	0	; whether or not any custom firmware features are enabled (0 = stock, 1 = CFW)
;OLED_DISPLAY	EQU	0	; whether or not this ROM should be assembled true 16x1 display support instead of 8x2 side-by-side "faux 16x1"
				; Note: 0 = stock 8x2 addressing (LCDs), 1 = modified 16x1 addressing (OLEDs) or some very old rare LCDs
				; Note: Same idea as Jeroen Oldenhof Alpha Juno 2 OLED fix
;ALL_NOTES_OFF	EQU	0	; whether or not to enable the All Notes Off MIDI command (0 = CFW, 1 = stock firmware)
				; Note: Same idea as butoba.net fix for Alpha Juno 2

IFDEF CUSTOM

CFW		EQU	1
OLED_DISPLAY	EQU	1
ALL_NOTES_OFF	EQU	1

ELSE

CFW		EQU	0
OLED_DISPLAY	EQU	0
ALL_NOTES_OFF	EQU	0

ENDIF

;
; ======================
; OLED ADDRESSING (1x16)
; ======================
; 
; Visible 1x16 Addressing
;
; 	Left						Center						Right
; |80, 81, 82, 83, 84, 85, 86, 87 | 88, 89, 8A, 8B, 8C, 8D, 8E, 8F |
; 
; Hidden 1x16 Addressing -- think of it as a buffer for display shifting
; |90, 91, 92, 93, 94, 95, 96, 97 | 98, 99, 9A, 9B, 9C, 9D, 9E, 9F |
;
; Note: Unseen area extends out ---> to $90~$A7, so display shifting is linear.
;
;
; ======================================
; LCD ADDRESSING (faux 1x16 method; 8x2)
; ======================================
;
; Visible "faux 1x16" 8x2 Addressing
;
; 	Left						Center						Right
; |80, 81, 82, 83, 84, 85, 86, 87 | C0, C1, C2, C3, C4, C5, C6, C7 |
;
; Hidden "faux 1x16" 8x2 Addressing -- think of it as a buffer for display shifting
; |88, 89, 8A, 8B, 8C, 8D, 8E, 8F | C8, C9, CA, CB, CC, CD, CE, CF |
; 
; Note: Unseen area extends out ---> to $88 for first half of line, but $C8 for second half of line!!!! Very confusing!
; Note: In this mode, display shifting affects both the 1st half and 2nd half of the screen!!!

IF OLED_DISPLAY = 0

; settings for LCD
ScrInit	EQU	38H			; $20 + $10 for 8-bit data bus (vs 4-bit default), $08 for 2-line [5x8 character size is default]
ScrCurs	EQU	0DH			; blink character at cursor but cursor is invisible? something unorthodox...

ScrPos	MACRO	REG, POS
	MOV	REG, #(080H + 040H * (POS / 8) + (POS MOD 8))		; set screen position
ENDM

ELSE

; settings for OLED
ScrInit	EQU	30H			; $20 + $10 for 8-bit data bus (vs 4-bit default) [1-line and 5x8 character size are defaults]
ScrCurs	EQU	0FH			; turns cursor on, blink character on -- why is this needed for OLED but not stock display?!?!?!?!?!?!? MAKES NO SENSE!!!!

ScrPos	MACRO	REG, POS
	MOV	REG, #(080H + POS)	; set screen position
ENDM
ENDIF

;
; System Interrupt Locations
;
; 0000H - Reset
; 0003H - External Interrupt 0
; 000BH - Timer 0
; 0013H - External Interrupt 1
; 001BH - Timer 1
; 0023H - Serial Port
;

	ORG	0000H

Reset_IRQ:
	AJMP	START						; jump to program start
	DB	0FFH						; padding

External0_IRQ:
	RETI	
	DB	0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH		; padding

Timer0_IRQ:
	RETI	
	DB	0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH		; padding

External1_IRQ:
	RETI	
	DB	0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH		; padding

Timer1_IRQ:
	RETI	

X001C:
	DB	01H,02H,04H,08H,10H,20H,00H			; apparently this space is 'abused' as a table related to MIDI

;
; Serial (MIDI) Interrupt Handling (fixed location $0023)
;
SerialIRQ:
	PUSH	PSW				; save processor status
	SETB	RS0				; select register bank 1 (only used for serial IO)
	MOV	R5,A				; save A register
	JNB	TI,_rxNext			; if no TX interrupt, go to RX code

						; MIDI TX interrupt received
	CLR	TI				; clear TX IRQ flag
	MOV	A,R0				; get the position of the last sent byte (RB1R0)
	MOV	P2,#0FDH			; select IC6 bank $FD (tx buffer?)
	CJNE	A,RB3R5,_txNext			; compare position to last saved byte (RB3R5)
	CLR	20H.3				; clear "waiting for an interrupt" flag
	AJMP	_txCleanup			; buffer empty - go cleanup
_txNext:
	MOVX	A,@R0				; load the byte from the TX buffer
	MOV	SBUF,A				; send the byte
	INC	R0				; increment TX buffer position (RB1R0)
_txCleanup:
	MOV	P2,LAST_BANK			; restore IC6 bank setting
	JB	RI,_rxNext			; go to RX code if there was also an RX interrupt
	MOV	A,R5				; restore the A register
	POP	PSW				; restore processor status (inc. selected register bank)
	RETI					; and we're done...

; MIDI RX interrupt received
_rxNext:
	CLR	RI				; clear RX IRQ flag
	ORL	7AH,#3FH			; set bottom six bits of $7a to one (reason TBD)
	MOV	A,SBUF				; receive the byte
	JB	ACC.7,_rxCommand		; top bit set - must be a MIDI command
	AJMP	_rxData
;
_rxCommand:
	CJNE	A,#0F0H,X0055
X0055:	JNC	X00BD
	ANL	21H,#3FH
	JNB	20H.2,X0060
	JB	23H.1,X008D
X0060:	CLR	C
	SUBB	A,6FH
	CLR	20H.4
	CJNE	A,#0B0H,X006A
	SETB	20H.4
X006A:	JB	20H.2,X0071
	MOV	A,SBUF
	ANL	A,#0F0H
X0071:	MOV	R2,A
	CJNE	A,#0A0H,X0077
	AJMP	X00B9
;
X0077:
	ANL	A,#0FH
	CJNE	A,#0,X00B9
X007C:	MOV	R4,#2
	CJNE	R2,#0C0H,X0083			; checking for specific MIDI code?
	SJMP	X0086
;
X0083:	CJNE	R2,#0D0H,X0087			; checking for specific MIDI code?
X0086:	DEC	R4
X0087:	SETB	20H.7
X0089:	MOV	A,R5
	POP	PSW
	RETI	
;
;
;
X008D:
	CJNE	A,#0C0H,X0090
X0090:	JC	X0097
	CJNE	A,#0E0H,X0095
X0095:	JC	X0060
X0097:	MOV	R2,A
	ANL	A,#0F0H
	CJNE	A,#0A0H,X009F
	AJMP	X00B9
;
X009F:
	XCH	A,R2
	ANL	A,#0FH
	CLR	C
	SUBB	A,6FH
	JC	X00B9
	CLR	20H.4
	JNZ	X00B0
	CJNE	R2,#0B0H,X00B0
	SETB	20H.4
X00B0:	CJNE	A,6EH,X00B3
X00B3:	JNC	X00B9
	ORL	A,R2
	MOV	R2,A
	AJMP	X007C
;
X00B9:	CLR	20H.7
	SJMP	X0089
;
X00BD:	CJNE	A,#0F8H,X00C0
X00C0:	JC	X00CA
	CJNE	A,#0FEH,X0089
	ANL	7AH,#7FH
	SJMP	X0089
;
;
;
X00CA:
	CJNE	A,#0F0H,X00DC
	JB	21H.3,X00D3
	JB	22H.4,X00B9
X00D3:	MOV	R2,A
	SETB	21H.7
	CLR	21H.6
	MOV	R3,#0
	SJMP	X0087
;
X00DC:
	CJNE	A,#0F7H,X00B9
	LJMP	X2000
;
_rxData:
	JNB	20H.7,X0089
	JNB	21H.7,X00EB
	LJMP	X2034
;
X00EB:
	JB	21H.3,X00B9
	CJNE	R2,#0F0H,X00F3
	SJMP	X00B9
;
X00F3:
	XCH	A,R4
	DEC	A
	JZ	X00FD
	XCH	A,R4
	MOV	R3,A
	MOV	A,R5
	POP	PSW
	RETI	
;
X00FD:	CJNE	R2,#0A0H,X0100
X0100:	JNC	X0144
X0102:	MOV	P2,#0FCH
	MOV	A,RB3R6
	MOV	R1,A
	INC	A
	CJNE	A,RB3R7,X010E
	AJMP	X013E
;
X010E:
	XCH	A,R2
	MOVX	@R1,A
	XCH	A,R2
	MOV	R1,A
	INC	A
	CJNE	A,RB3R7,X0118
	AJMP	X013E
;
X0118:
	XCH	A,R3
	MOVX	@R1,A
	XCH	A,R3
	MOV	R1,A
	INC	A
	CJNE	A,RB3R7,X0122
	SJMP	X013E
;
X0122:
	XCH	A,R4
	MOVX	@R1,A
	MOV	RB3R6,R4
	CJNE	R2,#0C0H,X012D
	MOV	R4,#1
	SJMP	X0137
;
X012D:	CJNE	R2,#0F0H,X0135
	SJMP	X0137
;
X0132:	ORL	7BH,#0CH
X0135:	MOV	R4,#2
X0137:	MOV	P2,LAST_BANK
X013A:	MOV	A,R5
	POP	PSW
	RETI	
;
X013E:	CLR	20H.7
	SJMP	X0137
;
X0142:	AJMP	X0252
;
X0144:	CJNE	R2,#0C0H,X0147
X0147:	JNC	X0142
	JNB	26H.7,X016F
	JNB	23H.2,X016F
	MOV	A,R3
	CJNE	A,70H,X016F
	MOV	P2,#0FEH
	MOV	A,R2
	ANL	A,#7
	JB	23H.0,X0163
	ADD	A,#14H
	MOV	R1,A
	MOV	A,R4
	MOVX	@R1,A
	AJMP	X0132
;
X0163:	JNZ	X0135
	MOV	R1,#14H
	MOV	A,R4
X0168:	MOVX	@R1,A
	INC	R1
	CJNE	R1,#1AH,X0168
	AJMP	X0132
;
; # related to All Notes Off?
;
X016F:
	CJNE	R2,#0B0H,X0135
	MOV	A,R4
	CJNE	R3,#7BH,X0176
X0176:	JC	X017A
	AJMP	X01E6
;
X017A:	CJNE	R3,#40H,X017D
X017D:	JNC	X01AB
	CJNE	R3,#1,X0189
	JB	22H.2,X0135
	MOV	6BH,A
	SJMP	X0132
;
X0189:	CJNE	R3,#5,X0191
	JB	22H.0,X0135
	SJMP	X01B1
;
X0191:	CJNE	R3,#7,X0199
	JB	22H.1,X0135
	SJMP	X01B1
;
X0199:	CJNE	R3,#6,X0135
	MOV	A,72H
	JNZ	X0135
	MOV	A,R4
	CJNE	A,#19H,X01A4
X01A4:	JC	X01A8
	MOV	A,#18H
X01A8:	MOV	R4,A
	SJMP	X01B1
;
X01AB:	CJNE	R3,#40H,X01B6
	JB	22H.3,X01E4
X01B1:	ORL	7BH,#0CH
	AJMP	X0102
;
X01B6:	CJNE	R3,#41H,X01BE
	JB	22H.0,X01E4
	SJMP	X01B1
;
X01BE:	CJNE	R3,#64H,X01C5
	MOV	A,#80H
	SJMP	X01CA
;
X01C5:	CJNE	R3,#65H,X01D8
	MOV	A,#40H
X01CA:	CJNE	R4,#0,X01E2
	CPL	A
	CLR	ACC.5
	ANL	A,72H
	MOV	72H,A
	JNZ	X01E4
	AJMP	X0132
;
X01D8:	CJNE	R3,#62H,X01DD
	SJMP	X01E0
;
X01DD:	CJNE	R3,#63H,X01E4
X01E0:	MOV	A,#20H
X01E2:	ORL	72H,A
X01E4:	AJMP	X0135
;
X01E6:	JNB	20H.4,X01E4
	CJNE	R3,#7BH,X01F8
	JNB	20H.2,X0250
	JNZ	X0250
	JB	23H.1,X0250
X01F4:	MOV	R4,#2
	AJMP	X0102
;
X01F8:	MOV	R4,#0
	CJNE	R3,#7CH,X0206
	JNZ	X0250
	JB	20H.6,X01F4
X0202:	SETB	20H.6
	SJMP	X0210
;
X0206:	CJNE	R3,#7DH,X0214
	JNZ	X0250
	JNB	20H.6,X01F4
	CLR	20H.6
X0210:	MOV	R4,#10H
	SJMP	X0236
;
X0214:	CJNE	R3,#7EH,X0232
	CJNE	A,#11H,X021A
X021A:	JNC	X0250
	CLR	20H.5
	JZ	X0225
	CJNE	A,#7,X0223
X0223:	JC	X0227
X0225:	MOV	A,#6
X0227:	CJNE	A,6EH,X022C
	SJMP	X022E
;
X022C:	MOV	R4,#10H
X022E:	MOV	6EH,A
	SJMP	X0236
;
X0232:	JNZ	X0250
	SETB	20H.5
X0236:	MOV	C,20H.6
	MOV	20H.2,C
	MOV	A,R4
	ORL	A,#3
	MOV	R4,A
	CLR	23H.1
	JB	20H.5,X024E
	INC	R4
	MOV	A,6EH
	CJNE	A,#1,X024B
	SJMP	X024E
;
X024B:	INC	R4
	SETB	23H.1
X024E:	AJMP	X0102
;
X0250:	AJMP	X0135
;
X0252:	CJNE	R2,#0C0H,X025D
	JB	22H.7,X0269
	ORL	7BH,#0CH
	AJMP	X0102
;
X025D:	CJNE	R2,#0D0H,X026D
	JB	22H.6,X0269
	MOV	A,R4
	MOV	6CH,A
	ORL	7BH,#0CH
X0269:	MOV	R4,#1
	AJMP	X013A
;
X026D:	JB	22H.5,X0250
	MOV	P2,#0FEH
	MOV	A,R3
	RL	A
	RLC	A
	XCH	A,R4
	RLC	A
	XCH	A,R4
	RLC	A
	XCH	A,R4
	RLC	A
	SETB	F0
	JC	X0283
	CLR	F0
	CPL	A
X0283:	MOV	R1,A
	JNB	23H.1,X02A7
	MOV	A,R2
	ANL	A,#7
	MOV	R4,A
	ADD	A,#2
	MOVC	A,@A+PC
	SJMP	X0296
;
; # table of powers of 2?
;
	DB	01H,02H,04H,08H,10H,20H
;
;
;
X0296:
	JNB	F0,X029D
	ORL	26H,A
	SJMP	X02A0
;
X029D:
	CPL	A
	ANL	26H,A
X02A0:	MOV	A,#0
	ADD	A,R4
	XCH	A,R1
	MOVX	@R1,A
	SJMP	X02BA
;
X02A7:	JNB	F0,X02AF
	ORL	26H,#3FH
	SJMP	X02B2
;
X02AF:	ANL	26H,#0C0H
X02B2:	MOV	A,R1
	MOV	R1,#0
X02B5:	MOVX	@R1,A
	INC	R1
	CJNE	R1,#6,X02B5
X02BA:	AJMP	X0132
;
;	######################
;	# BEGIN MAIN PROGRAM #
;	######################
;
START:
	MOV	DPTR,#X8FFF
	MOV	A,#6
	MOVX	@DPTR,A
	CLR	A
	MOV	R0,#7FH
X02C5:	MOV	@R0,A
	DJNZ	R0,X02C5
	MOV	P2,#0FCH
	MOV	R2,#2
X02CD:	MOVX	@R0,A
	DJNZ	R0,X02CD
	INC	P2
	DJNZ	R2,X02CD
X02D4:	MOVX	@R0,A
	INC	R0
	CJNE	R0,#90H,X02D4
	MOV	SP,#0DH
	MOV	SCON,#50H
	MOV	TMOD,#21H
	MOV	TH1,#0FFH
	MOV	IP,#0
	MOV	PCON,#0
	MOV	TCON,#44H
	MOV	P1,#7
	MOV	DPTR,#XC00D
	MOVX	@DPTR,A
	MOV	61H,#80H
	MOV	72H,#0C0H
	LCALL	X0738			; could be display related
	LCALL	InitLCD
	LCALL	X07A4
X0304:	CLR	A
	MOV	RB3R6,A
	MOV	RB3R7,A
	LCALL	X07A4
	MOV	7AH,#80H
	JB	24H.2,X0316
	MOV	A,61H
	ACALL	X0387
X0316:	MOV	IE,#91H
;
; # fall through from above or jumped to by X0362 exclusively -- KERNEL LOOP?
;
X0319:
	LCALL	X108C
	ACALL	X0794
	ACALL	X03D4
	ACALL	X0367
	ACALL	X079A
	ACALL	X037A
	JB	20H.0,X032D
	MOV	A,49H
	JNZ	X0335
X032D:	MOV	A,7BH
	JNZ	X0339
	CLR	P1.3
	SJMP	X033D
;
X0335:	MOV	A,7BH
	JZ	X033B
X0339:	DEC	7BH
X033B:	SETB	P1.3
X033D:	LCALL	X0800
	LCALL	X1800
	ACALL	X0794
	ACALL	X03D4
	ACALL	X0367
	ACALL	X079A
	ACALL	X037A
	MOV	A,7AH
	JB	ACC.7,X0362
	DEC	A
	MOV	7AH,A
	JNZ	X0362
	MOV	7AH,#80H
	CLR	ES
	ACALL	X0772
	SETB	ES
	ACALL	X0639
X0362:	LCALL	X0800
	AJMP	X0319
;
;
;
X0367:
	MOV	A,31H
	MOV	C,ACC.7
	MOV	P1.5,C
	MOV	C,ACC.6
	MOV	P1.4,C
	MOV	C,2FH.6
	JNB	24H.3,X0377
	CLR	C
X0377:	MOV	P1.6,C
	RET	
;
;
;
X037A:
	MOV	DPTR,#XC00E
	MOV	A,30H
	MOVX	@DPTR,A
	INC	DPTR
	MOV	A,31H
	ANL	A,#3FH
	MOVX	@DPTR,A
	RET	
;
;
;
X0387:
	LCALL	SelectBank_80
	MOV	61H,A
	LCALL	X14FB
	CLR	23H.3
	LCALL	GetPatchTableOffset
	LCALL	X153A
	LCALL	X151A
	LCALL	X1606
	LCALL	X1623
	LCALL	X1631
	JNB	26H.7,X03B3
	JNB	24H.7,X03AD
	ACALL	CtrlChng
	SJMP	X03B3
;
; # MIDI related
;
X03AD:
	ACALL	CtrlChng
	MOV	R2,61H			; sets program change to value in iRAM $61
	ACALL	ProgChng
X03B3:	AJMP	X03D4
;
;
;
SelectBank_FE:
	MOV	LAST_BANK,#0FEH
	MOV	P2,#0FEH
	RET	
;
;
;
SelectBank_FC:
	MOV	LAST_BANK,#0FCH
	MOV	P2,#0FCH
	RET	
;
; # MIDI related
;
X03C3:
	JNB	26H.7,X03D4
	JNB	24H.7,X03D4
	MOV	A,R6
	ACALL	TxMIDIbyte
	MOV	A,R7
	ADD	A,#0FCH				; 252 decimal... hmm...
	ACALL	TxMIDIbyte
	MOV	A,R5
	ACALL	TxMIDIbyte
X03D4:	ACALL	SelectBank_FC
	MOV	DPTR,#X001C			; some numeric table
	MOV	A,RB3R7
	CJNE	A,RB3R6,X03DF
	RET	
;
X03DF:
	JNB	20H.0,X03F1
X03E2:	CLR	20H.0
	MOV	R5,#0
X03E6:	MOV	R6,#90H
	MOV	R2,#0C9H
	MOV	R7,#49H
	MOV	DPTR,#X001C
	AJMP	X0447
;
X03F1:
	MOV	R0,A
	MOVX	A,@R0
	MOV	R6,A
	INC	R0
	MOVX	A,@R0
	MOV	R7,A
	INC	R0
	MOVX	A,@R0
	MOV	R5,A
	INC	R0
	MOV	RB3R7,R0
	CJNE	R6,#0A0H,X0400
X0400:	JC	X040F
	CJNE	R6,#0B0H,X0407
	AJMP	X050C
;
X0407:
	CJNE	R6,#0C0H,X040C
	AJMP	X0387
;
X040C:	LJMP	X2127
;
X040F:
	MOV	A,R7
	CJNE	A,#0CH,X0413
X0413:	JNC	X0417
	ADD	A,#0CH
X0417:	CJNE	A,#6DH,X041A
X041A:	JC	X0420
	ADD	A,#0F4H
	SJMP	X0417
;
X0420:	ADD	A,#4
	MOV	R7,A
	SETB	ACC.7
	MOV	R2,A
	MOV	A,63H
	CJNE	A,64H,X042B
X042B:	JC	X043A
	MOV	A,R7
	CJNE	A,63H,X0431
X0431:	JNC	X0447
	CJNE	A,64H,X0436
X0436:	JC	X0447
	SJMP	X03C3
;
X043A:	MOV	A,R7
	CJNE	A,63H,X043E
X043E:	JC	X03C3
	CJNE	A,64H,X0443
X0443:	JC	X0447
	AJMP	X03C3
;
X0447:	ACALL	SelectBank_FE
	MOV	R0,#6
	MOV	A,R5
	JNB	28H.1,X0471
	CJNE	R7,#28H,X0452
X0452:	JC	X0459
	CJNE	R7,#59H,X0457
X0457:	JC	X045B
X0459:	AJMP	X03D4
;
X045B:	CJNE	R6,#90H,X0476
	JZ	X0476
	MOV	A,7DH
	CJNE	A,#6,X0465
X0465:	JNC	X046E
	INC	7DH
	ADD	A,#6DH
	MOV	R1,A
	MOV	A,R7
	MOVX	@R1,A
X046E:	MOV	A,R5
	SJMP	X0476
;
X0471:	JNB	23H.2,X0476
	AJMP	X05B0
;
X0476:	CJNE	R6,#80H,X047B
X0479:	AJMP	X04ED
;
X047B:	CJNE	R6,#90H,X0497
	JZ	X0479
	JB	23H.4,X04C3
	JB	25H.7,X0492
X0486:	MOVX	A,@R0
	XRL	A,R7
	JZ	X04E5
	MOVX	A,@R0
	XRL	A,R2
	JZ	X04CD
	INC	R0
	CJNE	R0,#0CH,X0486
X0492:	MOV	R0,#0DH
	MOVX	A,@R0
	JNZ	X0499
X0497:	AJMP	X03D4
;
X0499:	DEC	A
	MOV	R2,A
X049B:	INC	R0
	MOVX	A,@R0
	DEC	R0
	MOVX	@R0,A
	INC	R0
	JNZ	X049B
	MOV	A,#6
	ADD	A,R2
	MOV	R0,A
	MOV	A,R7
	MOVX	@R0,A
X04A8:	ACALL	X06CD
X04AA:	ACALL	X06DC
X04AC:	MOV	A,#14H
	ADD	A,R2
	MOV	R0,A
	MOV	A,R5
	MOVX	@R0,A
	JNB	25H.7,X04C1
	MOV	A,#31H
	ADD	A,R2
	MOV	R2,A
	ScrPos	A, 15
	LCALL	SelectBank_80
	LCALL	DispFillx8
X04C1:	AJMP	X03D4
;
X04C3:	MOVX	A,@R0
	JB	ACC.7,X04CD
	INC	R0
	CJNE	R0,#0CH,X04C3
	AJMP	X03D4
;
X04CD:	MOV	A,R7
	MOVX	@R0,A
	MOV	A,R0
	ADD	A,#0FAH
	MOV	R2,A
	MOV	R0,#0CH
	INC	R2
X04D6:	INC	R0
	MOVX	A,@R0
	XRL	A,R2
	JNZ	X04D6
X04DB:	INC	R0
	MOVX	A,@R0
	DEC	R0
	MOVX	@R0,A
	INC	R0
	JNZ	X04DB
	DEC	R2
	AJMP	X04A8
;
;
;
X04E5:
	MOV	A,R0
	ADD	A,#0FAH
	MOV	R2,A
	ACALL	X06CD
	SJMP	X04AC
;
;
;
X04ED:
	MOVX	A,@R0
	XRL	A,R7
	JZ	X04F7
	INC	R0
	CJNE	R0,#0CH,X04ED
	AJMP	X03D4
;
X04F7:
	MOV	A,R2
	MOVX	@R0,A
	MOV	A,R0
	ADD	A,#0FAH
	MOV	R2,A
	ACALL	X06E3
	MOV	R0,#0DH
X0501:	MOVX	A,@R0
	JZ	X0507
	INC	R0
	SJMP	X0501
;
X0507:
	MOV	A,R2
	INC	A
	MOVX	@R0,A
	AJMP	X03D4
;
;
;
X050C:
	CJNE	R7,#7BH,X050F
X050F:	JNC	X0551
	CJNE	R7,#7,X0518
	MOV	68H,A
	AJMP	X03D4
;
X0518:
	CJNE	R7,#40H,X0533
	JNB	ACC.6,X052F
	JB	23H.5,X052D
	MOV	A,49H
	ANL	48H,A
	ANL	2DH,A
	ANL	2EH,A
	ANL	2CH,A
	SETB	23H.5
X052D:	AJMP	X03D4
;
X052F:
	CLR	23H.5
	AJMP	X03D4
;
X0533:
	CJNE	R7,#41H,X0543
	SETB	20H.1
	JB	ACC.6,X053D
	CLR	20H.1
X053D:	MOV	C,20H.1
	MOV	23H.4,C
	AJMP	X03D4
;
X0543:
	CJNE	R7,#5,X054A
	MOV	65H,A
	AJMP	X03D4
;
X054A:	CJNE	R7,#6,X052D
	MOV	6DH,A
	AJMP	X03D4
;
X0551:	CJNE	A,#2,X0558
X0554:	ACALL	X0639
X0556:	AJMP	X03D4
;
X0558:	JBC	ACC.4,X056B
	CLR	A
	MOV	C,23H.2
	MOV	ACC.2,C
	MOV	C,23H.0
	CPL	C
	MOV	ACC.0,C
	XRL	A,R5
	ANL	A,#5
	JZ	X0554
	MOV	A,R5
X056B:	CLR	23H.0
	CLR	23H.2
	CJNE	A,#3,X0574
	SJMP	X0580
;
X0574:
	SETB	23H.2
	CJNE	A,#4,X057D
	SETB	23H.0
	SJMP	X0580
;
X057D:	CJNE	A,#5,X0556
X0580:	ACALL	X072B
	ACALL	X0745
	CLR	23H.5
	LCALL	X1CD7
	MOVX	@DPTR,A
	MOV	A,27H
	JNZ	X05A1
	JB	24H.2,X05A0
	MOV	R2,#2DH
	JNB	23H.2,X0598
	MOV	R2,#3AH
X0598:	MOV	A,#81H						; display positioning?
	LCALL	SelectBank_80
	LCALL	DispFillx8
X05A0:	RET	
;
;
;
X05A1:
	JNB	27H.3,X05A0
	MOV	A,78H
	CLR	ACC.7
	CJNE	A,#2,X05A0
	SETB	ACC.7
	MOV	78H,A
	RET	
;
X05B0:
	JNB	25H.7,X05B5
	AJMP	X0476
;
X05B5:
	JB	23H.0,X05BA
	AJMP	X060C
;
X05BA:	CJNE	R6,#80H,X05BF
X05BD:	AJMP	X05DA
;
X05BF:
	CJNE	R6,#90H,X05D8
	JZ	X05BD
	ACALL	X07CE
	ORL	A,R3
	MOVX	@R0,A
	MOV	R1,#0CH
	MOVX	A,@R1
	JNB	ACC.7,X05D0
	ACALL	X067A
X05D0:	ACALL	X068C
X05D2:	ACALL	X069C
	MOV	R0,#0CH
	MOV	A,R7
	MOVX	@R0,A
X05D8:	AJMP	X03D4
;
X05DA:
	ACALL	X07CE
	CPL	A
	ANL	A,R3
	MOVX	@R0,A
	MOV	R0,#0CH
	MOVX	A,@R0
	XRL	A,R7
	JNZ	X05D8
	MOV	A,R7
	SETB	ACC.7
	MOVX	@R0,A
	MOV	R2,#0
	MOV	R0,#80H
X05ED:	MOVX	A,@R0
	JNZ	X05FC
	INC	R0
	INC	R2
	CJNE	R2,#10H,X05ED
	ACALL	X066F
	MOV	49H,#0
	AJMP	X03D4
;
X05FC:
	MOV	R3,#0
	CLR	C
X05FF:	RRC	A
	JC	X0605
	INC	R3
	SJMP	X05FF
;
X0605:
	MOV	A,R2
	SWAP	A
	RR	A
	ORL	A,R3
	MOV	R7,A
	SJMP	X05D2
;
X060C:
	MOV	A,R6
	CJNE	A,#90H,X0610
X0610:	JNC	X0625
	ADD	A,#80H
	MOV	R2,A
X0615:	MOV	A,#6
	ADD	A,R2
	MOV	R0,A
	MOVX	A,@R0
	XRL	A,R7
	JNZ	X0623
	MOV	A,R7
	SETB	ACC.7
	MOVX	@R0,A
	ACALL	X06E3
X0623:	AJMP	X03D4
;
X0625:
	ADD	A,#70H
	MOV	R2,A
	MOV	A,R5
	JZ	X0615
	MOV	A,#6
	ADD	A,R2
	MOV	R0,A
	MOVX	A,@R0
	JNB	ACC.7,X0635
	ACALL	X06CD
X0635:	MOV	A,R7
	MOVX	@R0,A
	AJMP	X04AA
;
;
;
X0639:
	MOV	DPTR,#X001C
	ACALL	SelectBank_FE
	JB	23H.0,X065C
	MOV	R0,#6
	CLR	F0
X0645:	MOVX	A,@R0
	JB	ACC.7,X064E
	SETB	ACC.7
	MOVX	@R0,A
	SETB	F0
X064E:	INC	R0
	CJNE	R0,#0CH,X0645
	ANL	49H,#0C0H
	JNB	F0,X065B
	LCALL	X075C
X065B:	RET	
;
;
;
X065C:
	MOV	R0,#0CH					; *possibly* preps "cursor invisible" command for LCD
	MOV	A,#0C0H					; *possibly* display position related
	MOVX	@R0,A
	MOV	R0,#80H
	CLR	A
X0664:	MOVX	@R0,A
	INC	R0
	CJNE	R0,#90H,X0664
	ACALL	X066F
	MOV	49H,#0
	RET	
;
X066F:
	MOV	R0,#6
X0671:	MOVX	A,@R0
	SETB	ACC.7
	MOVX	@R0,A
	INC	R0
	CJNE	R0,#0CH,X0671
	RET	
;
X067A:
	MOV	R1,#1AH
	MOV	R2,#0
X067E:	MOVX	A,@R1
	JB	ACC.7,X068B
	ACALL	X06CD
	ACALL	X06DC
	INC	R1
	INC	R2
	CJNE	R2,#6,X067E
X068B:	RET	
;
X068C:
	MOV	R1,#1AH
	MOV	R0,#14H
X0690:	MOVX	A,@R1
	JB	ACC.7,X069B
	MOV	A,R5
	MOVX	@R0,A
	INC	R1
	INC	R0
	CJNE	R1,#20H,X0690
X069B:	RET	
;
X069C:	MOV	R0,#6
	MOV	R1,#1AH
X06A0:	MOVX	A,@R1
	JB	ACC.7,X06AC
	ACALL	X06AD
	MOVX	@R0,A
	INC	R1
	INC	R0
	CJNE	R0,#0CH,X06A0
X06AC:	RET	
;
X06AD:	JNB	ACC.6,X06C3
	SETB	ACC.7
	ADD	A,R7
X06B3:	JC	X06B9
	ADD	A,#0CH
	SJMP	X06B3
;
X06B9:	CJNE	A,#10H,X06BC
X06BC:	JNC	X06C2
	ADD	A,#0CH
	SJMP	X06B9
;
X06C2:	RET	
;
X06C3:	ADD	A,R7
X06C4:	CJNE	A,#71H,X06C7
X06C7:	JC	X06C2
	ADD	A,#0F4H
	SJMP	X06C4
;
X06CD:
	MOV	A,R2
	MOVC	A,@A+DPTR
	JB	23H.5,X06D6
	ANL	A,48H
	JZ	X06DB
X06D6:	CPL	A
	ANL	2DH,A
	ANL	2EH,A
X06DB:	RET	
;
X06DC:
	MOV	A,R2
	MOVC	A,@A+DPTR
	ORL	48H,A
	ORL	49H,A
	RET	
;
X06E3:
	MOV	A,R2
	MOVC	A,@A+DPTR
	CPL	A
	ANL	49H,A
	RET	
;
; # Tx MIDI SysEx byte? -- likely!
;
TxMIDIbyte:
	MOV	LAST_BANK,#0FDH			; Set the last bank to $fd
	MOV	P2,#0FDH			; Select bank $fd (TX buffer)
	MOV	TH0,A				; (ab)use TH0 to store the value to be sent
	MOV	A,RB3R5				; get current buffer write posistion (RB3R5)
	MOV	R0,A				; save it in R0
	INC	A				; increment buffer write position

_txWaitLoop:
	CJNE	A,RB1R0,_txWriteBuffer		; compare to the last sent position (RB1R0)
	SJMP	_txWaitLoop			; loop until there's space in the buffer

_txWriteBuffer:
	XCH	A,TH0				; get back the value to be sent, storing pos in TH0
	MOVX	@R0,A				; store it in the TX buffer
	MOV	A,TH0				; move buffer write position back into A
	CLR	ES				; disable serial interrupts
	JB	20H.3,_txFinish			; leave if we're already waiting for pending interrupts
	SETB	TI				; trigger the interrupt
	SETB	20H.3				; flag that interrupts are pending
_txFinish:
	MOV	RB3R5,A				; save the last written position (RB3R5)
	SETB	ES				; enable serial interrupts
	RET
;
; # MIDI SysEx Handshaking Tx
;
SysExHandTx:
	MOV	A,#0F0H			; Start SysEx
	ACALL	TxMIDIbyte
	MOV	A,#41H			; Roland Manufacturer SysEX ID
	ACALL	TxMIDIbyte
	MOV	A,R3			; Operation Code (WSF, RQF, DAT, BLD, APR, IPR, etc.)
	ACALL	TxMIDIbyte
	MOV	A,6FH			; MIDI Channel
	ACALL	TxMIDIbyte
	MOV	A,#23H			; Format Type ($23 is code for JU-1, JU-2, or MKS-50)
	ACALL	TxMIDIbyte
	JB	28H.7,X072A
	MOV	A,R2			; R2 sets Level #, probably
	ACALL	TxMIDIbyte
	MOV	A,#1			; Group #, probably
	ACALL	TxMIDIbyte
X072A:	RET	
;
;
;
X072B:
	MOV	A,6AH
	SWAP	A
	JB	23H.2,X0733
	MOV	A,35H
X0733:	ANL	A,#0FH
	MOV	6DH,A
	RET	
;
;
;
X0738:
	ACALL	SelectBank_FE
	MOV	R0,#6
	MOV	A,#0C0H					; possibly display positioning related
X073E:	MOVX	@R0,A
	INC	R0
	CJNE	R0,#0DH,X073E
	SJMP	X075C
;
X0745:	ACALL	SelectBank_FE
	MOV	R0,#6
X0749:	MOVX	A,@R0
	SETB	ACC.7
	MOVX	@R0,A
	INC	R0
	CJNE	R0,#0DH,X0749
	CLR	A
	MOV	48H,A
	MOV	49H,A
	MOV	2CH,A
	MOV	2DH,A
	MOV	2EH,A
X075C:	ACALL	SelectBank_FE
	MOV	R0,#0DH
	MOV	A,#1
X0762:	MOVX	@R0,A
	INC	R0
	INC	A
	CJNE	A,#7,X0762
	CLR	A
	MOVX	@R0,A
	MOV	R0,#80H
X076C:	MOVX	@R0,A
	INC	R0
	CJNE	R0,#90H,X076C
	RET	
;
X0772:	CLR	20H.7
	MOV	RB3R6,#0
	MOV	RB3R7,#0
	CLR	23H.5
	CLR	20H.1
	MOV	C,24H.4
	MOV	23H.4,C
	CLR	A
	MOV	6BH,A
	MOV	6CH,A
	MOV	R0,#0
	ACALL	SelectBank_FE
X078B:	MOVX	@R0,A
	INC	R0
	CJNE	R0,#6,X078B
	ORL	26H,#3FH
	RET	
;
X0794:
	MOV	R4,#3
	MOV	R7,#0EH
	SJMP	X079E
;
X079A:
	MOV	R4,#4
	MOV	R7,#10H
X079E:	ACALL	SelectBank_FE
	LCALL	X0CED
	RET	
;
;
;
X07A4:
	MOV	7EH,#0C8H
X07A7:	LCALL	X0800
	ACALL	X0794
	ACALL	X079A
	DJNZ	7EH,X07A7
	RET	
;
; # MIDI related
;
ProgChng:
	MOV	R3,#0C0H			; MIDI Program Change ($Cx)
	SJMP	X07BA
;
CtrlChng:
	MOV	R3,#0B0H			; MIDI Control Change ($Bx), probably
	MOV	R2,#7AH				; Local Control On/Off
X07BA:	; fall through or jumped to by ProgChng
	MOV	A,R3				; applies either Program Change or Program Change
	ORL	A,6FH				; combine with MIDI channel
	ACALL	TxMIDIbyte
	MOV	A,R2				; 
	ACALL	TxMIDIbyte
	CJNE	R3,#0B0H,X07CD
	CLR	A
	JB	24H.7,X07CB
	MOV	A,#7FH
X07CB:	ACALL	TxMIDIbyte
X07CD:	RET	
;
;
;
X07CE:
	MOV	A,R7
	ANL	A,#7
	MOV	R3,A
	SETB	C
	CLR	A
	INC	R3
X07D5:
	RLC	A
	DJNZ	R3,X07D5
	MOV	R3,A
	MOV	A,R7
	ANL	A,#78H
	SWAP	A
	RL	A
	ADD	A,#80H
	MOV	R0,A
	MOVX	A,@R0
	XCH	A,R3
	RET	
;
; Alignment to 0800H for AJMP/ACALL (29 bytes padding)
;
	ORG	0800H

X0800:
	LCALL	SelectBank_FE
	MOV	R4,#5
	MOV	R7,#12H
	ACALL	X0CED
	MOV	A,2CH
	ORL	A,48H
	JB	23H.5,X0812
	MOV	A,48H
X0812:	MOV	2CH,A
	JZ	X082A
	JNB	2BH.7,X082C
	ANL	2BH,#1FH
	CLR	A
	MOV	4CH,A
	MOV	4DH,A
	SJMP	X082C
;
X0823:	MUL	AB
	MUL	AB
	MUL	AB
	MUL	AB
	MUL	AB
	SJMP	X0870
;
X082A:	SETB	2BH.7
X082C:	JB	2BH.5,X0823
	JB	2BH.6,X085B
	MOV	A,40H
	SETB	C
	RLC	A
	MOV	R2,A
	MOV	DPTR,#X3288				; data table of some kind
	MOVC	A,@A+DPTR
	CPL	A
	XCH	A,R2
	DEC	A
	MOVC	A,@A+DPTR
	CPL	A
	CLR	C
	RRC	A
	XCH	A,R2
	RRC	A
	XCH	A,R2
	CLR	C
	RRC	A
	XCH	A,R2
	RRC	A
	ADD	A,4DH
	MOV	4DH,A
	MOV	A,R2
	ADDC	A,4CH
	MOV	4CH,A
	ANL	A,#0C0H
	JZ	X0872
	SETB	2BH.6
	MOV	4CH,#0
X085B:	MOV	A,40H
	RL	A
	MOV	DPTR,#X3288				; data table of some kind
	MOVC	A,@A+DPTR
	MOV	R2,A
	MOV	A,#0FFH
	CLR	C
	SUBB	A,R2
	INC	A
	ADD	A,4CH
	MOV	4CH,A
	JNC	X0872
	SETB	2BH.5
X0870:	MOV	A,#0FFH
X0872:	MOV	4EH,A
	MOV	R0,#6
	MOV	R1,#53H
	MOV	A,65H
	CLR	F0
	JNZ	X0880
	SETB	F0
X0880:	LCALL	X31F0
	MOV	R2,#0
	CLR	C
	RLC	A
	XCH	A,R2
	RLC	A
	MOV	R3,A
X088A:	MOVX	A,@R0
	INC	R0
	CLR	ACC.7
	ADD	A,67H
	MOV	R6,A
	MOV	R7,#0
	MOV	A,@R1
	MOV	R4,A
	INC	R1
	MOV	A,@R1
	MOV	R5,A
	JB	F0,X08D3
	JNB	23H.4,X08D4
	CLR	C
	SUBB	A,R7
	MOV	A,R4
	SUBB	A,R6
	JC	X08C5
	MOV	A,R5
	SUBB	A,R2
	XCH	A,R4
	SUBB	A,R3
	JC	X08B9
	XCH	A,R4
	MOV	R5,A
	CLR	C
	SUBB	A,R7
	MOV	A,R4
	SUBB	A,R6
	JC	X08B9
X08B2:	MOV	A,R5
	MOV	@R1,A
	DEC	R1
	MOV	A,R4
	MOV	@R1,A
	SJMP	X08BE
;
X08B9:	MOV	A,R7
	MOV	@R1,A
	DEC	R1
	MOV	A,R6
	MOV	@R1,A
X08BE:	INC	R1
	INC	R1
	CJNE	R1,#5FH,X088A
	AJMP	X08DC
;
X08C5:	MOV	A,R5
	ADD	A,R2
	XCH	A,R4
	ADDC	A,R3
	XCH	A,R4
	MOV	R5,A
	CLR	C
	SUBB	A,R7
	MOV	A,R4
	SUBB	A,R6
	JNC	X08B9
	AJMP	X08B2
;
X08D3:	NOP	
X08D4:	NOP
X08D5:	NOP
;
X08D6:
	MUL	AB
	MUL	AB
	MUL	AB
	MUL	AB
	AJMP	X08B9
;
X08DC:	MOV	A,3BH
	MOV	R4,#60H
	ACALL	X0D70
	MOV	R0,#28H
	MOV	R1,#34H
	ACALL	X0D8B
	ACALL	X0D9E
	ACALL	X0DB3
	MOV	A,3EH
	CPL	A
	CLR	ACC.7
	MOV	R4,#70H
	ACALL	X0D70
	ACALL	X0DC6
	ACALL	X0DD9
	ACALL	X0DEC
	MOV	A,49H
	ANL	48H,A
	JB	23H.5,X0906
	ANL	2DH,A
	ANL	2EH,A
X0906:	MOV	B,6CH
	MOV	A,34H
	ANL	A,#0FH
	SWAP	A
	RR	A
	MUL	AB
	MOV	R3,A
	MOV	A,#0C0H				; possibly display positioning related
	XCH	A,B
	MOV	R2,A
	MOV	A,68H
	CPL	A
	CLR	ACC.7
	LCALL	X3122
	CPL	A
	CLR	ACC.7
	MUL	AB
	ADD	A,R3
	XCH	A,R2
	ADDC	A,B
	JNB	ACC.7,X092D
	MOV	A,#7FH
	MOV	R2,#0FFH
X092D:	MOV	R4,#0E0H
	ACALL	X0D6A
	ACALL	X0CB1
	MOV	R3,A
	JB	2BH.3,X094A
	ADD	A,50H
	MOV	50H,A
	MOV	A,R2
	ADDC	A,4FH
	JNB	ACC.7,X095D
	SETB	2BH.3
	MOV	A,#7FH
	MOV	50H,#0FFH
	SJMP	X095D
;
X094A:	MOV	A,50H
	CLR	C
	SUBB	A,R3
	MOV	50H,A
	MOV	A,4FH
	SUBB	A,R2
	JNC	X095D
	CLR	A
	MOV	50H,A
	CLR	2BH.3
	XRL	2BH,#4
X095D:	MOV	4FH,A
	MOV	R7,A
	ACALL	X0CC7
	MOV	A,37H
	LCALL	X3122
	MOV	TL0,A
	MOV	A,60H
	JB	ACC.7,X0974
	SETB	ACC.7
	MOV	R2,#3CH
	SJMP	X0979
;
X0974:	CLR	ACC.7
	MOV	R2,#3DH
	NOP	
X0979:	MOV	R3,A
	MOV	A,69H
	MOV	R4,#0
	JNB	ACC.7,X0983
	MOV	R4,#0FFH
X0983:	ADD	A,R3
	XCH	A,R2
	ADDC	A,R4
	XCH	A,R2
	MOV	R3,A
	MOV	A,6BH
	MOV	B,66H
	MUL	AB
	MOV	A,33H
	ANL	A,#0F0H
	RR	A
	XCH	A,B
	MOV	R4,A
	MOV	A,6CH
	MUL	AB
	MOV	A,4EH
	XCH	A,B
	MOV	R5,A
	MOV	A,36H
	LCALL	X3122
	MUL	AB
	MOV	A,R5
	ADD	A,B
	JNB	ACC.7,X09AC
	MOV	A,#7FH
X09AC:	ADD	A,R4
	JNB	ACC.7,X09B2
	MOV	A,#7FH
X09B2:	JNB	24H.3,X09B6
	CLR	A
X09B6:	MOV	R4,A
	MOV	B,4BH
	MUL	AB
	MOV	A,4AH
	XCH	A,B
	XCH	A,R4
	MUL	AB
	ADD	A,R4
	MOV	R4,A
	MOV	A,B
	ADDC	A,#0
	RRC	A
	XCH	A,R4
	RRC	A
	XCH	A,R4
	RRC	A
	XCH	A,R4
	RRC	A
	XCH	A,R4
	RRC	A
	XCH	A,R4
	RRC	A
	XCH	A,R4
	RRC	A
	XCH	A,R4
	RRC	A
	XCH	A,R4
	ANL	A,#3
	XCH	A,R3
	CLR	C
	JB	2BH.0,X09E3
	SUBB	A,R4
	XCH	A,R2
	SUBB	A,R3
	SJMP	X09E6
;
X09E3:	ADD	A,R4
	XCH	A,R2
	ADDC	A,R3
X09E6:	MOV	73H,A
	MOV	74H,R2
	MOV	A,32H
	MOV	B,#0D0H
	MUL	AB
	MOV	A,#7FH
	SUBB	A,B
	RL	A
	MOV	R2,A
	MOV	DPTR,#X3288				; data table of some kind
	MOVC	A,@A+DPTR
	CPL	A
	XCH	A,R2
	INC	A
	MOVC	A,@A+DPTR
	CPL	A
	XCH	A,R2
	CLR	C
	RRC	A
	XCH	A,R2
	RRC	A
	XCH	A,R2
	CLR	C
	RRC	A
	XCH	A,R2
	RRC	A
	MOV	R3,A
	JB	2BH.4,X0A21
	ADD	A,52H
	MOV	52H,A
	MOV	R3,A
	MOV	A,R2
	ADDC	A,51H
	JNB	ACC.7,X0A32
	SETB	2BH.4
	MOV	A,#7FH
	MOV	52H,#0FFH
	SJMP	X0A32
;
X0A21:	MOV	A,52H
	CLR	C
	SUBB	A,R3
	MOV	52H,A
	MOV	R3,A
	MOV	A,51H
	SUBB	A,R2
	JNC	X0A32
	CLR	A
	MOV	52H,A
	CLR	2BH.4
X0A32:	MOV	51H,A
	MOV	RB0R2,R3
	MOV	R4,#0F0H
	ACALL	X0D6A
	MOV	A,3AH
	MOV	R3,A
	MOV	R2,#0
	CLR	C
	RRC	A
	XCH	A,R2
	RRC	A
	ADD	A,R3
	XCH	A,R2
	RRC	A
	XCH	A,R2
	RRC	A
	XCH	A,R2
	CLR	C
	RRC	A
	XCH	A,R2
	RRC	A
	MOV	R3,A
	MOV	A,34H
	ANL	A,#0F0H
	RR	A
	MOV	B,A
	MOV	A,6CH
	MUL	AB
	MOV	R4,A
	XCH	A,B
	CLR	C
	RRC	A
	XCH	A,R4
	RRC	A
	XCH	A,R4
	CLR	C
	RRC	A
	XCH	A,R4
	RRC	A
	XCH	A,R4
	CLR	C
	RRC	A
	XCH	A,R4
	RRC	A
	ADD	A,R3
	MOV	R3,A
	MOV	A,R4
	ADDC	A,R2
	MOV	R2,A
	MOV	B,4EH
	MOV	A,3DH
	MUL	AB
	MOV	R4,B
	MOV	A,4BH
	MUL	AB
	MOV	A,4AH
	XCH	A,B
	XCH	A,R4
	MUL	AB
	ADD	A,R4
	MOV	R4,B
	XCH	A,R4
	ADDC	A,#0
	RRC	A
	XCH	A,R4
	RRC	A
	XCH	A,R4
	RRC	A
	XCH	A,R4
	RRC	A
	XCH	A,R4
	RRC	A
	XCH	A,R4
	RRC	A
	XCH	A,R4
	RRC	A
	XCH	A,R4
	RRC	A
	XCH	A,R4
	ANL	A,#3
	XCH	A,R3
	CLR	C
	JB	2BH.0,X0AA1
	SUBB	A,R4
	XCH	A,R2
	SUBB	A,R3
	SJMP	X0AA4
;
X0AA1:	ADD	A,R4
	XCH	A,R2
	ADDC	A,R3
X0AA4:	MOV	75H,A
	MOV	76H,R2
	MOV	R0,#53H
	MOV	R7,#0
	MOV	R1,#28H
	JNB	2FH.5,X0AB3
	MOV	R1,#34H
X0AB3:	MOV	R6,#28H
	JNB	2FH.3,X0ABF
	MOV	R6,#34H
	JNB	2FH.2,X0ABF
	MOV	R6,#14H
X0ABF:	MOV	A,R7
	RR	A
	MOV	R4,A
	ADD	A,#0
	XCH	A,R1
	MOV	B,A
	MOVX	A,@R1
	XCH	A,B
	MOV	R1,A
	MOV	A,6DH
	MUL	AB
	ADD	A,B
	XCH	A,B
	ADDC	A,#0
	XCH	A,R4
	MOV	R3,73H
	MOV	DPTR,#X001C
	MOVC	A,@A+DPTR
	ANL	A,26H
	JZ	X0AE7
	MOV	A,74H
	ADD	A,B
	XCH	A,R3
	ADDC	A,R4
	SJMP	X0AEE
;
X0AE7:	MOV	A,74H
	CLR	C
	SUBB	A,B
	XCH	A,R3
	SUBB	A,R4
X0AEE:	MOV	R4,A
	MOVX	A,@R1
	MOV	B,A
	INC	R1
	MOV	A,TL0
	JB	2FH.5,X0AFA
	CLR	C
	RRC	A
X0AFA:	MOV	R2,A
	MUL	AB
	MOVX	A,@R1
	INC	R1
	XCH	A,B
	XCH	A,R2
	MUL	AB
	ADD	A,R2
	XCH	A,B
	ADDC	A,#0
	JB	2FH.4,X0B12
	XCH	A,B
	ADD	A,R3
	XCH	A,B
	ADDC	A,R4
	SJMP	X0B1B
;
X0B12:	MOV	R2,A
	MOV	A,R3
	CLR	C
	SUBB	A,B
	MOV	B,A
	MOV	A,R4
	SUBB	A,R2
X0B1B:	MOV	R3,A
	MOV	A,@R0
	MOV	R2,A
	INC	R0
	MOV	A,@R0
	ADD	A,B
	XCH	A,R2
	ADDC	A,R3
	MOV	R3,A
	MOV	A,R2
	CLR	C
	SUBB	A,#0B6H
	XCH	A,R3
	SUBB	A,#46H
	JNC	X0B30
	CLR	A
	MOV	R3,A
X0B30:	CJNE	A,#6BH,X0B33
X0B33:	JC	X0B39
	MOV	A,#6AH
	MOV	R3,#0FFH
X0B39:	CLR	C
	RLC	A
	MOV	R5,A
	LCALL	X303F				; this is truly code!
	MOV	B,R3
	MUL	AB
	MOV	A,R3
	XCH	A,B
	XCH	A,R4
	MUL	AB
	ADD	A,R4
	XCH	A,B
	ADDC	A,#0
	MOV	R3,A
	LCALL	X2F5B
	ADD	A,B
	XCH	A,R3
	ADDC	A,R4
	MOV	DPH,#0C0H
	MOV	DPL,R7
	MOVX	@DPTR,A
	MOV	A,R3
	INC	DPL
	MOVX	@DPTR,A
	MOV	A,R1
	MOV	R5,A
	MOV	A,R7
	ADD	A,#0FAH
	RR	A
	DEC	A
	MOV	R4,A
	CJNE	R7,#8,X0B69
X0B69:	JC	X0B6D
	ACALL	X0CED
X0B6D:	MOV	A,R5
	XCH	A,R6
	MOV	R1,A
	JNB	2FH.3,X0B91
	JNB	2FH.2,X0B91
	MUL	AB
	NOP	
	NOP
;
X0B79:
	MOVX	A,@R1
	INC	R1
	CLR	C
	RRC	A
	MOV	B,3CH
	MUL	AB
	XCH	A,B
	CLR	C
	RRC	A
	XCH	A,B
	RRC	A
	XCH	A,B
	CLR	C
	RRC	A
	XCH	A,B
	RRC	A
	SJMP	X0BB1
;
X0B91:	MOVX	A,@R1
	MOV	B,A
	INC	R1
	MOV	A,3CH
	JB	2FH.3,X0B9C
	CLR	C
	RRC	A
X0B9C:	MOV	R2,A
	MUL	AB
	MOVX	A,@R1
	INC	R1
	XCH	A,B
	XCH	A,R2
	MUL	AB
	ADD	A,R2
	XCH	A,B
	ADDC	A,#0
	CLR	C
	RRC	A
	XCH	A,B
	RRC	A
	JB	2FH.2,X0BBB
X0BB1:	ADD	A,76H
	MOV	R2,A
	MOV	A,75H
	ADDC	A,B
	MOV	R3,A
	SJMP	X0BC6
;
X0BBB:	MOV	R2,A
	MOV	A,76H
	CLR	C
	SUBB	A,R2
	MOV	R2,A
	MOV	A,75H
	SUBB	A,B
	MOV	R3,A
X0BC6:	DEC	R0
	MOV	A,@R0
	MOV	B,A
	INC	R0
	MOV	A,@R0
	INC	R0
	CLR	F0
	CLR	C
	SUBB	A,#0
	XCH	A,B
	SUBB	A,#40H
	JNC	X0BE6
	CPL	A
	XCH	A,B
	CPL	A
	ADD	A,#1
	XCH	A,B
	ADDC	A,#0
	SETB	F0
	SJMP	X0BED
;
X0BE6:
	INC	DPTR
	INC	DPTR
	INC	DPTR
	INC	DPTR
	INC	DPTR
	NOP	
	NOP
X0BED:
	MOV	R4,A
	MOV	A,33H
	ANL	A,#0FH
	SWAP	A
	RR	A
	MOV	R5,A
	MUL	AB
	MOV	A,R5
	XCH	A,B
	XCH	A,R4
	MUL	AB
	ADD	A,R4
	XCH	A,B
	ADDC	A,#0
	CLR	C
	RRC	A
	XCH	A,B
	RRC	A
	XCH	A,B
	CLR	C
	RRC	A
	XCH	A,B
	RRC	A
	JNB	F0,X0C17
	XCH	A,R2
	CLR	C
	SUBB	A,R2
	XCH	A,R3
	SUBB	A,B
	SJMP	X0C1B
;
X0C17:
	ADD	A,R2
	XCH	A,R3
	ADDC	A,B
X0C1B:
	MOV	R4,A
	ANL	A,#0C0H
	JZ	X0C26
	MOV	R4,#0
	MOV	R3,#0
	SJMP	X0C2F
;
X0C26:
	MOV	A,R4
	ANL	A,#30H
	JZ	X0C2F
	MOV	R4,#0FH
	MOV	R3,#0FFH
X0C2F:	MOV	A,R7
	RR	A
	SWAP	A
	ORL	A,R4
	MOV	DPL,A
	MOV	DPH,#90H
	MOV	A,R3
	MOVX	@DPTR,A
	INC	R7
	INC	R7
	MOV	A,R6
	XCH	A,R1
	MOV	R6,A
	CJNE	R0,#5FH,X0C42
X0C42:	JNC	X0C46
	AJMP	X0ABF
;
X0C46:	MOV	A,3FH
	MOV	B,#0F5H
	MUL	AB
	MOV	A,#7FH
	SUBB	A,B
	RL	A
	MOV	R2,A
	MOV	DPTR,#X3288				; data table of some kind
	MOVC	A,@A+DPTR
	CPL	A
	XCH	A,R2
	INC	A
	MOVC	A,@A+DPTR
	CPL	A
	MOV	R3,A
	JB	2BH.1,X0C72
	ADD	A,4BH
	MOV	4BH,A
	MOV	A,R2
	ADDC	A,4AH
	JNB	ACC.7,X0C85
	SETB	2BH.1
	MOV	A,#7FH
	MOV	4BH,#0FFH
	SJMP	X0C85
;
X0C72:	MOV	A,4BH
	CLR	C
	SUBB	A,R3
	MOV	4BH,A
	MOV	A,4AH
	SUBB	A,R2
	JNC	X0C85
	CLR	A
	MOV	4BH,A
	CLR	2BH.1
	XRL	2BH,#1
X0C85:	MOV	4AH,A
	ACALL	X0CB1
	XCH	A,R2
	CLR	C
	RRC	A
	XCH	A,R2
	RRC	A
	MOV	R3,A
	JB	2BH.3,X0C9C
	ADD	A,50H
	MOV	A,R2
	ADDC	A,4FH
	JB	ACC.7,X0CA5
	SJMP	X0CA7
;
X0C9C:	MOV	A,50H
	CLR	C
	SUBB	A,R3
	MOV	A,4FH
	SUBB	A,R2
	JNC	X0CA7
X0CA5:	MOV	A,4FH
X0CA7:	MOV	R7,A
	ACALL	X0CC7
	MOV	R4,#2
	MOV	R7,#0CH
	ACALL	X0CED
	RET	
;
X0CB1:	MOV	A,39H
	MOV	B,#0D0H
	MUL	AB
	MOV	A,#7FH
	SUBB	A,B
	RL	A
	MOV	R2,A
	MOV	DPTR,#X3288				; data table of some kind
	MOVC	A,@A+DPTR
	CPL	A
	XCH	A,R2
	INC	A
	MOVC	A,@A+DPTR
	CPL	A
	RET	
;
X0CC7:	MOV	A,39H
	JZ	X0CE2
	MOV	A,#7FH
	JB	2BH.2,X0CD3
	ADD	A,R7
	SJMP	X0CD5
;
X0CD3:	CLR	C
	SUBB	A,R7
X0CD5:	MOV	B,A
	MOV	A,38H
	RL	A
	MUL	AB
	MOV	A,B
	JNZ	X0CE8
	INC	A
	SJMP	X0CE8
;
X0CE2:	MUL	AB
	MUL	AB
	MUL	AB
	MOV	A,38H
	RL	A
X0CE8:	MOV	DPTR,#XC00C
	MOVX	@DPTR,A
	RET	
;
;
;
X0CED:
	JB	2FH.0,X0D28
	MOV	A,#20H
	ADD	A,R7
	MOV	R1,A
	MOVX	A,@R1
	MOV	R2,A
	INC	R1
	MOVX	A,@R1
	RRC	A
	XCH	A,R2
	RRC	A
	MOV	B,A
	JNB	2FH.1,X0D1D
X0D00:	MOV	A,R1
	ADD	A,#0BH
	MOV	R1,A
	MOVX	A,@R1
	XCH	A,B
	ADD	A,B
	INC	R1
	MOV	R3,A
	MOVX	A,@R1
	XCH	A,R2
	ADDC	A,R2
	CLR	C
	RRC	A
	XCH	A,R3
	RRC	A
	ADD	A,B
	XCH	A,R2
	ADDC	A,R3
	CLR	C
	RRC	A
	XCH	A,R2
	RRC	A
	XCH	A,R2
	SJMP	X0D53
;
;
;
X0D1D:
	MOV	R1,A
	MUL	AB
	MUL	AB
	MUL	AB
	MUL	AB
	NOP	
	NOP
	MOV	A,R1
	XCH	A,R2
	SJMP	X0D53
;
X0D28:
	MOV	A,#14H
	ADD	A,R4
	MOV	R1,A
	MOVX	A,@R1
	JB	2FH.1,X0D32
	MOV	A,#7FH
X0D32:	MOV	R2,#0
	MOV	R3,A
	RRC	A
	XCH	A,R2
	RRC	A
	ADD	A,R3
	XCH	A,R2
	SETB	ACC.6
	ADD	A,R3
	RRC	A
	XCH	A,R2
	RRC	A
	XCH	A,R2
	RRC	A
	XCH	A,R2
	RRC	A
	XCH	A,R2
	MOV	R3,A
	MOV	DPTR,#X001C
	MOV	A,R4
	MOVC	A,@A+DPTR
	ANL	A,2CH
	JNZ	X0D52
	CLR	A
	MOV	R2,A
	MOV	R3,A
X0D52:	MOV	A,R3
X0D53:	RRC	A
	XCH	A,R2
	RRC	A
	XCH	A,R2
	RRC	A
	XCH	A,R2
	RRC	A
	XCH	A,R2
	SWAP	A
	ANL	A,#0F0H
	ORL	A,R4
	SWAP	A
	SETB	ACC.7
	MOV	DPH,#90H
	MOV	DPL,A
	MOV	A,R2
	MOVX	@DPTR,A
	RET	
;
X0D6A:	RRC	A
	XCH	A,R2
	RRC	A
	XCH	A,R2
	SJMP	X0D78
;
X0D70:	MOV	R3,A
	MOV	R2,#0
	RRC	A
	XCH	A,R2
	RRC	A
	ADD	A,R3
	XCH	A,R2
X0D78:	RRC	A
	XCH	A,R2
	RRC	A
	XCH	A,R2
	RRC	A
	XCH	A,R2
	RRC	A
	XCH	A,R2
	ANL	A,#0FH
	ORL	A,R4
	MOV	DPL,A
	MOV	DPH,#90H
	MOV	A,R2
	MOVX	@DPTR,A
	RET	
;
X0D8B:	MOV	R5,53H
	MOV	R7,#14H
	MOV	R6,#1
	JNB	2DH.0,X0D99
	JB	2EH.0,X0DB1
	AJMP	X0E77
;
X0D99:	JNB	2CH.0,X0DFF
	AJMP	X0ED6
;
X0D9E:	MOV	R5,55H
	MOV	R7,#15H
	MOV	R6,#2
	JNB	2DH.1,X0DAC
	JB	2EH.1,X0E1A
	AJMP	X0E77
;
X0DAC:	JNB	2CH.1,X0DFF
	AJMP	X0ED6
;
X0DB1:	AJMP	X0E1A
;
X0DB3:	MOV	R5,57H
	MOV	R7,#16H
	MOV	R6,#4
	JNB	2DH.2,X0DC1
	JB	2EH.2,X0E1A
	AJMP	X0E77
;
X0DC1:	JNB	2CH.2,X0DFF
	AJMP	X0ED6
;
X0DC6:	MOV	R5,59H
	MOV	R7,#17H
	MOV	R6,#8
	JNB	2DH.3,X0DD4
	JB	2EH.3,X0E1A
	AJMP	X0E77
;
X0DD4:	JNB	2CH.3,X0DFF
	AJMP	X0ED6
;
X0DD9:	MOV	R5,5BH
	MOV	R7,#18H
	MOV	R6,#10H
	JNB	2DH.4,X0DE7
	JB	2EH.4,X0E1A
	AJMP	X0E77
;
X0DE7:	JNB	2CH.4,X0DFF
	AJMP	X0ED6
;
X0DEC:	MOV	R5,5DH
	MOV	R7,#19H
	MOV	R6,#20H
	JNB	2DH.5,X0DFA
	JB	2EH.5,X0E1A
	AJMP	X0E77
;
X0DFA:	JNB	2CH.5,X0DFF
	AJMP	X0ED6
;
X0DFF:
	NOP	
	NOP
	MUL	AB
	MUL	AB
	MUL	AB
	MUL	AB
	MOV	R4,47H
	MOV	A,35H
	ANL	A,#0F0H
	MOV	R3,A
	ACALL	X0F56
	MOV	R6,A
	MOVX	A,@R0
	MOV	R4,A
	INC	R0
	MOVX	A,@R0
	ACALL	X0F1A
	MOV	R6,A
	MOV	A,B
	AJMP	X0E49
;
X0E1A:	MOV	A,46H
	RL	A
	INC	A
	MOV	TH0,A
	MOV	R4,45H
	MOV	A,35H
	ANL	A,#0F0H
	MOV	R3,A
	ACALL	X0F56
	MOV	R6,A
	MOVX	A,@R0
	CLR	C
	SUBB	A,TH0
	MOV	R4,A
	INC	R0
	MOVX	A,@R0
	SUBB	A,46H
	JNC	X0E68
	CPL	A
	XCH	A,R4
	CPL	A
	ADD	A,#1
	XCH	A,R4
	ADDC	A,#0
	ACALL	X0F1A
	MOV	R5,A
	MOV	A,TH0
	CLR	C
	SUBB	A,R5
	MOV	R6,A
	MOV	A,46H
	SUBB	A,B
X0E49:	MOVX	@R0,A
	XCH	A,R6
	DEC	R0
	MOVX	@R0,A
	XCH	A,R7
	XCH	A,R0
	MOV	R2,A
	MOVX	A,@R0
	MOV	R0,RB0R2
	MOV	B,A
	XCH	A,R7
	MUL	AB
	MOV	A,R6
	XCH	A,B
	XCH	A,R7
	MUL	AB
	ADD	A,R7
	MOVX	@R1,A
	MOV	A,B
	ADDC	A,#0
	INC	R1
	MOVX	@R1,A
	INC	R1
	INC	R0
	INC	R0
	RET	
;
X0E68:	ACALL	X0F1A
	ADD	A,TH0
	MOV	R6,A
	MOV	A,46H
	ADDC	A,B
	MOV	R3,A
	MUL	AB
	MOV	A,R3
	NOP	
	AJMP	X0E49
;
X0E77:	MOV	A,44H
	RL	A
	INC	A
	MOV	TH0,A
	MOV	R4,43H
	MOV	A,35H
	ANL	A,#0F0H
	MOV	R3,A
	ACALL	X0F37
	JNB	F0,X0E8C
	INC	R0
	SJMP	X0ECD
;
X0E8C:	CPL	A
	CLR	C
	RRC	A
	XCH	A,R5
	CPL	A
	RRC	A
	MOV	R4,A
	MOVX	A,@R0
	MOV	R3,A
	CLR	C
	SUBB	A,TH0
	INC	R0
	MOVX	A,@R0
	MOV	R2,A
	SUBB	A,44H
	JC	X0EBB
	MOV	A,R3
	CLR	C
	SUBB	A,R4
	XCH	A,R2
	SUBB	A,R5
	JNC	X0EA8
	CLR	A
	MOV	R2,A
X0EA8:	MOV	R3,A
	MOV	A,R2
	CLR	C
	SUBB	A,TH0
	MOV	A,R3
	SUBB	A,44H
	JC	X0ECD
X0EB2:	MUL	AB
	MUL	AB
	NOP	
	NOP
	MOV	A,R2
	MOV	R6,A
	MOV	A,R3
	AJMP	X0E49
;
X0EBB:	MOV	A,R3
	ADD	A,R4
	XCH	A,R2
	ADDC	A,R5
	JNC	X0EC3
	MOV	A,#80H
X0EC3:	MOV	R3,A
	MOV	A,R2
	CLR	C
	SUBB	A,TH0
	MOV	A,R3
	SUBB	A,44H
	JC	X0EB2
X0ECD:	MOV	A,R6
	ORL	2EH,A
	MOV	R6,TH0
	MOV	A,44H
	AJMP	X0E49
;
X0ED6:	MOV	A,42H
	RL	A
	INC	A
	MOV	TH0,A
	MOV	R4,41H
	MOV	A,35H
	ANL	A,#0F0H
	MOV	R3,A
	ACALL	X0F37
	JNB	F0,X0EEB
	INC	R0
	SJMP	X0F11
;
X0EEB:	CPL	A
	CLR	C
	RRC	A
	XCH	A,R5
	CPL	A
	RRC	A
	MOV	R4,A
	MOVX	A,@R0
	ADD	A,R4
	MOV	R4,A
	INC	R0
	MOVX	A,@R0
	ADDC	A,R5
	JNC	X0EFC
	MOV	A,#80H
X0EFC:	MOV	R5,A
	MOV	A,R4
	CLR	C
	SUBB	A,TH0
	MOV	A,R5
	SUBB	A,42H
	JNC	X0F11
	MUL	AB
	MUL	AB
	MUL	AB
	MUL	AB
	NOP	
	NOP
	MOV	A,R4
	MOV	R6,A
	MOV	A,R5
	AJMP	X0E49
;
X0F11:	MOV	A,R6
	ORL	2DH,A
	MOV	R6,TH0
	MOV	A,42H
	AJMP	X0E49
;
X0F1A:	XCH	A,R4
	MOV	B,R6
	MUL	AB
	MOV	A,R4
	XCH	A,B
	XCH	A,R5
	MUL	AB
	MOV	A,R4
	XCH	A,B
	XCH	A,R6
	MUL	AB
	ADD	A,R5
	XCH	A,B
	ADDC	A,#0
	XCH	A,B
	ADD	A,R6
	XCH	A,B
	ADDC	A,#0
	XCH	A,B
	RET	
;
X0F37:	CLR	F0
	MOV	B,R3
	MOV	A,R5
	MUL	AB
	MOV	A,R3
	RR	A
	RR	A
	ANL	A,#3FH
	SUBB	A,B
	ADD	A,R4
	JB	OV,X0F4F
	JB	ACC.7,X0F53
	JZ	X0F53
	AJMP	X0F6F
;
X0F4F:	MOV	A,#7FH
	AJMP	X0F6F
;
X0F53:	SETB	F0
	RET	
;
X0F56:	MOV	B,R3
	MOV	A,R5
	MUL	AB
	MOV	A,R3
	RR	A
	RR	A
	ANL	A,#3FH
	SUBB	A,B
	ADD	A,R4
	JB	OV,X0F6A
	JB	ACC.7,X0F6E
	SJMP	X0F6F
;
X0F6A:	MOV	A,#7FH
	SJMP	X0F6F
;
X0F6E:	CLR	A
X0F6F:	SETB	C
	RLC	A
	MOV	R5,A
	MOV	DPTR,#X3288				; data table of some kind
	MOVC	A,@A+DPTR
	XCH	A,R5
	DEC	A
	MOVC	A,@A+DPTR
	RET	

;
; Alignment to 1000H for AJMP/ACALL (134 bytes padding)
;
	ORG	1000H

;
; ##############################
; # LCD DISPLAY INITIALIZATION #
; ##############################
;
InitLCD:
	ACALL	SelectBank_80
	MOV	R2,#1EH				; R2 sets delay time
	ACALL	Delay2B				; delay time?
	MOV	A,#SCRINIT
	ACALL	DisplayCmnd
	MOV	R2,#0BH				; R2 sets delay time
	ACALL	Delay2B
	MOV	A,#SCRINIT
	ACALL	DisplayCmnd
	ACALL	Delay2A
	MOV	A,#SCRINIT
	ACALL	DisplayCmnd
	ACALL	Delay1A
	MOV	A,#SCRINIT
	ACALL	DisplayCmnd
	ACALL	Delay1A
	MOV	A,#0CH				; send "cursor invisible" command to LCD
	ACALL	DisplayCmnd
	ACALL	Delay1A
	MOV	A,#6				; Entry Mode -- sets increment cursor rather than decrement, essentially shift cursor right by x LCD command
	ACALL	DisplayCmnd
	ACALL	Delay1A
	MOV	A,#1				; clear LCD command
	ACALL	DisplayCmnd
	ACALL	Delay2A
	ACALL	Delay2A

	; send 8x 8 byte CGRAM characters to the display
	MOV	R3,#8
	MOV	R4,#40H
	MOV	DPTR,#CGRAM
X103B:	MOV	R2,#8
	MOV	R0,#0
	MOV	A,R4
	MOVX	@R0,A
X1041:	INC	R0
	CLR	A
	MOVC	A,@A+DPTR
	MOVX	@R0,A
	INC	DPTR
	INC	R4
	DJNZ	R2,X1041
	ACALL	Delay2A
	DJNZ	R3,X103B

	; show the startup message
	MOV	DPTR,#MKS50Str			; '*Roland MKS-50 *'
	ACALL	PrintFullStr
	LJMP	X3388

;
;
DisplayCmnd:
	MOV	R0,#0
	MOVX	@R0,A
	SETB	ACC.7
DspCmndLp:	INC	R0
	MOVX	@R0,A
	CJNE	R0,#8,DspCmndLp
	RET	
;
Delay1A:
	MOV	R0,#19H					; sets delay time
X1062:	DJNZ	R0,X1062		; loop until R0 expires
	RET	
;
; # DISPLAY RELATED
;
Delay2A:
	MOV	R2,#3					; sets one delay counter
Delay2B:
	DJNZ	R0,Delay2B
	DJNZ	R2,Delay2B
	RET	
;
; # DISPLAY RELATED -- prints 8 character strings
;
PrintHalfStr:
	MOV	R0,#0				; sets display position?($8000~$80xx) ?
	MOVX	@R0,A			; accumulator should always be at intended cursor origin posisition here -- usually start of line or halfway through a line
HalfStrLp:
	INC	R0					; moves to next display position?
	CLR	A					; clears accumulator to reset offset
	MOVC	A,@A+DPTR		; gets data from table (*always* has to be a string/character table at this point!)
	MOVX	@R0,A			; write one character to the LCD display
	INC	DPTR				; moves to next character in string/character table -- table index must be advanced because the offset always returns to zero
	CJNE	R0,#8,HalfStrLp	; keep printing characters until all 8 are finished
	RET	
;
; Setup IC6 for access to its internal registers
;
SelectBank_80:
	MOV	LAST_BANK,#80H
	MOV	P2,#80H			; sets display address? ($80xx)
	RET	
;
; # DISPLAY RELATED -- WRITE STRING -- print full 16 character strings
;
PrintFullStr:
	MOV	A,#80H				; force cursor to beginning to 1st line
	ACALL	PrintHalfStr	; writes first 8 characters of a full 16-character string
	ACALL	Delay2A			; display timing sub-routine?
	ScrPos	A, 8		; move cursor to second half of line
	ACALL	PrintHalfStr	; writes second 8 characters of a full 16-character string
	ACALL	Delay2A			; display timing sub-routine?
	RET	
;
;
;
X108C:
	ACALL	SelectBank_80
	MOV	DPTR,#XA000
	MOV	A,#0FBH
	MOVX	@DPTR,A
	MUL	AB
	MOVX	A,@DPTR
	CPL	A
	MOV	R2,A
	MOV	A,79H
	XRL	A,R2
	JZ	X110A
	MOV	79H,R2
	ANL	A,R2
	JZ	X110A
	JB	24H.2,X110A
	MOV	R3,#7
X10A7:	JB	ACC.7,X10AD
	RL	A
	DJNZ	R3,X10A7
X10AD:	JNB	27H.1,X10B5
	JNB	28H.4,X10E0
	AJMP	X110A
;
X10B5:
	MOV	A,27H
	ANL	A,#0FEH
	JZ	X10E0
	JNB	27H.7,X110A
	MOV	A,#2
	JB	23H.3,X10C5
	MOV	A,#0AH
X10C5:	ADD	A,R3
	MOVC	A,@A+PC
	SJMP	X10D9
;
; # data table here -- some type of scaling values? bar graphs?
;
	DB	00H,06H,0BH,0EH,15H,18H,1AH,1CH
	DB	00H,01H,02H,04H,06H,08H,0FH,10H
;
;	# unknown routine
;
X10D9:
	SETB	ACC.7
	CLR	27H.6
	MOV	78H,A
	RET
;
; # VERY LIKELY DISPLAY RELATED
;
X10E0:
	JB	27H.0,MorePrint
	MOV	A,R3
	MOV	7DH,A
	SETB	27H.0
	ADD	A,#31H
	MOV	R2,A
	JNB	27H.1,X1101
	MOV	A,7EH
	SWAP	A
	RL	A
	ANL	A,#0F8H
	ORL	A,R3
	RR	A
	SWAP	A
	MOV	7EH,A
	ScrPos	A, 9					; move position to column 9
	LCALL	DispFillx8
	SETB	28H.5
	RET	
;
; # VERY LIKELY DISPLAY RELATED!
;
X1101:
	MOV	A,#83H						; display positioning?
	LCALL	DispFillx8
	MOV	A, #ScrCurs				; set cursor mode
	ACALL	DisplayCmnd
X110A:	AJMP	X113A
;
; # VERY LIKELY DISPLAY RELATED!
;
MorePrint:
	ACALL	CursorOff
	MOV	A,R3
	ADD	A,#31H
	MOV	R2,A
	ScrPos	A, 10				; move position to column 10 (0-indexed)
	JB	27H.1,X1119
	MOV	A,#84H						; display positioning?
X1119:	LCALL	DispFillx8
	CLR	27H.0
	MOV	A,7DH
	SWAP	A
	RR	A
	ORL	A,R3
	MOV	R3,A
	JNB	27H.1,X112C
	MOV	7EH,A
	SETB	28H.4
	RET	
;
;
;
X112C:
	MOV	R1,#61H
	JNB	23H.3,X1133
	MOV	R1,#62H
X1133:
	MOV	A,@R1
	ANL	A,#0C0H
	ORL	A,R3
	MOV	@R1,A
	AJMP	X13D4
;
X113A:
	MOV	DPTR,#XA000
	MOV	A,#0FEH
	MOVX	@DPTR,A
	MUL	AB
	MOVX	A,@DPTR
	CPL	A
	MOV	R2,A
	XRL	A,29H
	JNZ	X114A
	AJMP	X123F
;
X114A:
	MOV	29H,R2
	MOV	R3,A
	JNB	ACC.2,X1199
	JNB	29H.2,X1187
	JB	20H.0,X1186
	JB	27H.1,X1186
	MOV	A,27H
	ANL	A,#38H
	JZ	X1165
	ACALL	X14DF
	CLR	27H.6
	SJMP	X1170
;
X1165:
	JNB	27H.6,X116D
	CLR	27H.6
	JB	23H.3,X117A
X116D:	JNB	27H.7,X1178
X1170:	SETB	25H.1
	JNB	2AH.2,X117F
	SETB	25H.3
	RET	
;
X1178:	ACALL	X14F8
X117A:	ORL	78H,#80H
	SETB	27H.7
X117F:	CLR	25H.0
	SETB	25H.2
	MOV	7CH,#64H
X1186:	RET	
;
X1187:	JB	27H.6,X1186
	JB	2AH.2,X1191
	ANL	25H,#0F1H
	RET	
;
X1191:	CLR	25H.3
	SETB	25H.0
	MOV	7CH,#64H
	RET	
;
X1199:	JNB	ACC.3,X11F3
	JNB	29H.3,X11D8
	JB	27H.1,X11D7
	MOV	A,27H
	ANL	A,#0F8H
	JNZ	X11B3
	MOV	A,2CH
	JNZ	X11D7
	SETB	20H.0
	MOV	R5,#40H
	LJMP	X03E6
;
X11B3:	JB	27H.6,X11C0
	JB	27H.7,X11C8
	ANL	25H,#0F0H
	SETB	25H.1
	SJMP	X11CE
;
X11C0:	SETB	25H.1
	JNB	2AH.3,X11D0
	SETB	25H.3
	RET	
;
X11C8:	ORL	78H,#80H
	ANL	25H,#0F0H
X11CE:	SETB	27H.6
X11D0:	CLR	25H.0
	SETB	25H.2
	MOV	7CH,#5AH
X11D7:	RET	
;
X11D8:	MOV	A,27H
	ANL	A,#0F8H
	JNZ	X11E1
	LJMP	X03E2
;
X11E1:	JNB	27H.6,X11D7
	JB	2AH.3,X11EB
	ANL	25H,#0F1H
	RET	
;
X11EB:	CLR	25H.3
	SETB	25H.0
	MOV	7CH,#5AH
	RET	
;
X11F3:	MOV	A,R3
	ANL	A,R2
	JZ	X123F
	JB	20H.0,X120D
	JNB	ACC.0,X1202
	ACALL	X14F8
	SETB	27H.3
	RET	
;
X1202:	JNB	ACC.1,X120D
	ACALL	X14F8
	SETB	27H.4
	ORL	71H,#80H
	RET	
;
X120D:	JNB	ACC.4,X122A
	JNB	27H.1,X122B
	JB	28H.4,X122B
	JB	23H.3,X122A
	JB	28H.5,X122B
	CPL	28H.3
	MOV	R2,#41H
	JNB	28H.3,X1225
	MOV	R2,#42H
X1225:
	ScrPos	A, 8				; force cursor to column 8
	LCALL	DispFillx8
X122A:	RET	
;
X122B:	MOV	A,27H
	JNZ	X1239
	JB	23H.3,X1239
	JB	24H.2,X1239
	MOV	R0,#61H
	AJMP	X13D0
;
X1239:	ACALL	X14FB
	CLR	23H.3
	AJMP	X151A
;
X123F:	MOV	DPTR,#XA000
X1242:	MOV	A,#0FDH
	MOVX	@DPTR,A
	MUL	AB
	MOVX	A,@DPTR
	CPL	A
	MOV	R2,A
	XRL	A,2AH
	JNZ	X124F
	AJMP	X140B
;
X124F:	MOV	2AH,R2
	MOV	R3,A
	JNB	ACC.2,X129E
	JNB	2AH.2,X128C
	JB	20H.0,X128B
	JB	27H.1,X128B
	MOV	A,27H
	ANL	A,#38H
	JZ	X126A
	ACALL	X14DF
	CLR	27H.6
	SJMP	X1275
;
X126A:	JNB	27H.6,X1272
	CLR	27H.6
	JB	23H.3,X127F
X1272:	JNB	27H.7,X127D
X1275:	SETB	25H.1
	JNB	29H.2,X1284
	SETB	25H.3
	RET	
;
X127D:	ACALL	X14F8
X127F:	ORL	78H,#80H
	SETB	27H.7
X1284:	SETB	25H.0
	SETB	25H.2
	MOV	7CH,#64H
X128B:	RET	
;
X128C:	JB	27H.6,X128B
	JB	29H.2,X1296
	ANL	25H,#0F1H
	RET	
;
X1296:	CLR	25H.3
	CLR	25H.0
	MOV	7CH,#64H
	RET	
;
X129E:	JNB	ACC.3,X12E5
	JNB	2AH.3,X12D3
	JB	27H.1,X12D2
	MOV	A,27H
	ANL	A,#0F8H
	JNZ	X12AE
	RET	
;
X12AE:	JB	27H.6,X12BB
	JB	27H.7,X12C3
	ANL	25H,#0F0H
	SETB	25H.1
	SJMP	X12C9
;
X12BB:	SETB	25H.1
	JNB	29H.3,X12CB
	SETB	25H.3
	RET	
;
X12C3:	ORL	78H,#80H
	ANL	25H,#0F0H
X12C9:	SETB	27H.6
X12CB:	SETB	25H.0
	SETB	25H.2
	MOV	7CH,#5AH
X12D2:	RET	
;
X12D3:	JNB	27H.6,X12D2
	JB	29H.3,X12DD
	ANL	25H,#0F1H
	RET	
;
X12DD:	CLR	25H.3
	CLR	25H.0
	MOV	7CH,#5AH
	RET	
;
X12E5:	MOV	A,R3
	ANL	A,R2
	JNZ	X12EB
	AJMP	X140B
;
X12EB:	JNB	20H.0,X12F0
	AJMP	X13A0
;
X12F0:	JB	ACC.1,X12F5
	AJMP	X138E
;
X12F5:	JNB	29H.0,X1303
	CLR	ES
	LCALL	X0772
	LCALL	X0639
	SETB	ES
	RET	
;
X1303:	JNB	27H.3,X135D
	JNB	28H.6,X1328
	MOV	A,7EH
	ANL	A,#0FH
	MOV	DPTR,#XFE90
	MOV	B,#6
X1313:	LCALL	CalcOffsetBySize
	LCALL	SelectBank_FE
	MOV	R0,#1AH
X131B:	MOVX	A,@R0
	MOVX	@DPTR,A
	INC	DPTR
	INC	R0
	CJNE	R0,#20H,X131B
	ACALL	SelectBank_80
	ACALL	X1507
	AJMP	X151A
;
X1328:	MOV	A,78H
	CLR	ACC.7
	CJNE	A,#5,X135D
	JNB	23H.6,X1382
	SETB	27H.2
	MOV	C,28H.1
	ORL	C,28H.2
	JC	X135C
	MOV	A,2CH
	JNZ	X135C
	SETB	28H.1
	MOV	DPTR,#XFE6D						; unknown
	MOV	A,#0FFH
	MOV	R2,#6
X1347:	MOVX	@DPTR,A
	INC	DPTR
	DJNZ	R2,X1347
	MOV	7DH,#0
	LCALL	X075C
	LCALL	SelectBank_80
	MOV	DPTR,#ChordOKStr				; 'Enter  CHORD     ok ?' string
	ACALL	PrintFullStr
	LJMP	X1DCE
;
X135C:	RET	
;
X135D:	JNB	27H.4,X1367
	MOV	A,2CH
X1362:	JNZ	X135C
	LJMP	X242C
;
X1367:	JNB	25H.7,X1371
	ACALL	X14F8
	SETB	24H.2
	LJMP	X35E0
;
X1371:	MOV	A,27H
	ANL	A,#1CH
	JNZ	X135C
	JNB	27H.1,X137C
	AJMP	X1462
;
X137C:	JB	27H.0,X135C
	JB	23H.6,X138C
X1382:	ACALL	CursorOff
	MOV	DPTR,#MemProStr		; 'Memory Protected' string
	ACALL	PrintFullStr
	SETB	24H.2
	RET	
;
X138C:	AJMP	X1428
;
X138E:	JNB	ACC.0,X13A0
	JNB	25H.7,X139B
	ACALL	X14F8
	SETB	24H.2
	LJMP	X35D1
;
X139B:	ACALL	X14F8
	SETB	27H.5
	RET	
;
X13A0:	JNB	ACC.4,X13BD
	JNB	27H.1,X13BE
	JB	28H.4,X13BE
	JNB	23H.3,X13BD
	JB	28H.5,X13BE
	CPL	28H.3
	MOV	R2,#61H
	JNB	28H.3,X13B8
	MOV	R2,#62H
X13B8:
	ScrPos	A, 8				; force cursor to column 8
	LCALL	DispFillx8
X13BD:	RET	
;
X13BE:	MOV	A,27H
	JNZ	X13C5
	JB	23H.3,X13CB
X13C5:	ACALL	X14FB
	SETB	23H.3
	AJMP	X151A
;
X13CB:	JB	24H.2,X13C5
	MOV	R0,#62H
X13D0:	MOV	A,@R0
	XRL	A,#40H
	MOV	@R0,A
X13D4:	ANL	24H,#0F0H
	JB	23H.3,X13F1
	ACALL	X14F3
	ACALL	GetPatchTableOffset
	ACALL	X153A
	LCALL	X23BA
	ACALL	X1606
	LCALL	X2400
	ACALL	X1623
	ACALL	X1631
	LCALL	X2341
	AJMP	X151A
;
X13F1:	ACALL	X1623
	ACALL	X1631
	LCALL	X2341
	MOV	DPTR,#XFE59
	LCALL	SelectBank_FE
	MOV	R0,#63H
X1400:	MOVX	A,@DPTR
	ANL	A,#3FH
	MOVX	@R0,A
	INC	DPTR
	INC	R0
	CJNE	R0,#6DH,X1400
	AJMP	X151A
;
X140B:	JB	25H.2,X140F
	RET	
;
X140F:	DEC	7CH
	MOV	A,7CH
	JZ	X1416
	RET	
;
X1416:	MOV	A,#0FH
	JB	25H.3,X141D
	MOV	A,#1CH
X141D:	JNB	27H.6,X1422
	ADD	A,#0F6H
X1422:	MOV	7CH,A
	SETB	25H.1
	RET	
;
	RET	
;
; # VERY LIKELY DISPLAY RELATED!
;
X1428:
	SETB	27H.1
	LCALL	X1599
	MOV	A,#7EH				; '->' (right arrow) character, probably
	MOVX	@R0,A
	INC	R0
	MOV	A,#20H				; blank character ?
	MOVX	@R0,A
	ACALL	Delay2A
	MOV	R0,#0
	ScrPos	A, 8				; force cursor to column 8
	MOVX	@R0,A
	INC	R0
	MOV	A,R6
	MOVX	@R0,A
	INC	R0
	MOV	A,R7
	MOVX	@R0,A
	INC	R0
	MOV	A,R3
	MOVX	@R0,A
	MOV	DPTR,#okPromptStr	; ' ok?' string
	LCALL	X1C73
	ACALL	Delay2A
	ScrPos	A, 8				; force cursor to column 8
	ACALL	DisplayCmnd
	ACALL	Delay1A
	MOV	A,#ScrCurs			; set cursor mode
	ACALL	DisplayCmnd
	MOV	A,62H
	JB	23H.3,X145F
	MOV	A,61H
	CLR	ACC.7
X145F:	MOV	7EH,A
	RET	
;
X1462:
	LCALL	SelectBank_FE
	MOV	A,7EH
	MOV	C,28H.3
	MOV	ACC.6,C
	JB	23H.3,X1495
	MOV	61H,A
	LCALL	GetPatchTableOffset
	MOV	R1,#62H
X1475:	MOV	A,@R1
	MOVX	@DPTR,A
	INC	R1
	INC	DPTR
	CJNE	R1,#6BH,X1475
	MOV	A,22H
	MOVX	@DPTR,A
	INC	DPTR
	MOV	A,24H
	MOV	C,26H.7
	MOV	ACC.7,C
	MOVX	@DPTR,A
	INC	DPTR
	MOV	R0,#63H
X148A:	MOVX	A,@R0
	ANL	A,#3FH
	MOVX	@DPTR,A
	INC	R0
	INC	DPTR
	CJNE	R0,#6DH,X148A
	AJMP	X14D9
;
X1495:	MOV	62H,A
	MOV	R0,#2FH
	MOV	R1,#40H
X149B:	MOV	A,@R0
	MOVX	@R1,A
	INC	R0
	INC	R1
	CJNE	R0,#48H,X149B
	LCALL	X1623
	MOV	R0,#44H
	MOV	R2,#3
X14A9:	MOVX	A,@R0
	MOVX	@DPTR,A
	INC	R0
	INC	DPTR
	DJNZ	R2,X14A9
	MOV	R4,#3
	MOV	R1,#40H
X14B3:	MOV	R2,#8
	MOVX	A,@R1
	MOV	R3,A
X14B7:	MOVX	A,@R0
	RL	A
	XCH	A,R3
	RLC	A
	XCH	A,R3
	RRC	A
	MOVX	@DPTR,A
	INC	R0
	INC	DPTR
	DJNZ	R2,X14B7
	INC	R1
	DJNZ	R4,X14B3
	MOVX	A,@R1
	MOV	R3,A
	MOV	R2,#4
X14C9:	MOVX	A,@R0
	RL	A
	RL	A
	XCH	A,R3
	RRC	A
	XCH	A,R3
	RRC	A
	XCH	A,R3
	RRC	A
	XCH	A,R3
	RRC	A
	MOVX	@DPTR,A
	INC	R0
	INC	DPTR
	DJNZ	R2,X14C9
X14D9:	ACALL	SelectBank_80
	ACALL	X14F8
	AJMP	X151A
;
X14DF:	JB	28H.2,X14F2
	JNB	28H.1,X14F2
	JB	28H.0,X14F2
	CLR	28H.1
	SETB	28H.2
	LCALL	X0745
	MOV	7DH,#80H
X14F2:	RET	
;
;
;
X14F3:
	ANL	21H,#3FH
	SJMP	X14FB
;
; (mostly not) display related
;
X14F8:	MOV	78H,#80H
X14FB:	JNB	28H.1,X1503
	LCALL	X0745
	ACALL	SelectBank_80
X1503:	ACALL	CursorOff
	CLR	24H.2
X1507:	MOV	27H,#0
	MOV	28H,#0
	ANL	25H,#0F1H
	CLR	24H.3
	RET	
;
; # LCD Display Cursor Off
;
CursorOff:
	MOV	A,#0CH				; send "cursor invisible" command to LCD (turns LCD display cursor off)
	ACALL	DisplayCmnd
	ACALL	Delay1A
	RET	
;
; # VERY LIKELY SOMETHING DISPLAY RELATED
;
X151A:
	ACALL	SelectBank_80
	MOV	DPTR,#XFE63
	JNB	23H.3,X1525
	MOV	DPTR,#XFE59
X1525:	ACALL	X1599
	ACALL	X15F6
	ACALL	Delay2A
	RET	
;
; Index into a 128 entry table of 21 bytes each at $f000
; appears to be the patch memories?
;
GetPatchTableOffset:
	MOV	A,61H
	CLR	ACC.7
	MOV	DPTR,#PATCHES
	MOV	B,#15H
	LCALL	CalcOffsetBySize
	RET	
;
X153A:	MOV	R0,#62H
X153C:	MOVX	A,@DPTR
	MOV	@R0,A
	INC	DPTR
	INC	R0
	CJNE	R0,#6BH,X153C
	MOVX	A,@DPTR
	MOV	C,26H.6
	MOV	ACC.7,C
	MOV	22H,A
	INC	DPTR
	MOVX	A,@DPTR
	ANL	A,#0F0H
	MOV	24H,A
	MOV	C,24H.4
	ORL	C,20H.1
	MOV	23H.4,C
	JNB	23H.7,X1570
	MOV	C,23H.2
	MOV	ACC.6,C
	MOV	C,23H.1
	MOV	ACC.5,C
	XRL	A,24H
	ANL	A,#60H
	JZ	X1570
	MOV	A,24H
	ACALL	X1583
	LCALL	X0745
	CLR	23H.5
X1570:	INC	DPTR
	LCALL	SelectBank_FE
	MOV	R0,#63H
X1576:	MOVX	A,@DPTR
	ANL	A,#3FH
	MOVX	@R0,A
	INC	DPTR
	INC	R0
	CJNE	R0,#6DH,X1576
	LCALL	SelectBank_80
	RET	
;
X1583:	MOV	C,ACC.5
	MOV	23H.1,C
	JNC	X158C
	MOV	6EH,#6
X158C:	CPL	C
	ANL	C,ACC.6
	MOV	23H.0,C
	MOV	C,ACC.6
	MOV	23H.2,C
	CPL	C
	MOV	20H.5,C
	RET	
;
; # something with Preset group patches, and probably bank/number
;
X1599:
	MOV	R0,#0
	MOV	A,#80H
	MOVX	@R0,A
	MOV	A,#54H				; 'T' character
	JB	23H.3,X15A5
	MOV	A,#50H				; otherwise set 'P' character -- Patch
X15A5:	INC	R0
	MOVX	@R0,A
	MOV	A,#2DH				; '-' character
	JB	27H.1,X15B1
	JNB	23H.2,X15B1
	MOV	A,#3AH				; ':' character?
X15B1:	JNB	26H.7,X15BB
	MOV	A,#3DH				; '=' character?
	JNB	24H.7,X15BB
	MOV	A,#2BH				; '+' character ?
X15BB:	INC	R0
	MOVX	@R0,A
	MOV	A,62H				; 'b' character ?
	JB	23H.3,X15C4
	MOV	A,61H				; 'a' character ?
X15C4:	CLR	ACC.7
	MOV	C,ACC.6
	MOV	28H.3,C
	ACALL	X1680
	MOV	R6,A
	INC	R0
	MOVX	@R0,A
	INC	R0
	MOV	A,R7
	MOVX	@R0,A
	MOV	A,R3
	INC	R0
	MOVX	@R0,A
	MOV	A,#20H			; ' ' space character ?
	JB	27H.1,X15DF
	JNB	24H.0,X15DF
	MOV	A,#2AH			; '*' character?
X15DF:	INC	R0
	MOVX	@R0,A
	INC	R0
	JNB	27H.1,X15E6
	RET	
;
; # PROBABLY DISPLAY RELATED!
;
X15E6:
	MOVX	A,@DPTR
	LCALL	GetChar
	MOVX	@R0,A
	INC	DPTR
	INC	R0
	MOVX	A,@DPTR
	LCALL	GetChar
	MOVX	@R0,A
	LCALL	Delay2A
	RET	
;
; # VERY LIKELY DISPLAY RELATED!
;
X15F6:
	MOV	R0,#0
	ScrPos	A, 8				; move cursor to columm 8
	MOVX	@R0,A
X15FB:
	INC	R0
	INC	DPTR
	MOVX	A,@DPTR
	LCALL	GetChar
	MOVX	@R0,A
	CJNE	R0,#8,X15FB			; write 8 characters to fill 2nd half of display
	RET	
;
; Copies one of 16 six-byte tables (chord preset?) from $fe90 to $fe:1a - $fe:1f
;
X1606:
	LCALL	SelectBank_FE
	MOV	A,6AH
	ANL	A,#0FH
	MOV	B,#6
	MOV	DPTR,#XFE90
	LCALL	CalcOffsetBySize
	MOV	R0,#1AH
X1618:	MOVX	A,@DPTR
	MOVX	@R0,A
	INC	DPTR
	INC	R0
	CJNE	R0,#20H,X1618
	LCALL	SelectBank_80
	RET	
;
;
;
X1623:
	MOV	A,62H
	CLR	ACC.7
	MOV	B,#1FH
	MOV	DPTR,#TONES
	LCALL	CalcOffsetBySize
	RET	
;
X1631:
	LCALL	SelectBank_FE
	MOV	R1,#40H				; '@' character? maybe not...
	MOV	R0,#44H				; 'D' character? maybe not...
	MOV	R2,#3
X163A:	MOVX	A,@DPTR
	MOVX	@R0,A
	INC	R0
	INC	DPTR
	DJNZ	R2,X163A
X1640:	MOV	R2,#8
X1642:	MOVX	A,@DPTR
	RLC	A
	XCH	A,R3
	RLC	A
	XCH	A,R3
	CLR	C
	RRC	A
	MOVX	@R0,A
	INC	R0
	INC	DPTR
	DJNZ	R2,X1642
	MOV	A,R3
	MOVX	@R1,A
	INC	R1
	CJNE	R0,#5FH,X1640
	MOV	R2,#4
X1656:	MOVX	A,@DPTR
	RLC	A
	MOV	B.0,C
	RLC	A
	XCH	A,R3
	RRC	A
	MOV	C,B.0
	RRC	A
	XCH	A,R3
	RR	A
	RR	A
	ANL	A,#3FH
	MOVX	@R0,A
	INC	R0
	INC	DPTR
	DJNZ	R2,X1656
	MOV	A,R3
	MOVX	@R1,A
	MOV	R0,#2FH					; '/' character? maybe not...
	MOV	R1,#40H					; '@' character? maybe not...
X1670:	MOVX	A,@R1
	MOV	@R0,A
	INC	R0
	INC	R1
	CJNE	R0,#48H,X1670
	LCALL	X072B
	LCALL	SelectBank_80
	RET	
;
;
;
	MOV	A,62H			; orphaned code?
;
;
;
X1680:
	MOV	R3,A
	ANL	A,#3FH
	MOV	B,#8
	DIV	AB
	ADD	A,#31H
	MOV	R7,A
	MOV	A,B
	ADD	A,#31H
	XCH	A,R3
	RL	A
	RL	A
	ANL	A,#3
	JB	23H.3,X169A
	ADD	A,#1			; gets uppercase A or B?
	SJMP	X169C
;
X169A:
	ADD	A,#3			; gets lowercase a or b instead?
X169C:
	MOVC	A,@A+PC
	RET
;
;
;
X169E:
;
; # very small character table
;
	DB	'ABab'
;
;
;
; #### this string must be pushed to display
;
NameStr:
	DB	'Name :'
;
; # related to Name
;
X16A8:
	JB	27H.5,X16AD
	AJMP	X175A
;
; # Naming user patches
;
X16AD:
	MOV	A,78H
	JNB	ACC.7,X16F3
	ANL	78H,#7FH
	MOV	DPTR,#NameStr			; 'Name :' string
	MOV	R0,#0
	MOV	A,#80H					; display positioning?
	MOVX	@R0,A
X16BD:	INC	R0
	CLR	A
	MOVC	A,@A+DPTR
	MOVX	@R0,A
	INC	DPTR
	CJNE	R0,#6,X16BD			; 'Name :' string is only 6 characters, so loop until abbreviated string is fully printed
	MOV	DPTR,#XFE58				; gets name from RAM location?
	JB	23H.3,X16CE
	MOV	DPTR,#XFE62				; gets name from RAM location?
X16CE:	INC	R0
	INC	DPTR
	MOVX	A,@DPTR
	LCALL	GetChar
	MOVX	@R0,A
	CJNE	R0,#8,X16CE
	LCALL	Delay2A
	LCALL	X15F6				; outputs patch name to display, possibly
	LCALL	Delay2A
	MOV	A,#86H					; set display to line 1, character position 7 -- as 'Name :' occupies first six characters
	LCALL	DisplayCmnd
	LCALL	Delay1A
	MOV	A,#0EH					; cursor blinking command
	LCALL	DisplayCmnd
	LCALL	Delay1A
	AJMP	X17CC
;
X16F3:
	JB	25H.1,X16F7
	RET	
;
X16F7:
	JB	27H.6,X172A
	JB	25H.0,X170F
	CJNE	A,#9,X1705			; if character position is now on "2nd" line (2nd half of 16 character display) then jump to special handling
	CLR	A						; sets position counter to zero because we;re starting at the first character of the patch name
	MOV	R2,#86H					; set display to line 1, character position 7 -- as 'Name :' occupies first six characters
	SJMP	X171F
;
; # when Name: is on last half of display
;
X1705:
	INC	A						; increases patch name position counter by one (because we're moving one space ---> here)
	MOV	R2,#14H					; shift cursor position to right
	CJNE	A,#2,X171F
	ScrPos	R2, 8					; move cursor to column 8
	SJMP	X171F
;
X170F:
	JNZ	X1717
	MOV	A,#9					; position counter goes to fixed value of 9 because display cannot go any more to the right and last patch name character?
	ScrPos	R2, 15					; move cursor to column 15
	SJMP	X171F
;
X1717:
	DEC	A						; decreases patch name position counter by one (because we're moving one space <--- here)
	MOV	R2,#10H					; shift cursor position to left
	CJNE	A,#1,X171F
	MOV	R2,#87H					; set display to line 1, character position 8 (last digit of first half)
X171F:	; fall through or jumped to by a few above
	MOV	78H,A
	MOV	A,R2					; THIS MEANS R2 SETS THE DISPLAY COMMAND HERE, SEE R2 IN ALL ROUTINES ABOVE!
	LCALL	DisplayCmnd
	LCALL	Delay1A
	AJMP	X17CC
;
; ### displays preset names which can not be changed or something?
;
X172A:
	MOV	R3,A
	MOV	DPTR,#XFE59
	JB	23H.3,X1734
	MOV	DPTR,#XFE63
X1734:	LCALL	X1CBC
	MOVX	A,@DPTR
	JB	25H.0,X173E
	INC	A
	SJMP	X173F
;
X173E:	DEC	A
X173F:	ANL	A,#3FH
	MOVX	@DPTR,A
	LCALL	GetChar				; gets character for value?
	MOV	R2,A					; store current accumulator into R2
	MOV	A,#86H					; sets a constant for the display command below ($86 is toward end of 1st half of display, as $87 is last possible character)
	CJNE	R3,#2,X174B			; carry is produced if R3 is < 2
X174B:	JC	X174F				; skips next line if there was a carry in previous CJNE
	if OLED_DISPLAY = 0
		MOV	A,#0BEH				; otherwise no carry, so produced a shift to 2nd half of display (constant offset for the display command below)
								; Note: BE + R3 (when >= 2) puts display into C0~C7 address -- needed for 8x2 addressing
	else
		MOV	A,#86H				; OLED fix -- 16x1 addressing is linear, so $86 is proper regardless of value of R2
	endif	
X174F:	ADD	A,R3				; base position of display + R3 offset = position display command
	MOV	R3,A					; sets the display command
	LCALL	DispFillx8
	MOV	A,R3					; R3 must set the display command, but what values can R3 hold here?! ** could be important for OLED fix **
	LCALL	DisplayCmnd
	AJMP	X17CC
;
X175A:
	JB	27H.4,X175E
	RET	
;
X175E:
	MOV	A,71H
	MOV	R3,A
	ANL	A,#0FH
	XCH	A,R3
	SWAP	A
	ANL	A,#0FH
	MOV	R4,A
	JBC	ACC.3,X1783
	JB	25H.1,X176F
	RET	
;
X176F:	JB	27H.6,X1786
	JB	25H.0,X177C
	INC	A
	CJNE	A,#7,X1783
	CLR	A
	SJMP	X1783
;
X177C:	CLR	C
	SUBB	A,#1
	JNC	X1783
	MOV	A,#6
X1783:	MOV	R4,A
	SJMP	X179A
;
X1786:	MOV	A,R3
	JB	25H.0,X1791
	INC	A
	CJNE	A,#5,X1798
	CLR	A
	SJMP	X1798
;
X1791:	CLR	C
	SUBB	A,#1
	JNC	X1798
	MOV	A,#4
X1798:	MOV	R3,A
	MOV	A,R4
X179A:	SWAP	A
	ORL	A,R3
	MOV	71H,A
	MOV	A,R4
	MOV	DPTR,#TapeStrs		; base address to large string table with: 'Bulk Dump  Bulk*Dump  Bulk Load  Bulk*Load  '
	MOV	B,#0BH				; number of characters per string (11)
	LCALL	CalcOffsetBySize
	LCALL	HalfPrinter
	ACALL	Delay2A
	MOV	R0,#0
	ScrPos	A, 8			; move cursor to column 8
	MOVX	@R0,A
X17B2:	INC	R0
	CLR	A
	MOVC	A,@A+DPTR		; gets a specific string from the string table above
	MOVX	@R0,A
	INC	DPTR
	CJNE	R0,#3,X17B2
	MOV	DPTR,#PTCMStrs			; '[T-a][T-b][P-A][P-B][CM ]' string
	MOV	A,R3
	MOV	B,#5				; number of characters per string (5)
	LCALL	CalcOffsetBySize
X17C4:	INC	R0
	CLR	A
	MOVC	A,@A+DPTR
	MOVX	@R0,A
	INC	DPTR
	CJNE	R0,#8,X17C4
X17CC:	CLR	25H.1
	RET	
;
	DB	00H
;
	REPT 16
	DB	0FFH		; spacer bytes to keep alignment to $1800
	ENDM
;	
	REPT 16
	DB	00H		; spacer bytes to keep alignment to $1800
	ENDM
;	
	REPT 16
	DB	0FFH		; spacer bytes to keep alignment to $1800
	ENDM
;
; Alignment to 1800H for AJMP/ACALL (49 bytes padding)
;
	ORG	1800H
X1800:
	LCALL	SelectBank_80
	MOV	A,27H
	ANL	A,#0F8H
	JNZ	X1814
	JNB	24H.1,X1827
	CLR	24H.1
	JB	24H.2,X1827
	LJMP	X151A
;
X1814:	CLR	24H.1
	ANL	A,#38H
	JZ	X181C
	AJMP	X1CE4
;
X181C:	JB	27H.6,X185C
	MOV	A,78H
	JBC	ACC.7,X1840
	JB	25H.1,X1828
X1827:	RET	
;
X1828:	MOV	R2,#24H
	JB	23H.3,X182F
	MOV	R2,#12H
X182F:	JB	25H.0,X1839
	INC	A
	CJNE	A,RB0R2,X1840
	CLR	A
	SJMP	X1840
;
X1839:	CLR	C
	SUBB	A,#1
	JNC	X1840
	MOV	A,R2
	DEC	A
X1840:	MOV	78H,A
	CLR	F0
	JB	23H.3,X1849
	AJMP	X1B80
;
;
;
X1849:
	MOV	B,#8					; number of characters per string, probably
	MOV	DPTR,#ParamStrs			; base address of a large string table
	ACALL	CalcOffsetBySize
	ACALL	HalfPrinter
	LCALL	Delay2A
	ScrPos	R4, 8				; move cursor to column 8
	MOV	R3,#3DH				; '=' character, maybe?
	AJMP	X191B
;
;
;
X185C:	MOV	A,78H
	JB	23H.3,X1863
	AJMP	X1A46
;
X1863:	JBC	ACC.7,X1888
	JB	25H.1,X186A
	RET	
;
X186A:	RL	A
	MOV	R2,A
	MOV	DPTR,#X2AB5				; table provides offsets for jump below, very likely
	MOVC	A,@A+DPTR
	XCH	A,R2
	INC	A
	MOVC	A,@A+DPTR
	XCH	A,R2
	JBC	ACC.7,X1882
	MOV	R1,A
	MOV	C,25H.0
	MOV	F0,C
	MOV	A,@R1
	XCH	A,R2
	MOV	DPTR,#X188C				; base address of routines below -- other routines jumped to via offsets provided by table at X2AB5
	JMP	@A+DPTR
;
X1882:	MOV	R1,A
	MOV	A,@R1
	ACALL	X1C7C
	AJMP	X1916
;
X1888:	MOV	78H,A
	AJMP	X1917
;
X188C:
	MOV	A,R2
	SWAP	A
	ACALL	X1A00
	SWAP	A
	XCH	A,R2
	ANL	A,#0FH
	ORL	A,R2
	AJMP	X1916
;
	MOV	A,R2
	ACALL	X1A00
	XCH	A,R2
	ANL	A,#0F0H
	ORL	A,R2
	AJMP	X1916
;
	MOV	A,R2
	ACALL	X1A16
	XCH	A,R2
	ANL	A,#0FCH
	ORL	A,R2
	AJMP	X1916
;
	MOV	A,R2
	RR	A
	RR	A
	ACALL	X1A16
	RL	A
	RL	A
	XCH	A,R2
	ANL	A,#0F3H
	ORL	A,R2
	AJMP	X1916
;
	CLR	A
	XRL	A,78H
	JNZ	X18BD
	CPL	F0
X18BD:	MOV	A,R2
	SWAP	A
	ACALL	X1A16
	SWAP	A
	XCH	A,R2
	ANL	A,#0CFH
	ORL	A,R2
	AJMP	X1916
;
	MOV	A,R2
	RL	A
	RL	A
	ACALL	X1A16
	RR	A
	RR	A
	XCH	A,R2
	ANL	A,#3FH
	ORL	A,R2
	AJMP	X1916
;
	MOV	A,R2
	ACALL	X1A2C
	XCH	A,R2
	ANL	A,#0E3H
	ORL	A,R2
	AJMP	X1916
;
	MOV	A,R2
	RR	A
	RR	A
	RR	A
	ACALL	X1A2C
	RL	A
	RL	A
	RL	A
	XCH	A,R2
	ANL	A,#1FH
	ORL	A,R2
	AJMP	X1916
;
	MOV	A,R2
	ANL	A,#0FH
	JB	25H.0,X18FD
	INC	A
	CJNE	A,#0DH,X18F7
X18F7:	JC	X1903
	MOV	A,#0CH
	SJMP	X1903
;
X18FD:	CLR	C
	SUBB	A,#1
	JNC	X1903
	CLR	A
X1903:	JB	23H.2,X1908
	MOV	6DH,A
X1908:	XCH	A,R2
	ANL	A,#0F0H
	ORL	A,R2
	SJMP	X1916
;
	MOV	A,R2
	RL	A
	RL	A
	MOV	C,25H.0
	CPL	C
	RRC	A
	RR	A
X1916:	MOV	@R1,A
X1917:
	MOV	R3,#7EH				; '->' (right arrow) character, maybe?
	ScrPos	R4, 12				; move cursor to column 12
X191B:	MOV	A,78H
	RL	A
	MOV	R2,A
	MOV	DPTR,#X2A6D			; table which probably provides offsets for a jump to specific routines
	MOVC	A,@A+DPTR
	XCH	A,R2
	INC	A
	MOVC	A,@A+DPTR
	XCH	A,R2
	JBC	ACC.7,X1930
	MOV	R1,A
	MOV	DPTR,#X1936			; base address of routines to jump to using offsets provided from table above
	MOV	A,R2
	JMP	@A+DPTR
;
X1930:
	MOV	R1,A
	MOV	A,@R1
X1932:	ACALL	X1C56
	AJMP	X19E2
;
X1936:	MOV	A,@R1
	ANL	A,#0F0H
	SWAP	A
	AJMP	X1932
;
;
;
	MOV	A,@R1
	ANL	A,#0FH
	AJMP	X1932
;
;
;
	MOV	A,@R1
X1942:	ANL	A,#3
	AJMP	X1932
;
;
;
	MOV	A,@R1
	RR	A
	RR	A
	AJMP	X1942
;
;
;
	MOV	A,@R1
	RR	A
	RR	A
	SWAP	A
	AJMP	X1942
;
;
;
	MOV	A,@R1
	RR	A
X1953:	RR	A
	ANL	A,#7
	AJMP	X1932
;
;
;
	MOV	A,@R1
	SWAP	A
	AJMP	X1953
;
;
;
	MOV	A,@R1
	JB	ACC.6,X1968
	MOV	R5,#4FH				; 'O' character
	MOV	R6,#46H				; 'F' character
	MOV	R7,#46H				; 'F' character
	AJMP	X19E2
;
;
;
X1968:
	MOV	R5,#20H				; ' ' space character
	MOV	R6,#4FH				; 'O' character
	MOV	R7,#4EH				; 'N' character
	AJMP	X19E2
;
;
;
	MOV	B,@R1
	MOV	A,#4
	JB	B.5,X197C
	JNB	B.4,X1982
	SJMP	X1981
;
;
;
X197C:
	JNB	B.4,X1980
	RL	A
X1980:	RL	A
X1981:	RL	A
X1982:	MOV	B,#0AH
	DIV	AB
	JNZ	X198A
	MOV	A,#0AH
X198A:	LCALL	X31AC	; gets numeric character for value?
	MOV	R5,A
	MOV	A,B
	ADD	A,#30H			; adding $30 creates equivalent ASCII character for a number
	MOV	R6,A
	MOV	R7,#27H			; apostrophe character -- part of the DCO RNG = display?
	AJMP	X19E2		; jumps to a shared display routine
;
;
;
	MOV	A,@R1
	MOV	R5,#20H				; ' ' space character?
	JNB	ACC.3,X199F
	MOV	R5,#44H				; 'D' character?
X199F:	MOV	R6,#4
	MOV	R7,#5
	JNB	ACC.2,X19B5
	JB	ACC.3,X19AF
	MOV	R6,#6
	MOV	R7,#7
	SJMP	X19B5
;
;
;
X19AF:
	MOV	R5,#64H				; 'd' character?
	MOV	R6,#79H				; 'y' character?
	MOV	R7,#6EH				; 'n' character?
X19B5:	AJMP	X19E2
;
; # how is this reached? offset table?
;
	MOV	A,@R1
	RR	A
	RR	A
	MOV	R5,#20H				; ' ' space character?
	JNB	ACC.3,X19C1
	MOV	R5,#44H				; 'D' character?
X19C1:	MOV	R6,#4
	MOV	R7,#5
	JNB	ACC.2,X19CC
	INC	R6
	INC	R6
	INC	R7
	INC	R7
X19CC:	AJMP	X19E2
;
; # how is this reached? offset table?
;
	MOV	R5,#20H				; ' ' space character?
	JNB	2FH.1,X19D5
	MOV	R5,#44H				; 'D' character?
X19D5:	JB	2FH.0,X19DE
	MOV	R6,#4
	MOV	R7,#5
	AJMP	X19E2
;
X19DE:
	MOV	R6,#47H				; 'G' character?
	MOV	R7,#54H				; 'T' character?
X19E2:	; fall-through or jumped to as a shared routine -- something with printing small amounts of characters (ON, OFF, NO, and a couple numbers?)
	MOV	R0,#0
	MOV	A,R4
	MOVX	@R0,A			; push to display?
	INC	R0
	MOV	A,R3
	MOVX	@R0,A			; push to display?
	INC	R0
	MOV	A,R5
	MOVX	@R0,A			; push to display?
	INC	R0
	MOV	A,R6
	MOVX	@R0,A			; push to display?
	MOV	A,R7
	INC	R0
	MOVX	@R0,A			; push to display?
	MOV	R2,#4
	MOV	A,#20H				; possibly a ' ' space character
X19F6:	INC	R0
	MOVX	@R0,A			; push to display?
	DJNZ	R2,X19F6		; pads display with spaces, if necessary
	LCALL	Delay2A			; calls timing delay for display
X19FD:	CLR	25H.1
	RET	
;
X1A00:	ANL	A,#0FH
	JB	25H.0,X1A0F
	INC	A
	CJNE	A,#10H,X1A09
X1A09:	JC	X1A15
	MOV	A,#0FH
	SJMP	X1A15
;
X1A0F:	CLR	C
	SUBB	A,#1
	JNC	X1A15
	CLR	A
X1A15:	RET	
;
X1A16:	ANL	A,#3
	JB	F0,X1A25
	INC	A
	CJNE	A,#4,X1A1F
X1A1F:	JC	X1A2B
	MOV	A,#3
	SJMP	X1A2B
;
X1A25:	CLR	C
	SUBB	A,#1
	JNC	X1A2B
	CLR	A
X1A2B:	RET	
;
X1A2C:	RR	A
	RR	A
	ANL	A,#7
	JB	25H.0,X1A3D
	INC	A
	CJNE	A,#6,X1A37
X1A37:	JC	X1A43
	MOV	A,#5
	SJMP	X1A43
;
X1A3D:	CLR	C
	SUBB	A,#1
	JNC	X1A43
	CLR	A
X1A43:	RL	A
	RL	A
	RET	
;
X1A46:
	JNB	ACC.7,X1A4F
	CLR	ACC.7
	MOV	78H,A
	SJMP	X1A53
;
X1A4F:
	JB	25H.1,X1A53
	RET	
;
X1A53:
	MOV	R4,A
	MOV	R3,A
	ACALL	X1C90
	RL	A
	MOV	R2,A
	MOV	DPTR,#X2AFD				; some table
	MOVC	A,@A+DPTR
	XCH	A,R2
	INC	A
	MOVC	A,@A+DPTR
	XCH	A,R2
	CJNE	R4,#11H,X1A66
	AJMP	X1B3C
;
X1A66:
	MOV	R1,A
	MOV	A,R2
	MOV	DPTR,#X1A6C				; base address of routines
	JMP	@A+DPTR
;
;
;
X1A6C:
	MOV	A,@R1
	JB	25H.0,X1A7A
	INC	A
	CJNE	A,#70H,X1A74
X1A74:	JC	X1A82
	MOV	A,#70H
	SJMP	X1A82
;
X1A7A:	DEC	A
	CJNE	A,#10H,X1A7E
X1A7E:	JNC	X1A82
	MOV	A,#10H
X1A82:	AJMP	X1B7F
;
	MOV	A,@R1
	JB	25H.0,X1A92
	INC	A
	CJNE	A,#71H,X1A8C
X1A8C:	JC	X1A9A
	MOV	A,#71H
	SJMP	X1A9A
;
X1A92:	DEC	A
	CJNE	A,#11H,X1A96
X1A96:	JNC	X1A9A
	MOV	A,#11H
X1A9A:	AJMP	X1B7F
;
	MOV	A,@R1
	JNB	26H.7,X1AAB
	JNB	29H.4,X1AAB
	MOV	A,70H
	ACALL	X1C7C
	MOV	70H,A
	AJMP	X1B80
;
X1AAB:	ACALL	X1C7C
	AJMP	X1B7F
;
	CPL	24H.4
	MOV	C,24H.4
	MOV	23H.4,C
	JC	X1AB9
	CLR	20H.1
X1AB9:	AJMP	X1B80
;
	MOV	A,@R1
	ADD	A,#0CH
	JB	25H.0,X1ACB
	INC	A
	CJNE	A,#19H,X1AC5
X1AC5:	JC	X1AD1
	MOV	A,#18H
	SJMP	X1AD1
;
X1ACB:	CLR	C
	SUBB	A,#1
	JNC	X1AD1
	CLR	A
X1AD1:	ADD	A,#0F4H
	AJMP	X1B7F
;
	MOV	A,@R1
	ADD	A,#3FH
	JB	25H.0,X1AE5
	INC	A
	CJNE	A,#7FH,X1ADF
X1ADF:	JC	X1AEB
	MOV	A,#7EH
	SJMP	X1AEB
;
X1AE5:	CLR	C
	SUBB	A,#1
	JNC	X1AEB
	CLR	A
X1AEB:	ADD	A,#0C1H
	AJMP	X1B7F
;
	MOV	A,@R1
	XCH	A,R3
	ACALL	X1CA4
	XCH	A,R3
	XRL	A,R3
	AJMP	X1B7F
;
	MOV	A,@R1
	MOV	R2,A
	ANL	A,#0F0H
	XCH	A,R2
	ANL	A,#0FH
	JB	25H.0,X1B0B
	INC	A
	CJNE	A,#10H,X1B05
X1B05:	JC	X1B11
	MOV	A,#0FH
	SJMP	X1B11
;
X1B0B:	CLR	C
	SUBB	A,#1
	JNC	X1B11
	CLR	A
X1B11:	ORL	A,R2
	MOV	@R1,A
	LCALL	X1606
	SJMP	X1B80
;
	MOV	A,@R1
	MOV	R2,A
	ANL	A,#0FH
	XCH	A,R2
	ANL	A,#0F0H
	SWAP	A
	JB	25H.0,X1B2B
	INC	A
	CJNE	A,#0DH,X1B31
	MOV	A,#0CH
	SJMP	X1B31
;
X1B2B:	CLR	C
	SUBB	A,#1
	JNC	X1B31
	CLR	A
X1B31:	MOV	R3,A
	SWAP	A
	ORL	A,R2
	JNB	23H.2,X1B3A
	MOV	6DH,RB0R3
X1B3A:	SJMP	X1B7F
;
X1B3C:	JB	24H.6,X1B4D
	SETB	24H.6
	CLR	24H.5
	SETB	23H.0
	SETB	23H.2
	CLR	23H.1
	CLR	20H.5
	SJMP	X1B6B
;
X1B4D:	JB	24H.5,X1B5F
	SETB	24H.5
	CLR	23H.0
	SETB	23H.2
	SETB	23H.1
	CLR	20H.5
	MOV	6EH,#6
	SJMP	X1B6B
;
X1B5F:	CLR	23H.0
	CLR	24H.6
	CLR	23H.2
	CLR	24H.5
	CLR	23H.1
	SETB	20H.5
X1B6B:	LCALL	X072B
	CLR	ES
	CLR	A
	MOV	RB3R6,A
	MOV	RB3R7,A
	LCALL	X0745
	LCALL	SelectBank_80
	SETB	ES
	SJMP	X1B80
;
X1B7F:	MOV	@R1,A
X1B80:	MOV	A,78H
	MOV	R3,A
	MOV	B,#10H				; number of characters per string, probably (16)
	MOV	DPTR,#PrefStrs			; base address of a large string table
	ACALL	CalcOffsetBySize
	JNB	26H.7,X1B94
	JNB	29H.4,X1B94
	MOV	DPTR,#MIDIvelChgStr			; 'MIDI velchg =   ' string
X1B94:	ACALL	HalfPrinter
	LCALL	Delay2A
	MOV	R0,#0
	ScrPos	A, 8				; move cursor to column 8
	MOVX	@R0,A
X1B9E:	INC	R0
	CLR	A
	MOVC	A,@A+DPTR
	MOVX	@R0,A
	INC	DPTR
	CJNE	R3,#11H,X1BAB
	CJNE	R0,#4,X1B9E
	AJMP	X1C3B
;
X1BAB:
	CJNE	R0,#5,X1B9E
	INC	R0
	ACALL	X1C90
	RL	A
	MOV	R2,A
	MOV	DPTR,#X2B13
	MOVC	A,@A+DPTR
	MOV	R1,A
	MOV	A,R2
	INC	A
	MOVC	A,@A+DPTR
	MOV	DPTR,#X1BBF			; base address for next jump (which uses offset)
	JMP	@A+DPTR
;
;
;
X1BBF:
	MOV	A,@R1
	JNB	26H.7,X1BC8
	JNB	29H.4,X1BC8
	MOV	A,70H
X1BC8:	ACALL	X1C56
	AJMP	X1C31
;
	MOV	A,@R1
	MOV	R5,#2BH
	MOV	R6,#20H
	JNB	ACC.7,X1BD8
	CPL	A
	INC	A
	MOV	R5,#2DH
X1BD8:	CJNE	A,#0,X1BDD
	MOV	R5,#20H
X1BDD:	MOV	B,#0AH
	DIV	AB
	JZ	X1BE6
	ADD	A,#30H
	MOV	R6,A
X1BE6:	MOV	A,B
	ADD	A,#30H
	MOV	R7,A
	AJMP	X1C31
;
	CLR	A
	JB	24H.4,X1BF2
	CPL	A
X1BF2:	SJMP	X1BF9
;
; # how is this reached? offset table?
;
X1BF4:
	MOV	A,@R1
	XCH	A,R3
	ACALL	X1CA4
	ANL	A,R3
X1BF9:	MOV	R7,#20H		; ' ' space character?
	MOV	R6,#4EH			; 'N' character?
	JZ	X1C03
	MOV	R7,#46H			; 'F' character?
	MOV	R6,#46H			; 'F' character?
X1C03:	MOV	R5,#4FH		; 'O' character?
	AJMP	X1C31
;
	MOV	A,@R1
	SWAP	A
	ANL	A,#0FH
	SJMP	X1BC8
;
	MOV	A,@R1
	ANL	A,#0FH
	INC	A
	AJMP	X1BC8
;
	MOV	A,@R1
	DEC	A
	SJMP	X1C18
;
	MOV	A,@R1
X1C18:	MOV	B,#0CH
	ADD	A,#0FCH
	DIV	AB
	DEC	A
	ADD	A,#30H
	MOV	R7,A
	MOV	DPTR,#NoteStrs		; music notes strings
	MOV	A,B
	RL	A
	ACALL	X1CBC
	CLR	A
	MOVC	A,@A+DPTR		; gets character from notes table
	MOV	R5,A
	INC	DPTR
	CLR	A
	MOVC	A,@A+DPTR		; gets character from notes table
	MOV	R6,A
X1C31:	MOV	A,R5
	MOVX	@R0,A			; outputs to display
	INC	R0
	MOV	A,R6
	MOVX	@R0,A			; outputs to display
	INC	R0
	MOV	A,R7
	MOVX	@R0,A			; outputs to display
	AJMP	X19FD
;
;
;
X1C3B:
	INC	R0
	CLR	A
	JNB	24H.6,X1C47
	JNB	24H.5,X1C45
	ADD	A,#4
X1C45:	ADD	A,#4
X1C47:	MOV	DPTR,#PolyMonoStr		; really 3 sub-strings of 'poly', 'mono', and 'c.m.'
	ACALL	X1CBC
X1C4C:	CLR	A
	MOVC	A,@A+DPTR
	MOVX	@R0,A
	INC	R0
	INC	DPTR
	CJNE	R0,#9,X1C4C				; loops to print 9 or 10 character strings?
	AJMP	X19FD
;
X1C56:
	MOV	R5,#20H
	CJNE	A,#64H,X1C5B
X1C5B:	JC	X1C61
	ADD	A,#9CH
	MOV	R5,#31H
X1C61:	MOV	B,#0AH
	DIV	AB
	ADD	A,#30H
	MOV	R6,A
	MOV	A,B
	ADD	A,#30H
	MOV	R7,A
	RET	
;
; # SOMETHING WITH DISPLAY, ALMOST DEFINITELY! -- PRINT STRING
;
HalfPrinter:
	MOV	A,#80H
	MOV	R0,#0
	MOVX	@R0,A
X1C73:	INC	R0
	CLR	A
	MOVC	A,@A+DPTR
	MOVX	@R0,A
	INC	DPTR
	CJNE	R0,#8,X1C73
	RET	
;
;
;
X1C7C:	JB	25H.0,X1C89
	INC	A
	CJNE	A,#80H,X1C83
X1C83:	JC	X1C8F
	MOV	A,#7FH
	SJMP	X1C8F
;
X1C89:	CLR	C
	SUBB	A,#1
	JNC	X1C8F
	CLR	A
X1C8F:	RET	
;
X1C90:	MOV	A,R3
	CJNE	A,#8,X1C94
X1C94:	JC	X1C9D
	CJNE	A,#0FH,X1C99
X1C99:	JC	X1C9E
	ADD	A,#0FAH
X1C9D:	RET	
;
X1C9E:	ADD	A,#0F9H
	MOV	R3,#8
	XCH	A,R3
	RET	
;
;
;
X1CA4:
	ADD	A,#1
	MOVC	A,@A+PC
	RET	
;
; # mini-table?
;
	DB	80H,40H,20H,10H
	DB	08H,04H,02H,01H
;
; Calculates DPTR + (A * B)
;
CalcOffsetBySize:
	MUL	AB
	ADD	A,DPL
	MOV	DPL,A
	MOV	A,B
	ADDC	A,DPH
	MOV	DPH,A
	RET	
;
;
;
X1CBC:
	ADD	A,DPL
	MOV	DPL,A
	CLR	A
	ADDC	A,DPH
	MOV	DPH,A
	RET	
;
; # VERY VERY LIKELY DISPLAY RELATED!
;
DispFillx8:
	MOV	R0,#0
	MOVX	@R0,A
	INC	R0
	MOV	A,R2
	MOVX	@R0,A
	SETB	ACC.7
X1CCE:	INC	R0
	MOVX	@R0,A
	CJNE	R0,#8,X1CCE
	LCALL	Delay2A
	RET	
;
X1CD7:
	CLR	A
	MOV	C,20H.6
	MOV	ACC.7,C
	MOV	C,23H.7
	MOV	ACC.6,C
	MOV	DPTR,#XFEF3
	RET	
;	
X1CE4:
	JB	27H.3,X1CEA
	LJMP	X16A8
;
X1CEA:
	MOV	A,28H
	ANL	A,#6
	JZ	X1CF2
	AJMP	X1E9B
;
X1CF2:
	MOV	A,78H
	JBC	ACC.7,X1D13
	JB	25H.1,X1CFB
	RET	
;
X1CFB:
	JB	27H.6,X1D2A
	CLR	27H.2
	CLR	28H.6
X1D02:	JB	25H.0,X1D0C
	INC	A
	CJNE	A,#0AH,X1D13
	CLR	A
	SJMP	X1D13
;
X1D0C:
	CLR	C
	SUBB	A,#1
	JNC	X1D13
	MOV	A,#9
X1D13:	MOV	78H,A
	MOV	R3,A
	CLR	24H.3
	JNZ	X1D1C
	SETB	24H.3
X1D1C:
	MOV	DPTR,#SettingStrs		; base address of string table beginning with 'TUNE    =  4    '
	MOV	B,#10H				; length of strings is 16 per
	LCALL	CalcOffsetBySize
	LCALL	PrintFullStr
	AJMP	X1DB8
;
X1D2A:
	MOV	R3,A
	MOV	DPTR,#X1D33			; jump offset table (relative to 1D3DH)
	MOVC	A,@A+DPTR
	MOV	DPTR,#X1D3D
	JMP	@A+DPTR
;
; # OFFSET TABLE
;
X1D33:
	DB	(X1D55 - X1D3D)
	DB	(X1D3D - X1D3D)
	DB	(X1D83 - X1D3D)
	DB	(X1D6F - X1D3D)
	DB	(X1D99 - X1D3D)
	DB	(X1DAC - X1D3D)
	DB	(X1D77 - X1D3D)
	DB	(X1D7B - X1D3D)
	DB	(X1D7F - X1D3D)
	DB	(X1D95 - X1D3D)
;
; # ROUTINES ACCESSED BY OFFSET
;
X1D3D:
	MOV	A,6FH
	LCALL	X1A00
	MOV	6FH,A
	CLR	ES
	LCALL	X0772
	LCALL	X0639
	SETB	ES
	MOV	A,6FH
	MOV	DPTR,#XFEF0
	AJMP	X1DA9
;
X1D55:
	MOV	A,60H
	JB	25H.0,X1D62
	INC	A
	CJNE	A,#0,X1D68
	MOV	A,#0FFH
	SJMP	X1D68
;
X1D62:
	CLR	C
	SUBB	A,#1
	JNC	X1D68
	CLR	A
X1D68:	MOV	60H,A
	MOV	DPTR,#XFEF1
	AJMP	X1DA9
;
X1D6F:	CPL	26H.6
	MOV	C,26H.6
	MOV	22H.7,C
	SJMP	X1D97
;
X1D77:	CPL	25H.6
	SJMP	X1D97
;
X1D7B:	CPL	25H.4
	SJMP	X1D97
;
X1D7F:	CPL	25H.5
	SJMP	X1D97
;
X1D83:	CPL	20H.6
	MOV	C,20H.6
	MOV	20H.2,C
	CLR	ES
	LCALL	X0772
	LCALL	X0639
	SETB	ES
	SJMP	X1D9B
;
X1D95:	CPL	23H.6
X1D97:	AJMP	X1DB8
;
X1D99:	CPL	23H.7
X1D9B:	ACALL	X1CD7
	SJMP	X1DA9
;
	MOV	A,70H
	LCALL	X1C7C
	MOV	70H,A
	MOV	DPTR,#XFEF2
X1DA9:	MOVX	@DPTR,A
	AJMP	X1DB8
;
X1DAC:	JB	28H.6,X1DB1
	AJMP	X1E98
;
X1DB1:	MOV	A,7EH
	LCALL	X1A00
	MOV	7EH,A
X1DB8:	; falls through from above, or jumped to by SETTING MENU
	LCALL	SelectBank_80
	MOV	A,R3						; this must decide which sub-routine needs to be run (must be no more than a value of 10 decimal, apparently)
	MOV	DPTR,#X1DC4					; small table of offsets
	MOVC	A,@A+DPTR
	MOV	DPTR,#X1DCE					; base address for routines to jump to
	JMP	@A+DPTR						; goes to $X1DCE + $64, $16, $23, etc.
;
X1DC4:
	DB	64H,16H,23H,28H,38H,00H,2CH,30H,34H,3CH

X1DCE:
	JB	28H.6,X1DD3
	AJMP	X1E98
;
X1DD3:
	MOV	A,7EH
	INC	A
	LCALL	X1C56
	MOV	R5,#2EH
	SJMP	X1E1B
;
	MOV	A,70H
	LCALL	X1C56
	SJMP	X1E1B
;
	MOV	A,6FH
	INC	A
	LCALL	X1C56
	CJNE	R6,#30H,X1DEF
	MOV	R6,#20H
X1DEF:	SJMP	X1E1B
;
	MOV	C,20H.6
	CPL	C
	SJMP	X1E0D
;
	MOV	C,26H.6
	SJMP	X1E0C
;
	MOV	C,25H.6
	SJMP	X1E0D
;
	MOV	C,25H.4
	SJMP	X1E0D
;
	MOV	C,25H.5
	SJMP	X1E0D
;
	MOV	C,23H.7
	SJMP	X1E0D
;
;
;
X1E0A:
	MOV	C,23H.6
X1E0C:	CPL	C
X1E0D:
	MOV	R5,#20H			; ' ' character
	MOV	R6,#4FH			; 'O' character
	MOV	R7,#4EH			; 'N' character
	JC	X1E1B
;
	MOV	R5,#4FH			; 'O' character
	MOV	R6,#46H			; 'F' character
	MOV	R7,#46H			; 'F' character
X1E1B:	MOV	R0,#0
	ScrPos	A, 13			; move cursor to column 13
	MOVX	@R0,A
	INC	R0
	MOV	A,R5
	MOVX	@R0,A
	INC	R0
	MOV	A,R6
	MOVX	@R0,A
	INC	R0
	MOV	A,R7
	MOVX	@R0,A
	SETB	ACC.7
X1E2B:	INC	R0
	MOVX	@R0,A
	CJNE	R0,#8,X1E2B
	AJMP	X1E98
;
	MOV	A,60H
	JNB	ACC.7,X1E41
	ADD	A,#80H
	MOV	B,#0AH
	DIV	AB
	ADD	A,#2AH
	SJMP	X1E49
;
;
;
X1E41:
	ADD	A,#5CH
	MOV	B,#0AH
	DIV	AB
	ADD	A,#14H
X1E49:	MOV	R3,A
	MOV	R6,#20H				; ' ' space character, probably
	MOV	R7,#20H				; ' ' space character, probably
	MOV	A,B
	CLR	C
	SUBB	A,#2
	JC	X1E66
	SUBB	A,#3
	JNC	X1E5D
	MOV	R7,#3
	SJMP	X1E6A
;
X1E5D:
	INC	R3
	SUBB	A,#4
	JNC	X1E66
	MOV	R6,#2
	SJMP	X1E6A
;
; # parameters or tuning adjustment -- probably tuning
;
X1E66:
	MOV	R6,#2
	MOV	R7,#3
X1E6A:	MOV	B,#0AH
	MOV	A,R3
	DIV	AB
	ADD	A,#30H				; number to ASCII equivalent?
	MOV	R5,A
	MOV	A,B
	ADD	A,#30H				; number to ASCII equivalent?
	MOV	R4,A
	MOV	R0,#0
	ScrPos	A, 8				; move cursor to column 8
	MOVX	@R0,A
	INC	R0
	MOV	A,R6				; value of 2 is possible, but can also be space
	MOVX	@R0,A
	INC	R0
	MOV	A,#20H				; ' ' space character
	MOVX	@R0,A
	INC	R0
	MOV	A,#34H				; '4' character -- probably first digit in tuning
	MOVX	@R0,A
	INC	R0
	MOV	A,R5
	MOVX	@R0,A
	INC	R0
	MOV	A,R4
	MOVX	@R0,A
	INC	R0
	MOV	A,#20H				; ' ' space character
	MOVX	@R0,A
	INC	R0
	MOV	A,R7				; value of 3 is possible, but can also be space
	MOVX	@R0,A
	INC	R0
	SETB	ACC.7
	MOVX	@R0,A
X1E98:	CLR	25H.1
	RET	
;
;
;
X1E9B:
	JB	28H.2,X1ED4
	MOV	A,48H
	JZ	X1EA5
	SETB	28H.0
X1EA4:	RET	
;
X1EA5:
	JNB	28H.0,X1EA4
	LCALL	X075C
X1EAB:	LCALL	SelectBank_FE
	MOV	R0,#6DH
	MOV	R1,#1AH
X1EB2:	MOVX	A,@R0
	JB	ACC.7,X1EBC
	CLR	C
	SUBB	A,#40H
	CLR	ACC.7
	INC	R0
X1EBC:	MOVX	@R1,A
	INC	R1
	CJNE	R1,#20H,X1EB2
	CLR	A
	MOV	7EH,A
	MOV	28H,A
	SETB	28H.6
	CLR	25H.1
	MOV	DPTR,#ChordMemStr		; 'CHORD MEM. No.01' string
	LCALL	SelectBank_80
	LCALL	PrintFullStr
X1ED3:	RET	
;
X1ED4:	JNB	25H.1,X1ED3
	MOV	A,7DH
	JNB	ACC.7,X1F05
	CLR	ACC.7
	MOV	R3,A
	LCALL	SelectBank_FE
	MOV	R0,#6DH
	MOV	R1,#1AH
X1EE6:	MOVX	A,@R1
	JB	ACC.7,X1EFC
	MOV	C,ACC.6
	MOV	ACC.7,C
	ADD	A,#40H
	MOVX	@R0,A
	INC	R1
	INC	R0
	CJNE	R0,#73H,X1EE6
X1EF6:	LCALL	SelectBank_80
	MOV	A,R3
	SJMP	X1F17
;
X1EFC:
	MOV	A,#0FFH
X1EFE:	MOVX	@R0,A
	INC	R0
	CJNE	R0,#73H,X1EFE
	SJMP	X1EF6
;
X1F05:
	JB	27H.6,X1F24
	JB	25H.0,X1F11
	INC	A
	CJNE	A,#6,X1F17
	AJMP	X1EAB
;
X1F11:
	CLR	C
	SUBB	A,#1
	JNC	X1F17
	CLR	A
X1F17:	MOV	7DH,A
	MOV	R3,A
	MOV	DPTR,#SetNoteStr
	LCALL	HalfPrinter
	LCALL	Delay2A
	MOV	A,R3
X1F24:	MOV	DPTR,#XFE6D			; patch names in RAM?
	MOV	R3,A
	LCALL	X1CBC
	MOVX	A,@DPTR
	SETB	F0
	JB	ACC.7,X1F33
	CLR	F0
X1F33:	JNB	27H.6,X1F62
	JNB	F0,X1F3D
	MOV	A,#40H
	SJMP	X1F61
;
X1F3D:	JB	25H.0,X1F4D
	INC	A
	CJNE	A,#40H,X1F46
	SJMP	X1F5A
;
X1F46:	CJNE	A,#59H,X1F61
	MOV	A,#58H
	SJMP	X1F61
;
X1F4D:	DEC	A
	CJNE	A,#40H,X1F53
	SJMP	X1F5A
;
X1F53:	CJNE	A,#27H,X1F61
	MOV	A,#28H
	SJMP	X1F61
;
X1F5A:	CJNE	R3,#0,X1F5F
	SJMP	X1F61
;
X1F5F:	MOV	A,#0FFH
X1F61:	MOVX	@DPTR,A
X1F62:
	MOV	R4,A
	MOV	R0,#0
	ScrPos	A, 8				; move cursor to column 8
	MOVX	@R0,A
	INC	R0
	MOV	A,#20H				; ' ' space character
	MOVX	@R0,A
	INC	R0
	MOV	A,#28H				; '(' character
	MOVX	@R0,A
	INC	R0
	MOV	A,R3
	ADD	A,#31H				; '1' character
	MOVX	@R0,A
	INC	R0
	MOV	A,#29H				; ')' character
	MOVX	@R0,A
	INC	R0
	MOV	A,#3DH				; '=' character
	MOVX	@R0,A
	INC	R0
	MOV	A,R4
	JNB	ACC.7,X1F8A
	MOV	R5,#6FH				; 'o' character
	MOV	R6,#66H				; 'f' character
	MOV	R7,#66H				; 'f' character
	AJMP	X1C31
;
X1F8A:	AJMP	X1C18
;
; # Set Note Related
;
SetNoteStr:
	DB	'Set note'

;
; Alignment to 2000H for AJMP/ACALL (108 bytes padding)
;
	ORG	2000H
X2000:
	JNB	28H.7,X202D
	CJNE	R3,#4,X202D
	JNB	21H.5,X202D
	MOV	A,R4
	JNB	28H.6,X2014
	CJNE	A,#42H,X2014
	MOV	A,#2
	SJMP	X202B
;
X2014:
	ANL	A,#0FH				; reduce to 16 values
	ADD	A,#2				; add two to compensate offset
	MOVC	A,@A+PC			; get value from table below
	SJMP	X202B			; jump to routine below, using accumulator value given by LUT
;
; # lookup table
;
	DB	80H,40H,00H,20H,00H,10H,00H,00H
	DB	00H,00H,00H,00H,00H,00H,08H,04H
;
;
;
X202B:	ORL	27H,A
X202D:	JNB	21H.3,X2032
	CLR	P1.3
X2032:	AJMP	X20D3
;
X2034:	JNB	21H.6,X2039
	AJMP	X20DC
;
X2039:	CJNE	R3,#0,X2041
	CJNE	A,#41H,X207B
	AJMP	X20D9
;
X2041:	CJNE	R3,#1,X2073
	ANL	21H,#8CH
	JB	21H.3,X2056
	CJNE	A,#35H,X204F
	AJMP	X20D9
;
X204F:	CJNE	A,#36H,X207B
	SETB	21H.4
	AJMP	X20D9
;
X2056:	CJNE	A,#37H,X2063
	JB	28H.7,X20D3
	JNB	28H.6,X20D3
	SETB	21H.5
	AJMP	X20D9
;
X2063:	JNB	28H.7,X20D3
	JNB	ACC.6,X20D3
	CJNE	A,#50H,X206C
X206C:	JNC	X20D3
	MOV	R4,A
	SETB	21H.5
	AJMP	X20D9
;
X2073:	CJNE	R3,#2,X207D
	CJNE	A,6FH,X207B
	AJMP	X20D9
;
X207B:	AJMP	X20D3
;
X207D:	CJNE	R3,#3,X2091
	CJNE	A,#23H,X20D3
	JNB	21H.5,X20D9
	SETB	P1.3
	CJNE	R4,#42H,X20D9
	JNB	28H.1,X20D3
	INC	R3
	AJMP	X20CD
;
X2091:	CJNE	R3,#4,X20B0
	JB	28H.7,X20D3
	CJNE	A,#30H,X209E
	MOV	R1,#3FH
	SJMP	X20D9
;
X209E:	INC	21H
	CJNE	A,#20H,X20A7
	MOV	R1,#0FFH
	SJMP	X20D9
;
X20A7:	INC	21H
	MOV	R1,#5FH
	CJNE	A,#40H,X20D3
	SJMP	X20D9
;
X20B0:	CJNE	R3,#5,X20C2
	CJNE	A,#1,X20D3
	JB	21H.5,X20D9
	MOV	R3,RB1R1
	JNB	21H.4,X20C0
	MOV	R3,#0
X20C0:	SJMP	X20CD
;
X20C2:	CJNE	R3,#6,X20C9
	JNZ	X20D3
	AJMP	X20D9
;
X20C9:	SETB	ACC.7
	MOV	RB0R5,A
X20CD:	SETB	21H.6
X20CF:	MOV	A,R5
	POP	PSW
	RETI	
;
X20D3:	CLR	21H.7
	CLR	20H.7
	SJMP	X20CF
;
X20D9:	INC	R3
	SJMP	X20CF
;
X20DC:	JNB	21H.5,X20E5
	SETB	ACC.7
	MOV	RB0R4,A
	AJMP	X20CF
;
X20E5:	JB	21H.3,X20D3
	MOV	R4,A
	MOV	A,R3
	ORL	7BH,#6
	JNB	21H.4,X2111
	JBC	ACC.7,X20F9
	MOV	A,R4
	SETB	ACC.7
	MOV	R3,A
	AJMP	X20CF
;
X20F9:	JB	21H.1,X20D3
	JB	21H.0,X2108
	CJNE	A,#0DH,X2102
X2102:	JNC	X20D3
	SETB	ACC.6
	SJMP	X210D
;
X2108:	CJNE	A,#24H,X210B
X210B:	JNC	X20D3
X210D:	MOV	R3,A
	LJMP	X0102
;
X2111:	INC	A
	JB	21H.1,X2122
	JB	21H.0,X211D
	CJNE	A,#57H,X210D
	SJMP	X20D3
;
X211D:	CJNE	A,#2EH,X210D
	SJMP	X20D3
;
X2122:	CJNE	A,#66H,X210D
	SJMP	X20D3
;
X2127:	JB	24H.0,X212E
	SETB	24H.1
	SETB	24H.0
X212E:	CJNE	R7,#40H,X2131
X2131:	JC	X2170
	CJNE	R7,#60H,X2136
X2136:	JNC	X213A
	AJMP	X224F
;
X213A:
	MOV	DPTR,#XFE6D
	MOV	A,R7
	ADD	A,#0A0H
	LCALL	X1CBC
	MOV	A,R5
	CJNE	A,#24H,X2147
X2147:	JC	X2166
	CJNE	A,#55H,X214C
X214C:	JNC	X2166
	ADD	A,#0C4H
	CLR	ACC.7
	MOVX	@DPTR,A
	CJNE	R7,#65H,X2164
X2156:	LCALL	SelectBank_FE
	MOV	R0,#1AH
	MOV	R1,#6DH
X215D:	MOVX	A,@R1
	MOVX	@R0,A
	INC	R0
	INC	R1
	CJNE	R0,#20H,X215D
X2164:	SJMP	X21A0
;
X2166:	MOV	A,#0FFH
X2168:	MOVX	@DPTR,A
	INC	DPTR
	INC	R7
	CJNE	R7,#66H,X2168
	SJMP	X2156
;
X2170:	CJNE	R7,#24H,X2173
X2173:	JC	X21A3
	MOV	DPTR,#XFE73
	MOV	A,R7
	ADD	A,#0DCH
	LCALL	X1CBC
	MOV	A,R5
	MOVX	@DPTR,A
	CJNE	R7,#2DH,X21A0
	SETB	F0
	MOV	R0,#59H
X2187:	MOV	R1,#73H
	LCALL	SelectBank_FE
X218C:	MOVX	A,@R1
	MOVX	@R0,A
	INC	R0
	INC	R1
	CJNE	R1,#7DH,X218C
X2193:	MOV	C,F0
	MOV	23H.3,C
	LCALL	SelectBank_80
	LCALL	X14FB
	LCALL	X151A
X21A0:	LJMP	X03D4
;
;
;
X21A3:
	JNB	27H.7,X21D9
	JNB	23H.3,X21D9
	CLR	27H.6
	MOV	A,R7
	ADD	A,#2
	MOVC	A,@A+PC					; get data from table below
	SJMP	X21D5
;
; ##### DATA TABLE ####
;
X21B1:
	DB	03H,11H,16H,06H,07H,08H
	DB	00H,09H,0AH,0DH,18H,01H
	DB	02H,04H,0BH,0CH,0EH,0FH
	DB	12H,10H,13H,14H,15H,17H
	DB	1AH,1BH,1CH,1DH,1EH,1FH
	DB	20H,21H,22H,23H,19H,05H
;
;
;
X21D5:
	SETB	ACC.7
	MOV	78H,a
X21D9:
	MOV	A,R7
	RL	A
	MOV	R1,A
	MOV	DPTR,#X29A9
	MOVC	A,@A+DPTR
	XCH	A,R1
	INC	A
X21E2:	MOVC	A,@A+DPTR
	MOV	DPTR,#X21E7
	JMP	@A+DPTR

X21E7:
	MOV	A,R5
	AJMP	X224C
;
X21EA:	MOV	A,@R1
	ANL	A,#3FH
	XCH	A,R5
	RR	A
	RR	A
	ANL	A,#0C0H
	AJMP	X224B
;
X21F4:
	MOV	A,@R1
	ANL	A,#0CFH
	XCH	A,R5
	SWAP	A
	ANL	A,#30H
	AJMP	X224B
;
X21FD:	MOV	A,@R1
	ANL	A,#0F3H
	XCH	A,R5
	RL	A
	RL	A
	ANL	A,#0CH
	AJMP	X224B
;
X2207:	MOV	A,@R1
	ANL	A,#0FCH
	XCH	A,R5
	ANL	A,#3
	AJMP	X224B
;
X220F:	MOV	A,@R1
	ANL	A,#1FH
	XCH	A,R5
	SWAP	A
	RL	A
	ANL	A,#0E0H
	AJMP	X224B
;
X2219:	MOV	A,@R1
	ANL	A,#0E3H
	XCH	A,R5
	RL	A
	RL	A
	ANL	A,#1CH
	AJMP	X224B
;
X2223:	MOV	A,@R1
	ANL	A,#0BFH
	XCH	A,R5
	RR	A
	RR	A
	ANL	A,#40H
	AJMP	X224B
;
X222D:	MOV	A,@R1
	ANL	A,#0FH
	XCH	A,R5
	RL	A
	ANL	A,#0F0H
	AJMP	X224B
;
X2236:	MOV	A,@R1
	ANL	A,#0F0H
	XCH	A,R5
	SWAP	A
	RL	A
	ANL	A,#0FH
	AJMP	X224B
;
X2240:	MOV	A,@R1
	ANL	A,#0F0H
	XCH	A,R5
	ANL	A,#0FH
	JB	23H.2,X224B
	MOV	6DH,A
X224B:	ORL	A,R5
X224C:	MOV	@R1,A
X224D:	AJMP	X21A0
;
X224F:	MOV	A,R7
	ADD	A,#0C0H
	MOV	R7,A
	CJNE	R7,#0DH,X2256
X2256:	JC	X226B
	MOV	DPTR,#XFE73
	ADD	A,#0F3H
	LCALL	X1CBC
	MOV	A,R5
	MOVX	@DPTR,A
	CJNE	R7,#16H,X224D
	CLR	F0
	MOV	R0,#63H
	AJMP	X2187
;
X226B:	RL	A
	MOV	R1,A
	MOV	DPTR,#X2A39
	MOVC	A,@A+DPTR
	XCH	A,R1
	INC	A
	MOVC	A,@A+DPTR
	MOV	DPTR,#X2278
	JMP	@A+DPTR
;
X2278:
	MOV	A,R5
	MOV	62H,A
	LCALL	X1623
	LCALL	X1631
	SETB	F0
	MOV	A,27H
	JNZ	X224D
	AJMP	X2193
;
	MOV	A,R5
	AJMP	X233E
;
	MOV	A,R5
	CJNE	A,#0DH,X2290
X2290:	JC	X229F
	CJNE	A,#74H,X2295
X2295:	JNC	X229F
	AJMP	X21A0
;
	MOV	A,R5
	CJNE	A,#40H,X229F
	AJMP	X21A0
;
X229F:	MOV	C,ACC.6
	MOV	ACC.7,C
	AJMP	X233E
;
	MOV	A,R5
	MOV	C,26H.6
	MOV	ACC.7,C
	AJMP	X233E
;
	SETB	24H.4
	CJNE	R5,#0,X22B3
	CLR	24H.4
X22B3:	MOV	C,24H.4
	ORL	C,20H.1
	MOV	23H.4,C
	AJMP	X21A0
;
	MOV	A,@R1
	ANL	A,#0FH
	XCH	A,R5
	CJNE	A,#0DH,X22C2
X22C2:	JC	X22C6
	MOV	A,#0CH
X22C6:	JNB	23H.2,X22CB
	MOV	6DH,A
X22CB:	SWAP	A
	AJMP	X233D
;
	MOV	A,@R1
	ANL	A,#0F0H
	XCH	A,R5
	ANL	A,#0FH
	ORL	A,R5
	MOV	@R1,A
	LCALL	X1606
	AJMP	X21A0
;
	MOV	A,R5
	CJNE	A,#0CH,X22DF
X22DF:	JNC	X22E3
	MOV	A,#0CH
X22E3:	CJNE	A,#6DH,X22E6
X22E6:	JC	X22EA
	MOV	A,#6CH
X22EA:	ADD	A,#4
	AJMP	X233E
;
	MOV	A,R5
	CJNE	A,#0DH,X22F2
X22F2:	JNC	X22F6
	MOV	A,#0DH
X22F6:	CJNE	A,#6EH,X22F9
X22F9:	JC	X22FD
	MOV	A,#6DH
X22FD:	ADD	A,#4
	AJMP	X233E
;
	MOV	A,@R1
	ANL	A,#9FH
	XCH	A,R5
	ANL	A,#60H
	ORL	A,R5
	MOV	@R1,A
	JNB	23H.7,X233F
	MOV	C,23H.2
	MOV	ACC.6,C
	MOV	C,23H.1
	MOV	ACC.5,C
	XRL	A,@R1
	ANL	A,#60H
	JZ	X2325
	MOV	A,@R1
	LCALL	X1583
	LCALL	X0745
	CLR	23H.5
	LCALL	X072B
X2325:	MOV	A,27H
	JNZ	X233F
	JB	24H.2,X233F
	MOV	R2,#2DH
	JNB	23H.2,X2333
	MOV	R2,#3AH
X2333:	MOV	A,#81H						; display positioning?
	LCALL	SelectBank_80
	LCALL	DispFillx8
	AJMP	X21A0
;
X233D:	ORL	A,R5
X233E:	MOV	@R1,A
X233F:	AJMP	X21A0
;
X2341:	JB	22H.4,X2347
	JB	25H.5,X2348
X2347:	RET	
;
; # MIDI SYSEX RELATED
;
X2348:
	MOV	R3,#35H
	MOV	R2,#20H				; R2 sets Level #, probably
	LCALL	SysExHandTx
	MOV	R3,#0
X2351:	MOV	A,R3
	RL	A
	MOV	R1,A
	MOV	DPTR,#X29F1
	MOVC	A,@A+DPTR
	XCH	A,R1
	INC	A
	MOVC	A,@A+DPTR
	MOV	DPTR,#X235F
	JMP	@A+DPTR
;
; sub-routines accessed by offsets supplied by
; table X235F with R1 supplied by table at 29F1
;
X235F:
	MOV	A,@R1
	AJMP	X239F
;
X2362:	MOV	A,@R1
	ANL	A,#0C0H
	RL	A
	RL	A
	AJMP	X239F
;
X2369:	MOV	A,@R1
	ANL	A,#30H
	SWAP	A
	AJMP	X239F
;
X236F:	MOV	A,@R1
	ANL	A,#0CH
	RR	A
	RR	A
	AJMP	X239F
;
X2376:	MOV	A,@R1
	ANL	A,#3
	AJMP	X239F
;
X237B:	MOV	A,@R1
	ANL	A,#0E0H
	SWAP	A
	RR	A
	AJMP	X239F
;
X2382:	MOV	A,@R1
	ANL	A,#1CH
	RR	A
	RR	A
	AJMP	X239F
;
X2389:	MOV	A,@R1
	ANL	A,#40H
	RL	A
	RL	A
	AJMP	X239F
;
X2390:	MOV	A,@R1
	ANL	A,#0FH
	AJMP	X239F
;
X2395:	MOV	A,@R1
	ANL	A,#0F0H
	AJMP	X239E
;
X239A:	MOV	A,@R1
	ANL	A,#0FH
	SWAP	A
X239E:	RR	A
X239F:	LCALL	TxMIDIbyte
	INC	R3
	CJNE	R3,#24H,X2351
	MOV	R1,#59H
X23A8:	MOV	R3,#0AH
X23AA:	LCALL	SelectBank_FE
	MOVX	A,@R1
	LCALL	TxMIDIbyte
	INC	R1
	DJNZ	R3,X23AA
EndSysEx:	; fall through or jumped to by multiple routines
	MOV	A,#0F7H				; End SysEx
	LCALL	TxMIDIbyte
	RET	
;
;
;
X23BA:
	JB	22H.4,X23C0
	JB	25H.4,X23C1
X23C0:	RET	
;
X23C1:
	MOV	R3,#35H
	MOV	R2,#30H					; R2 sets Level #, probably
	LCALL	SysExHandTx
	MOV	R3,#0
X23CA:	MOV	A,R3
	RL	A
	MOV	R1,A
	MOV	DPTR,#X2A53
	MOVC	A,@A+DPTR
	XCH	A,R1
	INC	A
	MOVC	A,@A+DPTR
	MOV	DPTR,#X23D8
	JMP	@A+DPTR
;
X23D8:	MOV	A,@R1
	CLR	ACC.7
	SJMP	X23F5
;
	MOV	A,@R1
	ADD	A,#0FCH
	SJMP	X23F5
;
	CLR	A
	JNB	24H.4,X23E7
	INC	A
X23E7:	SJMP	X23F5
;
	MOV	A,@R1
	SWAP	A
	SJMP	X23EE
;
	MOV	A,@R1
X23EE:	ANL	A,#0FH
	SJMP	X23F5
;
	MOV	A,@R1
	ANL	A,#60H
X23F5:	LCALL	TxMIDIbyte
	INC	R3
	CJNE	R3,#0DH,X23CA
	MOV	R1,#63H
	AJMP	X23A8
;
X2400:	JB	22H.4,X2406
	JB	25H.6,X2407
X2406:	RET	
;
X2407:	MOV	R3,#35H
	MOV	R2,#40H				; R2 sets Level #, probably
	LCALL	SysExHandTx
	MOV	R1,#1AH
X2410:	LCALL	SelectBank_FE
	MOVX	A,@R1
	JB	ACC.7,X2428
	MOV	C,ACC.6
	MOV	ACC.7,C
	ADD	A,#3CH
	CLR	ACC.7
X241F:	LCALL	TxMIDIbyte
	INC	R1
	CJNE	R1,#20H,X2410
	AJMP	EndSysEx
;
X2428:	MOV	A,#7FH
	SJMP	X241F
;
; # probably bulk load/dump related
;
X242C:
	CLR	P1.3
	CLR	A
	MOV	R5,A
	MOV	R6,A
	MOV	R7,A
	MOV	7EH,A
	MOV	27H,A
	MOV	28H,A
	MOV	DPTR,#XA000
	MOV	A,#0FCH
	MOVX	@DPTR,A
	MOV	A,71H
	MOV	R4,A
	SWAP	A
	ANL	A,#0FH
	XCH	A,R4
	ANL	A,#0FH
	MOV	R3,A
	RR	A
	ANL	A,#3
	MOV	7DH,A
	CJNE	R4,#2,X2452
	SJMP	X245A
;
X2452:	CJNE	R4,#3,X2457
	SJMP	X245A
;
X2457:	CJNE	R4,#6,X246A
X245A:	SETB	28H.6
	JB	23H.6,X246A
	JB	25H.7,X246A
	MOV	DPTR,#MemProStr			; otherwise fetch 'Memory Protected' string
	LCALL	PrintFullStr
	AJMP	X2765
;
; # Bulk Load/Dump related
;
X246A:	CJNE	R4,#4,X246D
X246D:	JNC	X2476
	ScrPos	A, 10				; move cursor to column 10
	MOV	DPTR,#RunStr		; ' -Run-'		(6 characters long)
	SJMP	X247B
;
X2476:
	ScrPos	A, 11				; move cursor to column 11
	MOV	DPTR,#dotDotdotStr	; '.....'		(5 characters long, so needs to be shifted over one compared to -Run- string)		
X247B:	MOV	R0,#0
	MOVX	@R0,A
	LCALL	X1C73
	MOV	A,R3
	RL	A
	MOV	R3,A
	ADD	A,#0BH
	MOVC	A,@A+PC
	MOV	DPH,A
	MOV	73H,A
	MOV	A,R3
	INC	A
	ADD	A,#2
	MOVC	A,@A+PC
	SJMP	X249C
;
; ## DATA TABLE ##
;
X2492:
	DB	0E0H,00H,0E7H,0C0H,0F0H,00H,0F5H,40H,0FEH,90H
;
; ## generates a delay for tape transfers?
;
X249C:	
	MOV	DPL,A
	MOV	74H,A
	CJNE	R4,#4,X24A3
X24A3:	JC	X24B0
X24A5:	JB	20H.3,X24A5
	CLR	ES
	LCALL	Delay2A
	LJMP	X2809
;
X24B0:
	SETB	21H.3
	MOV	A,R4
	JNB	ACC.0,X24B8
	AJMP	X2653
;
X24B8:
	SETB	28H.7
	JNB	ACC.1,X24BF
	AJMP	X2500
;
X24BF:
	MOV	R3,#40H
	ACALL	SysExHandTxEnd
X24C3:	ACALL	X25ED
	MOV	A,27H
	JZ	X24C3
	ANL	A,#9CH
	JZ	X24CF
	AJMP	BulkErr
;
X24CF:	ANL	27H,#9FH
X24D2:	MOV	R3,#42H
	LCALL	SysExHandTx
	MOV	R5,#0
	MOV	R4,#4
X24DB:	ACALL	X260A
	JNZ	X24E2
	INC	R6
	DJNZ	R4,X24DB
X24E2:	CLR	C
	CLR	A
	SUBB	A,R5
	CLR	ACC.7
	LCALL	TxMIDIbyte
	ACALL	EndSysEx
	ACALL	X25DA
	MOV	A,7DH
	CJNE	A,#2,X24F5
	SJMP	X24F8
;
X24F5:	CJNE	R6,#40H,X24D2
X24F8:	MOV	R3,#45H
	ACALL	SysExHandTxEnd
	ACALL	X25DA
	AJMP	X2752
;
X2500:	MOV	R3,#41H
	ACALL	SysExHandTxEnd
	SETB	28H.1
	MOV	R1,#0
	MOV	R2,#0
	MOV	DPTR,#XFF00
X250D:	ACALL	X25ED
	MOV	A,27H
	JZ	X2528
	JNB	28H.2,X251D
	JNB	27H.1,X2575
	CLR	27H.1
	AJMP	X2577
;
X251D:	JNB	27H.7,X2575
	CLR	27H.7
	MOV	R3,#43H
	ACALL	SysExHandTxEnd
	SETB	28H.2
X2528:	CLR	A
	XCH	A,R4
	JNB	ACC.7,X250D
	SETB	28H.2
	CLR	ACC.7
	XCH	A,R1
	JB	ACC.0,X253D
	INC	A
	XCH	A,R1
	MOV	R3,A
	XCH	A,R5
	ADD	A,R5
	XCH	A,R5
	SJMP	X250D
;
X253D:	XCH	A,R1
	CJNE	R2,#4,X2543
	SJMP	X250D
;
X2543:	INC	R1
	XCH	A,R5
	ADD	A,R5
	XCH	A,R5
	SWAP	A
	ORL	A,R3
	MOV	R3,A
	MOV	A,7DH
	JZ	X2563
	CJNE	A,#1,X256F
	CJNE	R1,#2BH,X2554
X2554:	JC	X256F
	CJNE	R1,#40H,X255E
	CJNE	R3,#10H,X25D4
	SJMP	X2569
;
X255E:	CJNE	R3,#0,X25D4
	AJMP	X250D
;
X2563:	CJNE	R1,#40H,X256F
	CJNE	R3,#0,X25D4
X2569:	MOV	R1,#0
	INC	R6
	INC	R2
	AJMP	X250D
;
X256F:	MOV	A,R3
	MOVX	@DPTR,A
	INC	DPL
	AJMP	X250D
;
X2575:	AJMP	BulkErr
;
X2577:	MOV	A,7DH
	CJNE	A,#2,X2585
	CJNE	R1,#0C1H,X25D4
	MOV	R7,#60H
	MOV	R6,#40H
	SJMP	X2591
;
X2585:	MOV	R7,#7CH
	JZ	X2591
	MOV	R7,#54H
	CJNE	R1,#1,X25D4
	CJNE	R2,#4,X25D4
X2591:	MOV	A,R5
	ANL	A,#7FH
	JNZ	X25D2
	MOV	DPH,73H
	MOV	DPL,74H
	MOV	LAST_BANK,#0FFH
	MOV	P2,#0FFH
	MOV	R0,#0
X25A4:	MOVX	A,@R0
	MOVX	@DPTR,A
	INC	R0
	INC	DPTR
	DJNZ	R7,X25A4
	MOV	73H,DPH
	MOV	74H,DPL
	MOV	R3,#43H
	ACALL	SysExHandTxEnd
	CJNE	R6,#40H,X25B9
	SJMP	X25C3
;
X25B9:	CLR	A
	MOV	R2,A
	MOV	R1,A
	MOV	R4,A
	MOV	R5,A
	MOV	DPTR,#XFF00
	AJMP	X250D
;
X25C3:	ACALL	X25ED
	MOV	A,27H
	JZ	X25C3
	JNB	27H.4,X25D2
	MOV	R3,#43H					; SysEx Operation Code (ACK) = Acknowledge, likely
	ACALL	SysExHandTxEnd
	AJMP	X2752
;
X25D2:	SJMP	BulkErr
;
X25D4:
	MOV	R3,#4FH					; SysEx Operation Code (RJC) = Rejection, likely
	ACALL	SysExHandTxEnd
	AJMP	X273D				; something related to 'Bulk DT-MISMATCH' function
;
X25DA:
	ACALL	X25ED
	MOV	A,27H
	JZ	X25DA
	JNB	27H.5,BulkErr
	CLR	27H.5
	RET	
;
; # report an error
;
BulkErr:
	MOV	DPTR,#ERRStr			; '..ERR...'
	SETB	24H.2
	SJMP	X25FB				; hop down to shared routine
;
X25ED:
	DJNZ	R7,X25F7
	LCALL	X2787
	LCALL	X2799
	JNZ	BulkCancel
X25F7:	RET	
;
; # report bulk cancel
;
BulkCancel:
	MOV	DPTR,#CancelStr			; 'CANCEL..' string
X25FB:	MOV	R3,#4FH
	MOV	SP,#0DH
	ACALL	SysExHandTxEnd
	AJMP	X2757
;
; # MIDI SysEx Handshake Tx with immediate SysEx End
;
SysExHandTxEnd:
	LCALL	SysExHandTx		; R3 becomes SysEx Operation Code
	ACALL	EndSysEx
	RET	
;
;
;
X260A:
	MOV	A,7DH
	MOV	R2,#1FH
	JZ	X2617
	MOV	R2,#60H
	CJNE	A,#1,X2617
	MOV	R2,#15H
X2617:	MOVX	A,@DPTR
	MOV	R3,A
	ANL	A,#0FH
	XCH	A,R5
	ADD	A,R5
	XCH	A,R5
	LCALL	TxMIDIbyte
	MOV	A,R3
	SWAP	A
	ANL	A,#0FH
	XCH	A,R5
	ADD	A,R5
	XCH	A,R5
	LCALL	TxMIDIbyte
	INC	DPTR
	DJNZ	R2,X2617
	MOV	A,7DH
	MOV	R2,#1
	JZ	X2639
	MOV	R2,#0BH
	CJNE	A,#1,X2652
X2639:	CLR	A
	LCALL	TxMIDIbyte
	CJNE	R2,#1,X2648
	MOV	A,7DH
	JZ	X2648
	MOV	A,#1
	SJMP	X2649
;
X2648:	CLR	A
X2649:	XCH	A,R5
	ADD	A,R5
	XCH	A,R5
	LCALL	TxMIDIbyte
	DJNZ	R2,X2639
	CLR	A
X2652:	RET	
;
X2653:
	JNB	ACC.1,X2658
	AJMP	X269B
;
X2658:
	MOV	A,7DH
	MOV	R2,#20H
	JZ	X2665
	MOV	R2,#40H
	CJNE	A,#1,X2665
	MOV	R2,#30H
X2665:	MOV	R3,#37H
	LCALL	SysExHandTx
	CLR	A
	LCALL	TxMIDIbyte
	MOV	A,R6
	LCALL	TxMIDIbyte
X2672:	ACALL	X260A
	JNZ	X2683
	INC	R6
	MOV	A,#3
	ANL	A,R6
	JNZ	X2672
	ACALL	EndSysEx
	CJNE	R6,#40H,X2687
	AJMP	X2752
;
X2683:	ACALL	EndSysEx
	AJMP	X2752
;
X2687:	MOV	R3,#0C8H
X2689:	ACALL	X2799
	JZ	X268F
	AJMP	X274D
;
X268F:	MOV	R0,#0FAH
X2691:	MUL	AB
	MUL	AB
	DJNZ	R0,X2691
	ACALL	X2787
	DJNZ	R3,X2689
	AJMP	X2658
;
X269B:	LCALL	X2787
	LCALL	X2799
	JZ	X26A5
	AJMP	X274D
;
X26A5:	CLR	A
	XCH	A,R5
	JBC	ACC.7,X26FE
	JNB	28H.1,X26B2
	CLR	A
	XCH	A,R4
	JBC	ACC.7,X26B6
X26B2:	DJNZ	R7,X26A5
	SJMP	X269B
;
X26B6:	XCH	A,R1
	JB	ACC.0,X26BF
	XCH	A,R1
	MOV	R3,A
	INC	R1
	SJMP	X26A5
;
X26BF:
	INC	A
	XCH	A,R1
	SWAP	A
	ORL	A,R3
	MOV	R3,A
	JB	21H.0,X26E3
	JNB	21H.1,X26D9
	CJNE	R1,#0C0H,X26E8
	JNB	25H.7,X26D6
	MOVX	A,@DPTR
	CJNE	A,RB0R3,X2730			; something related to 'Mem Compare ERR!' function
	AJMP	X2735					; something related to '*Mem data OK !!*' function
;
X26D6:
	MOVX	@DPTR,A
	AJMP	X2735					; something related to '*Mem data OK !!*' function
;
X26D9:	CJNE	R1,#2BH,X26DC
X26DC:	JC	X26E8
	CJNE	R1,#40H,X26A5
	SJMP	X26F5
;
X26E3:	CJNE	R1,#3FH,X26E6
X26E6:	JNC	X26F5
X26E8:	JNB	25H.7,X26F1
	MOVX	A,@DPTR
	CJNE	A,RB0R3,X2730			; something related to 'Mem Compare ERR!' function
	SJMP	X26F2
;
X26F1:	MOVX	@DPTR,A
X26F2:	INC	DPTR
	AJMP	X26A5
;
X26F5:	MOV	R1,#0
	INC	R6
	MOV	A,R6
	JNB	ACC.6,X26A5
X26FC:	AJMP	X2735
;
X26FE:	JB	ACC.6,X26FC
	MOV	R6,A
	MOV	DPH,73H
	MOV	DPL,74H
	MOV	R3,7DH
	JB	21H.0,X2717
	JNB	21H.1,X271F
	JNZ	X26FC
	CJNE	R3,#2,X273D				; something related to 'Bulk DT-MISMATCH' function
	SJMP	X2728
;
X2717:	MOV	B,#1FH
	CJNE	R3,#0,X273D				; something related to 'Bulk DT-MISMATCH' function
	SJMP	X2725
;
X271F:	MOV	B,#15H
	CJNE	R3,#1,X273D				; something related to 'Bulk DT-MISMATCH' function
X2725:	LCALL	CalcOffsetBySize
X2728:	MOV	R1,#0
	SETB	28H.1
	SETB	P1.3
	AJMP	X26A5
;
X2730:	
	MOV	DPTR,#MemCmpERRStr		; 'Mem Compare ERR!' string
	SJMP	X2740				; hop down to shared display printing routine
;
X2735:
	JNB	25H.7,X2752
	MOV	DPTR,#MemDataOKStr		; '*Mem data OK !!*' string
	SJMP	X2740				; hop down to shared display printing routine
;
;
;
X273D:
	MOV	DPTR,#BulkMisStr		; 'Bulk DT-MISMATCH' string
X2740:	; # fall-through from above, or jumped to by Mem strings above
	MOV	SP,#0DH
	LCALL	SelectBank_80
	LCALL	PrintFullStr
	SETB	24H.2
	SJMP	X2765
;
X274D:
	MOV	DPTR,#CancelStr			; 'CANCEL..' string
	SJMP	X2757				; hop down to shared routine
;
X2752:
	MOV	DPTR,#EndStr			; '..END...' string
	SETB	24H.2
X2757:		; fall-through from '..END...' or jumped to by 'CANCEL..'
	ScrPos	A, 10				; move cursor to column 10
	MOV	R0,#0
	LCALL	SelectBank_80
	MOVX	@R0,A
	LCALL	X1C73
	LCALL	Delay2A
X2765:	JB	20H.3,X2765
	CLR	EA
	CLR	20H.7
	LCALL	X0745
	MOV	P2,#0FEH
	MOV	R0,#28H
	CLR	A
X2775:	MOVX	@R0,A
	INC	R0
	CJNE	R0,#40H,X2775
	MOV	21H,A
	LCALL	X1507
	MOV	SP,#0DH
	CLR	P1.3
	LJMP	X0304
;
X2787:	MOV	LAST_BANK,#90H
	MOV	P2,#90H
	MOV	A,7EH
	SETB	ACC.7
	MOV	R0,A
	ADD	A,#10H
	MOV	7EH,A
	CLR	A
	MOVX	@R0,A
	RET	
;
X2799:	MOV	A,7EH
	CJNE	A,#0F0H,X27AE
X279E:	MOV	LAST_BANK,#0A0H
	MOV	P2,#0A0H
	MOVX	A,@R0
	CPL	A
	JNZ	X27AB
	SETB	28H.0
X27AA:	RET	
;
X27AB:	JB	28H.0,X27AA
X27AE:	CLR	A
	RET	
;
; Alignment to 2800H for AJMP/ACALL (80 bytes padding)
;
	ORG	2800H
X2800:
	MOV	SP,#0DH
	LJMP	X274D
;
X2806:	LJMP	X2752
;
;
;
X2809:
	MOV	A,R4
	ANL	A,#3
	MOV	27H,A
X280E:	JNZ	X2812
	AJMP	X290B
;
X2812:	MOV	R4,#21H
X2814:	LCALL	X279E
	JNZ	X2800
	LCALL	X2787
	MOV	R5,#20H
X281E:	ACALL	X28F0
	JB	F0,X282F
	JC	X2834
	JNB	28H.3,X2812
	ACALL	X28F0
	JB	F0,X2898
	JNC	X2849
X282F:	JNB	28H.3,X2812
	SJMP	X2898
;
X2834:	JB	28H.3,X2814
	DJNZ	R5,X281E
	DJNZ	R4,X2814
	MOV	R6,#0
	ACALL	DisplayDigit
	SETB	28H.3
X2841:	SJMP	X2814
;
X2843:	MOV	DPTR,#TapeMisStr
	LJMP	X2740
;
X2849:	ACALL	X28BA
	MOV	A,7DH
	JNZ	X2854
	CJNE	R5,#41H,X2843
	SJMP	X285F
;
X2854:	CJNE	A,#1,X285C
	CJNE	R5,#42H,X2843
	SJMP	X285F
;
X285C:	CJNE	R5,#43H,X2843
X285F:	ACALL	X28AF
	INC	R6
X2862:	MOV	R7,#0
	MOV	A,7DH
	MOV	R4,#0F8H
	JZ	X2871
X286A:	MOV	R4,#0A8H
	CJNE	A,#2,X2871
	MOV	R4,#60H
X2871:	ACALL	DisplayDigit
X2873:	ACALL	X28AF
	ACALL	X28A0
	JB	27H.0,X2892
	MOV	A,R5
	MOVX	@DPTR,A
X287C:	ACALL	X28A7
	DJNZ	R4,X2873
	ACALL	X28AF
	MOV	A,R7
	JNZ	X2898
	MOV	A,7DH
	CJNE	A,#2,X288C
	AJMP	X2806
;
X288C:
	INC	R6
	CJNE	R6,#9,X2862
	AJMP	X2806
;
X2892:
	MOVX	A,@DPTR
	CJNE	A,RB0R5,X2898
X2896:	AJMP	X287C
;
X2898:
	SETB	24H.2
	MOV	DPTR,#ERRStr			; '..ERR...'
	LJMP	X2757
;
X28A0:
	MOV	DPL,74H
	MOV	DPH,73H
	RET	
;
X28A7:
	INC	DPTR
	MOV	74H,DPL
	MOV	73H,DPH
X28AE:	RET	
;
X28AF:
	ACALL	X28CD
	JC	X2898
	LCALL	X279E
	JZ	X28BA
	AJMP	X2800
;
X28BA:	MOV	R3,#8
X28BC:	ACALL	X28CD
	MOV	A,R5
	RRC	A
	MOV	R5,A
	DJNZ	R3,X28BC
	ADD	A,R7
	MOV	R7,A
	LCALL	X2787
X28C8:	ACALL	X28CD
	JNC	X2898
	RET	
;
X28CD:	ACALL	X28F0
	JB	F0,X2898
	JC	X28DC
	ACALL	X28F0
	JB	F0,X2898
	JC	X2898
	RET	
;
X28DC:	MOV	R1,#3
	MOV	R2,#3
X28E0:	ACALL	X28F0
	JB	F0,X2898
	JNC	X28E8
	DEC	R2
X28E8:	DJNZ	R1,X28E0
	CJNE	R2,#2,X28ED
X28ED:	JNC	X2898
	RET	
;
X28F0:	CLR	F0
	MOV	R0,#0D0H
X28F4:	JNB	T0,X28FC
	DJNZ	R0,X28F4
	SETB	F0
	RET	
;
X28FC:	MOV	R0,#9CH
X28FE:	JB	T0,X2906
	DJNZ	R0,X28FE
X2903:	SETB	F0
	RET	
;
X2906:	CJNE	R0,#4EH,X2909
X2909:	CPL	C
	RET	
;
X290B:	MOV	R6,#0
X290D:	ACALL	DisplayDigit
	ACALL	X293C
	MOV	A,7DH
	MOV	R2,#41H
X2915:	JZ	X291E
X2917:	MOV	R2,#42H
	CJNE	A,#2,X291E
	MOV	R2,#43H
X291E:	MOV	A,R2
	ACALL	X2963
	MOV	A,R6
X2922:	ACALL	X2963
	INC	R6
X2925:	ACALL	DisplayDigit
	ACALL	X2948
	INC	R6
X292A:	MOV	A,7DH
	CJNE	A,#2,X2931
	SJMP	X2934
;
X2931:	CJNE	R6,#9,X2925
X2934:	MOV	R6,#9
	ACALL	DisplayDigit
	ACALL	X293C
X293A:	AJMP	X2806
;
X293C:	MOV	R1,#10H
X293E:	MOV	R3,#0
X2940:	SETB	C
	ACALL	X2973
	DJNZ	R3,X2940
	DJNZ	R1,X293E
	RET	
;
X2948:	MOV	R3,#0F8H
	MOV	A,7DH
	JZ	X2955
	MOV	R3,#0A8H
	CJNE	A,#2,X2955
	MOV	R3,#60H
X2955:	MOV	R7,#0
X2957:	ACALL	X28A0
	MOVX	A,@DPTR
	ACALL	X28A7
	ACALL	X2963
	DJNZ	R3,X2957
	CLR	A
	CLR	C
	SUBB	A,R7
X2963:	MOV	R5,A
	ADD	A,R7
	MOV	R7,A
	MOV	R1,#9
	CLR	C
	SJMP	X296E
;
X296B:	MOV	A,R5
	RRC	A
	MOV	R5,A
X296E:	ACALL	X2973
	DJNZ	R1,X296B
	SETB	C
X2973:
	MOV	R2,#8
	MOV	A,#0CCH
	JNC	X297B
	MOV	A,#0AAH
X297B:	RLC	A
	CPL	C
	MOV	P1.7,C
	MOV	R0,#53H
X2981:	DJNZ	R0,X2981
	MOV	7CH,A
	LCALL	X279E
	JZ	X298C
	AJMP	X2800
;
X298C:	LCALL	X2787
	MOV	A,7CH
	DJNZ	R2,X297B
	RET	
;
; Shows value in R6 as a digit in the right-hand display column
;
DisplayDigit:
	MOV	P2,#80H
	MOV	R0,#0
	ScrPos	A, 15			; go to last column
	MOVX	@R0,A
	INC	R0
	MOV	A,R6
	ADD	A,#30H			; convert value to ASCII
	MOVX	@R0,A
	SETB	ACC.7
X29A3:	; <top of loop> falls through from above
	INC	R0
	MOVX	@R0,A
	CJNE	R0,#8,X29A3		;  hop back to top of loop until R0 is 8
	RET	
;
; pairs of (values for R1, offset from X21E7)
;
X29A9:
	DB	2FH,(X21F4 - X21E7)
	DB	2FH,(X21FD - X21E7)
	DB	2FH,(X2207 - X21E7)
	DB	30H,(X2207 - X21E7)
	DB	30H,(X2219 - X21E7)
	DB	30H,(X220F - X21E7)
	DB	31H,(X21F4 - X21E7)
	DB	31H,(X21FD - X21E7)
	DB	31H,(X2207 - X21E7)
	DB	31H,(X21EA - X21E7)
	DB	2FH,(X2223 - X21E7)
	DB	36H,00H
	DB	37H,00H
	DB	33H,(X222D - X21E7)
	DB	38H,00H
	DB	39H,00H
	DB	3AH,00H
	DB	3BH,00H
	DB	3DH,00H
	DB	3CH,00H
	DB	33H,(X2236 - X21E7)
	DB	34H,(X222D - X21E7)
	DB	3EH,00H
	DB	34H,(X2236 - X21E7)
	DB	3FH,00H
	DB	40H,00H
	DB	41H,00H
	DB	42H,00H
	DB	43H,00H
	DB	44H,00H
	DB	45H,00H
	DB	46H,00H
	DB	47H,00H
	DB	35H,(X222D - X21E7)
	DB	32H,00H
	DB	35H,(X2240 - X21E7)
;
; pairs of (values for R1, offset from X235F)
;
X29F1:
	DB	2FH,(X2369 - X235F)
	DB	2FH,(X236F - X235F)
	DB	2FH,(X2376 - X235F)
	DB	30H,(X2376 - X235F)
	DB	30H,(X2382 - X235F)
	DB	30H,(X237B - X235F)
	DB	31H,(X2369 - X235F)
	DB	31H,(X236F - X235F)
	DB	31H,(X2376 - X235F)
	DB	31H,(X2362 - X235F)
	DB	2FH,(X2389 - X235F)
	DB	36H,00H
	DB	37H,00H
	DB	33H,(X2395 - X235F)
	DB	38H,00H
	DB	39H,00H
	DB	3AH,00H
	DB	3BH,00H
	DB	3DH,00H
	DB	3CH,00H
	DB	33H,(X239A - X235F)
	DB	34H,(X2395 - X235F)
	DB	3EH,00H
	DB	34H,(X239A - X235F)
	DB	3FH,00H
	DB	40H,00H
	DB	41H,00H
	DB	42H,00H
	DB	43H,00H
	DB	44H,00H
	DB	45H,00H
	DB	46H,00H
	DB	47H,00H
	DB	35H,(X2395 - X235F)
	DB	32H,00H
	DB	35H,(X2390 - X235F)
;
;
;
X2A39:
	DB	62H,00H,63H,63H,64H,76H,65H,11H
	DB	00H,34H,66H,11H,67H,14H,68H,11H
	DB	69H,21H,22H,2DH,6AH,43H,6AH,56H
	DB	24H,89H
;
;
;
X2A53:	
	DB	62H,00H,63H,05H,64H,05H
	DB	65H,00H,00H,0AH,66H,00H,67H,00H
	DB	68H,00H,69H,00H,22H,00H,6AH,11H
	DB	6AH,15H,24H,1AH
;
; # table with offsets for jumps to specific routines
;
X2A6D:
	DB	31H,3AH,0B6H,00H,0B7H,00H,2FH,81H
	DB	33H,00H,35H,06H,30H,0BH,30H,1BH
	DB	30H,22H,31H,10H,31H,0BH,0B8H,00H
	DB	0B9H,00H
	DB	31H,15H,0BAH,00H,0BBH,00H,0BCH,00H
	DB	2FH,61H,0BDH,00H,33H,06H,34H,00H
	DB	0BEH,00H,2FH,98H,34H,06H,2FH,26H
	DB	0B2H,00H,0BFH,00H,0C0H,00H,0C1H,00H
	DB	0C2H,00H,0C3H,00H,0C4H,00H,0C5H,00H
	DB	0C6H,00H,0C7H,00H,35H,00H
;
; # table with offsets for jumps to specific routines
;
X2AB5:	
	DB	31H,2AH
	DB	0B6H,00H,0B7H,00H,2FH,2AH,33H,00H
	DB	35H,61H,30H,14H,30H,49H,30H,52H
	DB	31H,1DH,31H,14H,0B8H,00H,0B9H,00H
	DB	31H,3CH,0BAH,00H,0BBH,00H,0BCH,00H
	DB	2FH,1DH,0BDH,00H,33H,0BH,34H,00H
	DB	0BEH,00H,2FH,14H,34H,0BH,2FH,82H
	DB	0B2H,00H,0BFH,00H,0C0H,00H,0C1H,00H
	DB	0C2H,00H,0C3H,00H,0C4H,00H,0C5H,00H
	DB	0C6H,00H,0C7H,00H,35H,00H
;
; # apparently a table, unknown meaning
;	
X2AFD:
	DB	68H,30H
	DB	66H,30H,00H,43H,65H,30H,67H,4FH
	DB	69H,69H,63H,00H,64H,18H,22H,83H
	DB	6AH,0ACH,6AH,8BH
;
; # table of offsets for a jump ??
;
X2B13:
	DB	68H,00H,66H,00H
	DB	00H,2EH,65H,00H,67H,0DH,69H,0DH
	DB	63H,58H,64H,54H,22H,35H,6AH,48H
	DB	6AH,4EH
; ######################################
; # BASE ADDRESS OF LARGE STRING TABLE #
; ######################################
ParamStrs:
	DB	'DCO RNG '
	DB	'DCO LFO '
	DB	'DCO ENV '
	DB	'DCO ENV '
	DB	'DCO AFTR'
	DB	'DCO BEND'
	DB	'PULSE   '
	DB	'SAWTOOTH'
	DB	'SUB     '
	DB	'SUB LEVL'
	DB	'NOIS LVL'
	DB	'PW / PWM'
	DB	'PWM RATE'
	DB	'HPF FREQ'
	DB	'VCF FREQ'
	DB	'VCF RESO'
	DB	'VCF ENV '
	DB	'VCF ENV '
	DB	'VCF LFO '
	DB	'VCF KYBD'
	DB	'VCF AFTR'
	DB	'VCA LEVL'
	DB	'VCA ENV '
	DB	'VCA AFTR'
	DB	'CHORUS  '
	DB	'CRS RATE'
	DB	'LFO RATE'
	DB	'LFO DELY'
	DB	'ENV T1  '
	DB	'ENV L1  '
	DB	'ENV T2  '
	DB	'ENV L2  '
	DB	'ENV T3  '
	DB	'ENV L3  '
	DB	'ENV T4  '
	DB	'ENV KYBD'
; ##########################
; # LARGE TABLE OF STRINGS #
; ##########################
PrefStrs:
	DB	'Volume      =   '
	DB	'MOD. Sense  =   '
	DB	'Portamento  =   '
	DB	'Porta. Time =   '
	DB	'Key Shift   =   '
	DB	'Detune      =   '
	DB	'Key Range Lo=   '
	DB	'Key Range Hi=   '
	DB	'MIDI AFTER  =   '
	DB	'MIDI BENDER =   '
	DB	'MIDI EXCL   =   '
	DB	'MIDI HOLD   =   '
	DB	'MIDI MOD    =   '
	DB	'MIDI VOLUME =   '
	DB	'MIDI PORTA  =   '
	DB	'MONO BEND   =   '
	DB	'CHORD MEM NO.   '
	DB	'ASSIGN MODE=    '
SettingStrs:
	DB	'TUNE    =  4    '
	DB	'MIDI CHANNEL=   '
	DB	'MIDI OMNI   =   '
	DB	'MIDI PROG.CG=   '
	DB	'PCH ASG MODE=   '
	DB	'CHORD   MEMORY  '
	DB	'TX C.M.  APR=   '
	DB	'TX PATCH APR=   '
	DB	'TX TONE  APR=   '
	DB	'MEM. PROTECT=   '
NoteStrs:
	DB	'C '
	DB	'C#'
	DB	'D '
	DB	'D#'
	DB	'E '
	DB	'F '
	DB	'F#'
	DB	'G '
	DB	'G#'
	DB	'A '
	DB	'A#'
	DB	'B '
TapeStrs:
	DB	'Bulk Dump  Bulk*Dump  Bulk Load  Bulk*Load  '
	DB	'TAPE Save  TAPE Vrfy  TAPE Load  '
PTCMStrs:
	DB	'[T-a][T-b][P-A][P-B][CM ]'
PolyMonoStr:
	DB	'polyc.m.mono'
ChordOKStr:
	DB	'Enter  CHORD    '
okPromptStr:
	DB	' ok ?'
MKS50Str:
	DB	'*Roland MKS-50 *'
MemProStr:
	DB	'Memory Protected'
ChordMemStr:
	DB	'CHORD MEM. No.01'
ChkBatStr:
	DB	'Check battery!! '
RunStr:
	DB	' -Run-'
dotDotdotStr:
	DB	'.....'
CancelStr:
	DB	'CANCEL..'
EndStr:
	DB	'..END...'
ERRStr:
	DB	'..ERR...'
BulkMisStr:
	DB	'Bulk DT-MISMATCH'
TapeMisStr:
	DB	'TAPE DT-MISMATCH'
MemCmpERRStr:
	DB	'Mem Compare ERR!'
MemDataOKStr:
	DB	'*Mem data OK !!*'
MIDIvelChgStr:
	DB	'MIDI velchg =   '
;
;
;
X2F5B:
	MOV	A,R5
	ADD	A,#6
	MOVC	A,@A+PC
	MOV	R4,A
	MOV	A,R5
	ADD	A,#2
	MOVC	A,@A+PC
	RET
;
; # table accessed by routine above
;
X2F65:
	DB	000H,7FH,00H,86H,00H,8EH
	DB	00H,97H,00H,0A0H,00H,0AAH,00H,0B4H,00H,0BFH,00H,0CAH,00H,0D6H,00H,0E3H
	DB	00H,0F1H,00H,0FFH,01H,0EH,01H,1EH,01H,2FH,01H,41H,01H,55H,01H,69H
	DB	01H,7FH,01H,96H,01H,0AEH,01H,0C8H,01H,0E3H,01H,0FFH,02H,1DH,02H,3DH
	DB	02H,60H,02H,84H,02H,0AAH,02H,0D3H,02H,0FEH,03H,2BH,03H,5BH,03H,8EH
	DB	03H,0C5H,03H,0FEH,04H,3BH,04H,7BH,04H,0BFH,05H,08H,05H,54H,05H,0A5H
	DB	05H,0FBH,06H,56H,06H,0B7H,07H,1DH,07H,89H,07H,0FCH,08H,75H,08H,0F6H
	DB	09H,7FH,0AH,0FH,0AH,0A8H,0BH,4BH,0BH,0F6H,0CH,0ACH,0DH,6DH,0EH,3AH
	DB	0FH,12H,0FH,0F8H,10H,0EBH,11H,0EDH,12H,0FDH,14H,1EH,15H,51H,16H,95H
	DB	17H,0EDH,19H,59H,1AH,0DBH,1CH,74H,1EH,25H,1FH,0F0H,21H,0D6H,23H,0D9H
	DB	25H,0FBH,28H,3DH,2AH,0A2H,2DH,2BH,2FH,0DAH,32H,0B2H,35H,0B6H,38H,0E8H
	DB	3CH,4AH,3FH,0E0H,43H,0ACH,47H,0B2H,4BH,0F6H,50H,7AH,55H,43H,5AH,55H
	DB	5FH,0B4H,65H,65H,6BH,6DH,71H,0D0H,78H,94H,7FH,0C0H,87H,59H,8FH,65H
	DB	97H,0ECH,0A0H,0F4H,0AAH,87H,0B4H,0AAH,0BFH,69H,0CAH,0CAH,0D6H,0D9H,0E3H,0A0H
	DB	0F1H,29H,0FFH,80H
;
; # almost definitely code here -- need to convert to code!!!!!
;
X303F:
	ADD	A,#6
	MOVC	A,@A+PC
	MOV	R4,A
	MOV	A,R5
	ADD	A,#2
	MOVC	A,@A+PC
	RET	
;
; # table for routine above
;	
	DB	00H,07H,00H
	DB	08H,00H,09H,00H,09H,00H,0AH,00H,0AH,00H,0BH,00H,0BH,00H,0CH,00H
	DB	0DH,00H,0EH,00H,0EH,00H,0FH,00H,10H,00H,11H,00H,12H,00H,14H,00H
	DB	14H,00H,16H,00H,17H,00H,18H,00H,1AH,00H,1BH,00H,1CH,00H,1EH,00H
	DB	20H,00H,23H,00H,24H,00H,26H,00H,29H,00H,2BH,00H,2DH,00H,30H,00H
	DB	33H,00H,37H,00H,39H,00H,3DH,00H,40H,00H,44H,00H,49H,00H,4CH,00H
	DB	51H,00H,56H,00H,5BH,00H,61H,00H,66H,00H,6CH,00H,73H,00H,79H,00H
	DB	81H,00H,89H,00H,90H,00H,99H,00H,0A3H,00H,0ABH,00H,0B6H,00H,0C1H,00H
	DB	0CDH,00H,0D8H,00H,0E6H,00H,0F3H,01H,02H,01H,10H,01H,21H,01H,33H,01H
	DB	44H,01H,58H,01H,6CH,01H,82H,01H,99H,01H,0B1H,01H,0CBH,01H,0E6H,02H
	DB	03H,02H,22H,02H,42H,02H,65H,02H,89H,02H,0AFH,02H,0D8H,03H,04H,03H
	DB	32H,03H,62H,03H,96H,03H,0CCH,04H,06H,04H,44H,04H,84H,04H,0C9H,05H
	DB	12H,05H,5FH,05H,0B1H,06H,08H,06H,63H,06H,0C4H,07H,2CH,07H,99H,08H
	DB	0CH,08H,87H,09H,08H,09H,93H,0AH,23H,0AH,0BFH,0BH,61H,0CH,0FH,0CH
	DB	0C7H,0DH,89H,0EH,57H,0FH,32H
;
;
;	
X3122:
	ADD	A,#1
	MOVC	A,@A+PC
	RET	
;
; ## each entry gets progressively larger (0 to 127) -- scaling table?
;
	DB	00H,00H,00H,00H,01H,01H,02H,02H
	DB	03H,03H,04H,04H,05H,05H,06H,06H
	DB	07H,07H,08H,08H,09H,09H,0AH,0AH
	DB	0BH,0BH,0CH,0CH,0DH,0DH,0EH,0EH
	DB	0FH,0FH,10H,10H,11H,11H,12H,12H
	DB	13H,13H,14H,14H,15H,15H,16H,16H
	DB	17H,17H,18H,18H,19H,19H,1AH,1AH
	DB	1BH,1BH,1CH,1CH,1DH,1DH,1EH,1EH
	DB	1FH,20H,21H,22H,23H,24H,25H,26H
	DB	27H,28H,29H,2AH,2BH,2CH,2DH,2EH
	DB	2FH,30H,31H,32H,33H,34H,35H,36H
	DB	37H,38H,39H,3AH,3BH,3CH,3DH,3EH
	DB	40H,42H,44H,46H,48H,4AH,4CH,4EH
	DB	50H,52H,54H,56H,58H,5AH,5CH,5EH
	DB	60H,62H,64H,66H,68H,6AH,6CH,6EH
	DB	70H,72H,74H,76H,78H,7CH,7FH,7FH
;
;	Converts letter/number to ASCII equivalent using table below?
;
GetChar:
	ANL	A,#3FH
	ADD	A,#5
	MOVC	A,@A+PC
	RET	
;
;	Accesses some kind of LUT @ X31F0?
;
X31AC:
	ADD	A,#35H
	MOVC	A,@A+PC
X31AF:	RET
;
;	Table of Alphanumeric Characters
;
AlphaNumericTable:
	DB	'ABCDEFGHIJKLMNOP'
	DB	'QRSTUVWXYZabcdef'
	DB	'ghijklmnopqrstuv'
	DB	'wxyz0123456789 -'
;
;
;
X31F0:	
	DB	24H,01H,83H,22H,0FFH,0FFH,0F7H
	DB	0EFH,0E7H,0DFH,0D7H,0CFH,0C7H,0BFH,0B7H
	DB	0AFH,0A7H,9FH,97H,8FH,87H,7FH,77H
	DB	6FH,67H,5FH,57H,4FH,47H,3FH,3DH
	DB	3BH,39H,37H,35H,33H,31H,2FH,2DH
	DB	2BH,29H,27H,25H,23H,21H,1FH,1DH
	DB	1BH,19H,17H,15H,13H,12H,11H,10H
	DB	10H,10H,10H,0FH,0FH,0FH,0FH,0EH
	DB	0EH,0EH,0EH,0DH,0DH,0DH,0DH,0DH
	DB	0CH,0CH,0CH,0CH,0CH,0BH,0BH,0BH
	DB	0BH,0BH,0AH,0AH,0AH,0AH,0AH,09H
	DB	09H,09H,09H,09H,08H,08H,08H,08H
	DB	08H,07H,07H,07H,07H,07H,06H,06H
	DB	06H,06H,06H,05H,05H,05H,05H,05H
	DB	04H,04H,04H,04H,04H,03H,03H,03H
	DB	03H,03H,02H,02H,02H,02H,02H,01H
	DB	01H,01H,01H,01H,01H,24H,0C1H,83H
	DB	22H,04H,08H,00H,10H,00H,20H,00H
	DB	00H,00H,00H,00H,00H,00H,00H
	DB	40H
	DB	80H
;
; # apparently a table, but unknown meaning
;
X3288:	
	DB	003H,000H,020H,000H,02FH,000H,03DH,000H ;	|.. ./.=.|
	DB	04AH,000H,056H,000H,061H,000H,06CH,000H ;	|J.V.a.l.|
	DB	076H,000H,07FH,000H,088H,000H,090H,000H ;	|v.......|
	DB	097H,000H,09EH,000H,0A4H,000H,0ABH,000H ;	|........|
	DB	0B0H,000H,0B5H,000H,0BAH,000H,0BFH,000H ;	|........|
	DB	0C3H,000H,0C7H,000H,0CBH,000H,0CFH,000H ;	|........|
	DB	0D2H,000H,0D5H,000H,0D8H,000H,0DAH,000H ;	|........|
	DB	0DDH,000H,0DFH,000H,0E1H,000H,0E3H,000H ;	|........|
	DB	0E5H,000H,0E7H,000H,0E8H,000H,0EAH,000H ;	|........|
	DB	0EBH,000H,0EDH,000H,0EEH,000H,0EFH,000H ;	|........|
	DB	0F1H,001H,0F2H,002H,0F2H,0F2H,0F3H,0D3H ;	|........|
	DB	0F4H,0A4H,0F5H,065H,0F6H,016H,0F6H,0C6H ;	|...e....|
	DB	0F7H,067H,0F7H,0F7H,0F8H,088H,0F9H,009H ;	|.g......|
	DB	0F9H,079H,0F9H,0E9H,0FAH,04AH,0FAH,0BAH ;	|.y...J..|
	DB	0FBH,00BH,0FBH,05BH,0FBH,0ABH,0FBH,0FBH ;	|...[....|
	DB	0FCH,03CH,0FCH,07CH,0FCH,0BCH,0FCH,0ECH ;	|.<.|....|
	DB	0FDH,02DH,0FDH,05DH,0FDH,08DH,0FDH,0ADH ;	|.-.]....|
	DB	0FDH,0DDH,0FDH,0FDH,0FEH,01EH,0FEH,03EH ;	|.......>|
	DB	0FEH,05EH,0FEH,07EH,0FEH,08EH,0FEH,0AEH ;	|.^.~....|
	DB	0FEH,0BEH,0FEH,0DEH,0FEH,0EEH,0FEH,0FEH ;	|........|
	DB	0FFH,010H,0FFH,020H,0FFH,02FH,0FFH,03DH ;	|... ./.=|
	DB	0FFH,04AH,0FFH,056H,0FFH,061H,0FFH,06CH ;	|.J.V.a.l|
	DB	0FFH,076H,0FFH,07FH,0FFH,088H,0FFH,090H ;	|.v......|
	DB	0FFH,097H,0FFH,09EH,0FFH,0A4H,0FFH,0ABH ;	|........|
	DB	0FFH,0B0H,0FFH,0B5H,0FFH,0BAH,0FFH,0BFH ;	|........|
	DB	0FFH,0C3H,0FFH,0C7H,0FFH,0CBH,0FFH,0CEH ;	|........|
	DB	0FFH,0D2H,0FFH,0D5H,0FFH,0D8H,0FFH,0DAH ;	|........|
	DB	0FFH,0DDH,0FFH,0DFH,0FFH,0E1H,0FFH,0E3H ;	|........|
	DB	0FFH,0E5H,0FFH,0E7H,0FFH,0E8H,0FFH,0EAH ;	|........|
	DB	0FFH,0EBH,0FFH,0EDH,0FFH,0EEH,0FFH,0EFH ;	|........|
	DB	0FFH,0F1H,0FFH,0F2H,0FFH,0F2H,0FFH,0F3H ;	|........|
	DB	0FFH,0F4H,0FFH,0F5H,0FFH,0F6H,0FFH,0F6H ;	|........|

X3388:	MOV	DPTR,#XA000
	MOV	A,#0FEH
	MOVX	@DPTR,A
	NOP	
	MOVX	A,@DPTR
	CPL	A
	MOV	29H,A
	JNB	ACC.4,X33AC				; jump if not some button? key check?
	JNB	ACC.0,X339B				; jump if not some button? key check?
	AJMP	AdjInsMode				; otherwise button, so jump?
;
X339B:
	JNB	ACC.1,X33A0				; jump if not some button? key check?
	AJMP	X346E				; otherwise button, so jump?
;
X33A0:
	JNB	ACC.2,X33A5				; key check?
	AJMP	ShowVer				; otherwise button, so jump?
;
;
;
X33A5:
	JNB	ACC.3,X33AC				; key check?
	ACALL	X3562				; related to 'Initlz Tone data' function
	SJMP	X3400
;
X33AC:	MOV	A,#0FDH
	MOVX	@DPTR,A
	NOP	
	MOVX	A,@DPTR
	CPL	A
	MOV	2AH,A
	MOV	R2,A
	ANL	A,29H
	CJNE	A,#1,X33BC
	SETB	26H.7
X33BC:	MOV	A,R2
	JNB	ACC.4,X33DC				; hotkey check?
	JNB	ACC.0,X33C7				; hotkey check?
	ACALL	X34D5				; related to 'Initlz Funct ram' function
	SJMP	X3400
;
; # key check?
;
X33C7:
	JNB	ACC.1,X33CE
	ACALL	X34F3				; related to 'Initlz Patch dat' function
	SJMP	X3400
;
; # key check?
;
X33CE:
	JNB	ACC.2,X33D5
	ACALL	X357F				; related to 'Initlz C.M. ptn ' function
	SJMP	X3400
;
; # key check?
;
X33D5:
	JNB	ACC.3,X33DC
	ACALL	X359C				; related to 'Copy Name TN~PCH' function
	SJMP	X3400
;
;
;
X33DC:
	MOV	A,#0FBH
	MOVX	@DPTR,A
	NOP	
	MOVX	A,@DPTR
	CPL	A
	MOV	79H,A
	CJNE	A,#88H,X33EB
	CLR	F0
	SJMP	X33F0
;
;
;
X33EB:
	CJNE	A,#44H,X3400
	SETB	F0
X33F0:	MOV	DPTR,#FactPreStr				; ' FACTORY PRESET ' string
	LCALL	PrintFullStr
	ACALL	X3568
	ACALL	X34FB
	ACALL	X35A2
	ACALL	X3585
	ACALL	X34DB
X3400: ; # probably tied to deliberate factory resets and re-initializations, service mode, and battery issues
	MOV	DPTR,#XFEF0
	MOVX	A,@DPTR
	CJNE	A,#10H,X3407
X3407:	JNC	BatAlert
	MOV	6FH,A
	INC	DPTR
	MOVX	A,@DPTR
	MOV	60H,A
	INC	DPTR
	MOVX	A,@DPTR
	JB	ACC.7,BatAlert
	MOV	70H,A
	INC	DPTR
	MOVX	A,@DPTR
	MOV	C,ACC.7
	MOV	20H.6,C
	MOV	20H.2,C
	SETB	20H.5
	MOV	C,ACC.6
	MOV	23H.7,C
	INC	DPTR
	MOVX	A,@DPTR
	JNZ	BatAlert
	INC	DPTR
	MOVX	A,@DPTR
	CJNE	A,#0FFH,BatAlert
	RET	
;
; # battery test
;
BatAlert:
	SETB	24H.2
	MOV	DPTR,#ChkBatStr			; 'Check battery!! ' string
	ACALL	X34D8
	ACALL	X3613
	SJMP	X3400
;
; # a service mode, likely
;
AdjInsMode:
	SETB	25H.7
	MOV	DPTR,#AdjInsStr			; '$ADJ/INS MODE!!!' string
	LCALL	PrintFullStr
	ACALL	X3613
	MOV	DPTR,#X378A				; data table of some type?
	ACALL	X3602
	SETB	24H.2
	AJMP	X3400
;
; # gets version string
;
ShowVer:
	JB	29H.3,X3457			; jump if some button is held
	MOV	DPTR,#VersionStr	; otherwise push 'Ver 2.1 11.07 86' string
	LCALL	PrintFullStr
X3455:	SJMP	X3455		; hangs machine? at least until some interrupt...
;
; # pitch inspect mode
;
X3457:
	MOV	DPTR,#PitchInspStr	; 'Pitch Inspect Md' string
	LCALL	PrintFullStr
	ACALL	X3613
	MOV	DPTR,#X37A3			; data table, very likely
	ACALL	X3602
	ORL	23H,#5
	MOV	6DH,#0CH
	SETB	24H.2
	AJMP	X3400
;
;
;
X346E:
	MOV	DPTR,#TONES
	MOV	R0,#0
	MOV	R2,#20H
X3475:	MOVX	A,@DPTR
	MOV	R3,A
	CPL	A
	MOV	R4,A
	MOVX	@DPTR,A
	MUL	AB
	MOVX	A,@DPTR
	CJNE	A,RB0R4,X3495
	CPL	A
	MOVX	@DPTR,A
	MUL	AB
	MOVX	A,@DPTR
	CJNE	A,RB0R3,X3495
	INC	DPTR
	INC	R0
	CJNE	R0,#0,X3475
	DJNZ	R2,X3475
	MOV	DPTR,#RAMokStr			; 'RAM check OK !! ' string
X3490:	LCALL	PrintFullStr
	SJMP	X349A				; hop down to code shared between RAM ERR and RAM OK!
;
; # RAM read/write error detected
;
X3495:
	MOV	DPTR,#RAMrwStr			; 'RAM wr/rd ERR!! ' string
	SJMP	X3490				; hop up to code shared between RAM ERR and RAM OK!
;
; # shared routine post-RAM check
;
X349A:	MOV	DPTR,#XA000
X349D:	MOVX	A,@DPTR
	CPL	A
	JNZ	X349D
	MOV	29H,A
X34A3:	MOVX	A,@DPTR
	CPL	A
	MOV	R2,A
	XRL	A,29H
	JZ	X34A3
	MOV	29H,R2
	ANL	A,R2
	JZ	X34A3
	CPL	F0
	MOV	R0,#0
	MOV	A,#40H
	MOVX	@R0,A
	CLR	A
	JNB	F0,X34BC
	MOV	A,#1FH				; 31 decimal (why?) -- is this a command written to the display?
X34BC:	ACALL	HPrntLp
	ScrPos	A,0				; force cursor to beginning to 1st line
	ACALL	HalfPrint
	ScrPos	A,8				; move cursor to column 8
	ACALL	HalfPrint
	SJMP	X34A3
;
; # VERY VERY LIKELY DISPLAY RELATED
;
HalfPrint:
	MOV	R0,#0
	MOVX	@R0,A
	CLR	A
HPrntLp:	INC	R0
	MOVX	@R0,A
	CJNE	R0,#8,HPrntLp
	LCALL	Delay2A
	RET	
;
; # probably a reset routine
;
X34D5:
	MOV	DPTR,#InitlzFRAMStr		; 'Initlz Funct ram' string
X34D8:	LCALL	PrintFullStr
X34DB:	MOV	DPTR,#XFEF0
	CLR	A
	MOVX	@DPTR,A
	INC	DPTR
	MOV	A,#80H						; possibly display position related, but doesn't seem it
	MOVX	@DPTR,A
	INC	DPTR
	MOV	A,#46H
	MOVX	@DPTR,A
	INC	DPTR
	MOV	A,#0C0H						; possibly display position related, but doesn't seem it
	MOVX	@DPTR,A
	CLR	A
	INC	DPTR
	MOVX	@DPTR,A
	CPL	A
	INC	DPTR
	MOVX	@DPTR,A
	RET	
;
; # probably a reset routine
;
X34F3:
	MOV	DPTR,#InitlzPtcStr			; 'Initlz Patch dat' string
	LCALL	PrintFullStr
	CLR	F0
X34FB:	MOV	P2,#0F0H
	MOV	R0,#0
	MOV	R2,#0
	MOV	R4,#35H
	MOV	R5,#35H
	MOV	R6,#0
X3508:	MOV	A,R2
	ACALL	WriteMemory
	MOV	DPTR,#X3551					; data table, probably
	MOV	R3,#9
X3510:	CLR	A
	MOVC	A,@A+DPTR
	ACALL	WriteMemory
	INC	DPTR
	DJNZ	R3,X3510
	CLR	A
	JNB	F0,X351D
	MOV	A,#60H
X351D:	ACALL	WriteMemory
	MOV	A,#3FH
	ACALL	WriteMemory
	ACALL	WriteMemory
	MOV	A,R6
	ACALL	WriteMemory
	MOV	A,R4
	ACALL	WriteMemory
	MOV	A,R5
	ACALL	WriteMemory
	INC	R5
	CJNE	R5,#3DH,X353B
	INC	R4
	MOV	R5,#35H
	CJNE	R4,#3DH,X353B
	MOV	R4,#35H
	INC	R6
X353B:	MOV	A,#3FH
	ACALL	WriteMemory
	ACALL	WriteMemory
	MOV	R3,#3
	MOV	A,#3EH
X3545:	ACALL	WriteMemory
	DJNZ	R3,X3545
	INC	R2
	CJNE	R2,#80H,X3508
X354D:	MOV	P2,#80H
	RET	
;
; # weird data
;
X3551:	
	DB	10H,71H,14H,20H,00H,7FH,00H,0C0H,00H

;
; Writes to a memory location R0 in bank P2, incrementing
; R0 and also incrementing P2 to point to the next bank if
; the end of the 256 byte bank is reached
;
WriteMemory:
	MOVX	@R0,A
	INC	R0
	CJNE	R0,#0,X3561
	INC	P2
X3561:	RET	

;
; # reset routine
;
X3562:	
	MOV	DPTR,#InitlzToneStr				; 'Initlz Tone data' string
	LCALL	PrintFullStr
X3568:	MOV	DPTR,#TonePresets			; tone preset table
	MOV	P2,#0E0H
	MOV	R0,#0
	MOV	R2,#40H
X3572:	MOV	R3,#1FH
X3574:	CLR	A
	MOVC	A,@A+DPTR
	ACALL	WriteMemory
	INC	DPTR
	DJNZ	R3,X3574
	DJNZ	R2,X3572
	SJMP	X354D
;
; # reset routine
;
X357F:	
	MOV	DPTR,#InitlzCMptnStr			; 'Initlz C.M. ptn ' string
	LCALL	PrintFullStr
X3585:	LCALL	SelectBank_FE
	MOV	R0,#90H
	MOV	R2,#10H
	MOV	DPTR,#ChordPresets				; pattern preset table, very likely
X358F:	MOV	R3,#6
X3591:	CLR	A
	MOVC	A,@A+DPTR
	ACALL	WriteMemory
	INC	DPTR
	DJNZ	R3,X3591
	DJNZ	R2,X358F
	AJMP	X354D
;
;
;
X359C:
	MOV	DPTR,#CpyNameStr			; 'Copy Name TN~PCH' string
	LCALL	PrintFullStr
X35A2:	MOV	R2,#0
X35A4:	MOV	A,R2
	MOV	B,#1FH
	MOV	DPTR,#TONES
	LCALL	CalcOffsetBySize
	MOV	A,#15H
	LCALL	X1CBC
	MOV	A,R2
	MOV	B,#15H
	MUL	AB
	ADD	A,#0BH
	MOV	R0,A
	MOV	A,B
	ADDC	A,#0F0H
	MOV	P2,A
	MOV	R3,#0AH
X35C3:	MOVX	A,@DPTR
	ANL	A,#3FH
	ACALL	WriteMemory
	INC	DPTR
	DJNZ	R3,X35C3
	INC	R2
	CJNE	R2,#80H,X35A4
	AJMP	X354D
;
X35D1:	MOV	DPTR,#X37BC			; data table of some type, very likely
	ACALL	X35F4
X35D6:	MOV	DPTR,#X378A			; data table of some type, very likely
	ACALL	X3602
	MOV	DPTR,#VCFSineStr				; '$adj VCF sine   ' string
	SJMP	X35ED
;
X35E0:	MOV	DPTR,#X37C6			; data table of some type, very likely
	ACALL	X35F4
	MOV	DPTR,#X37A3				; data table of some type, very likely
	ACALL	X3602
	MOV	DPTR,#BASICwaveStr				; '$adj BASIC wave ' string
X35ED:	LCALL	SelectBank_80
	LCALL	PrintFullStr
	RET	
;
; # move presets to RAM ??
;
X35F4:
	LCALL	SelectBank_FE
	MOV	R0,#59H
X35F9:	CLR	A
	MOVC	A,@A+DPTR
	MOVX	@R0,A
	INC	DPTR
	INC	R0
	CJNE	R0,#63H,X35F9
	RET	
;
; # presets to ???
;
X3602:	MOV	R0,#2FH
X3604:	CLR	A
	MOVC	A,@A+DPTR
	MOV	@R0,A
	INC	DPTR
	INC	R0
	CJNE	R0,#48H,X3604
	MOV	A,35H
	ANL	A,#0FH
	MOV	6DH,A
	RET	
;
;
;
X3613:
	MOV	DPTR,#X3721			; some kind of table
	MOV	R0,#62H
X3618:	CLR	A
	MOVC	A,@A+DPTR
	MOV	@R0,A
	INC	DPTR
	INC	R0
	CJNE	R0,#6BH,X3618
	RET	
;
; # TABLE OF STRINGS
;
InitlzFRAMStr:
	DB	'Initlz Funct ram'
InitlzPtcStr:
	DB	'Initlz Patch dat'
InitlzToneStr:
	DB	'Initlz Tone data'
InitlzCMptnStr:
	DB	'Initlz C.M. ptn '
CpyNameStr:
	DB	'Copy Name TN~PCH'
AdjInsStr:
	DB	'$ADJ/INS MODE!!!'
VCFSineStr:
	DB	'$adj VCF sine   '
BASICwaveStr:
	DB	'$adj BASIC wave '
RAMokStr:
	DB	'RAM check OK !! '
RAMrwStr:
	DB	'RAM wr/rd ERR!! '
FactPreStr:
	DB	' FACTORY PRESET '
PitchInspStr:
	DB	'Pitch Inspect Md'
;
; # CGRAM Character Table
;
CGRAM:						; @ $36E1
	DB	00000B
	DB	00000B
	DB	01001B
	DB	10101B
	DB	10010B
	DB	10010B
	DB	01101B
	DB	00000B

	DB	00000B
	DB	00000B
	DB	00000B
	DB	00000B
	DB	00000B
	DB	00000B
	DB	00000B
	DB	11111B

	DB	01000B
	DB	01100B
	DB	01110B
	DB	01111B
	DB	01110B
	DB	01100B
	DB	01000B
	DB	00000B

	DB	00010B
	DB	00110B
	DB	01110B
	DB	11110B
	DB	01110B
	DB	00110B
	DB	00010B
	DB	00000B

	DB	10000B
	DB	11000B
	DB	10100B
	DB	10011B
	DB	10000B
	DB	10000B
	DB	10000B
	DB	00000B

	DB	00000B
	DB	00000B
	DB	00000B
	DB	11000B
	DB	00100B
	DB	00010B
	DB	00001B
	DB	00000B

	DB	10000B
	DB	10000B
	DB	10000B
	DB	10011B
	DB	10100B
	DB	11000B
	DB	10000B
	DB	00000B

	DB	00001B
	DB	00010B
	DB	00100B
	DB	11000B
	DB	00000B
	DB	00000B
	DB	00000B
	DB	00000B

;
; # APPARENTLY A TABLE
;	
X3721:
	DB	00H,10H,71H,14H,20H,00H,7FH,00H,0C0H
;
; ######################################
; # FACTORY CHORD MEMORY PRESET TABLE  #
; # 16x 6 bytes                        #
; ######################################
;
ChordPresets:
	DB	000H,0FFH,0FFH,0FFH,0FFH,0FFH
	DB	074H,000H,00CH,018H,0FFH,0FFH
	DB	07BH,000H,0FFH,0FFH,0FFH,0FFH
	DB	07BH,000H,007H,00CH,0FFH,0FFH
	DB	000H,003H,006H,009H,0FFH,0FFH
	DB	000H,003H,006H,00AH,0FFH,0FFH
	DB	000H,004H,007H,0FFH,0FFH,0FFH
	DB	000H,004H,007H,00AH,0FFH,0FFH
	DB	000H,004H,007H,00AH,00EH,0FFH
	DB	000H,003H,007H,00BH,00EH,0FFH
	DB	07BH,000H,005H,00AH,00FH,0FFH
	DB	000H,004H,007H,00AH,00EH,012H
	DB	000H,007H,00EH,011H,015H,0FFH
	DB	000H,004H,008H,0FFH,0FFH,0FFH
	DB	000H,000H,000H,000H,000H,000H
	DB	077H,000H,007H,00CH,011H,0FFH
;
; #########################################
; # SOME KIND OF TABLE, ALMOST DEFINITELY #
; #########################################
;
X378A:
	DB	00H,01H,50H,00H,0EH,00H,0CH,00H
	DB	00H,00H,00H,37H,7FH,00H,00H,40H
	DB	54H,00H,0AH,7FH,00H,7FH,00H,7FH
	DB	0AH
;
; ###############################
; # QUITE POSSIBLY A DATA TABLE #
; ###############################
;
X37A3:
	DB	00H,01H,50H,40H,0EH,00H,0CH,00H
	DB	00H,50H,50H,7FH,00H,00H,00H,7FH
	DB	50H,00H,0AH,7FH,00H,7FH,00H,7FH
	DB	0AH
;
; ###############################
; # QUITE POSSIBLY A DATA TABLE #
; ###############################
;
X37BC:
	DB	15H,02H,05H,3EH,2CH,22H,27H,1EH,3EH,3EH
;
; ###############################
; # QUITE POSSIBLY A DATA TABLE #
; ###############################
;
X37C6:
	DB	01H,00H,12H,08H,02H,3EH,30H,1AH,2FH,1EH
;
	REPT 48
	DB	0FFH		; spacer bytes to keep alignment to $3800
	ENDM	
;
; ############################################
; # FACTORY TONE TABLE                       #
; # 64x 31 bytes                             #
; ############################################
;
TonePresets:
	DB	03AH,0C0H,012H,000H,080H,06EH,040H,0CDH,000H,0E2H,000H,047H,057H,02EH,000H,0FFH,080H,0FAH,0B0H,034H,0A8H,08FH,028H,025H,032H,012H,032H,027H,02DH,061H,075H
	DB	05AH,000H,052H,000H,000H,027H,000H,0ABH,000H,0EBH,000H,068H,056H,02AH,000H,07FH,022H,0E8H,0CAH,000H,02CH,089H,01AH,033H,033H,006H,02EH,0E2H,06DH,01AH,06BH
	DB	02EH,000H,072H,000H,000H,000H,000H,0B9H,000H,0D0H,000H,07FH,057H,033H,000H,07FH,000H,0D0H,0B3H,000H,033H,017H,032H,025H,028H,029H,021H,028H,0A7H,01EH,07EH
	DB	009H,014H,042H,00AH,080H,041H,05FH,0C7H,080H,0BEH,000H,054H,058H,045H,03AH,020H,058H,0FFH,0C5H,05AH,0BDH,08BH,028H,030H,03EH,012H,02DH,02BH,022H,067H,060H
	DB	05FH,090H,052H,000H,0D6H,065H,0BCH,0B0H,000H,0FFH,080H,03BH,055H,02AH,000H,0ECH,0ADH,07FH,080H,075H,000H,00BH,01EH,01AH,01DH,012H,032H,027H,0ADH,0E1H,035H
	DB	058H,000H,032H,000H,080H,066H,000H,0B2H,000H,0FFH,000H,05CH,056H,000H,000H,0FFH,080H,0D6H,0CFH,000H,0A3H,082H,021H,028H,02BH,02EH,02CH,086H,0EEH,022H,06DH
	DB	0C8H,003H,062H,000H,000H,071H,000H,0B0H,028H,0D4H,080H,074H,058H,03CH,000H,07FH,028H,0D0H,0C4H,000H,00AH,092H,032H,0A7H,0ADH,021H,001H,09AH,0ECH,02CH,075H
	DB	02EH,000H,072H,000H,07EH,000H,000H,0D6H,000H,0E0H,000H,07AH,053H,033H,000H,07FH,000H,0B9H,0B0H,000H,02FH,084H,0A5H,01EH,01CH,0ADH,0ABH,028H,003H,02BH,026H
	DB	018H,018H,042H,00BH,080H,03EH,060H,0D2H,080H,0BFH,000H,04EH,055H,05BH,035H,033H,045H,0FFH,0C5H,05AH,0BCH,007H,0A2H,020H,021H,012H,02DH,06BH,0E2H,027H,060H
	DB	007H,011H,012H,000H,080H,04BH,056H,0DFH,0AAH,088H,002H,046H,056H,00AH,027H,0BAH,0B6H,0FFH,0BAH,06FH,035H,013H,09EH,0A4H,0A7H,028H,012H,0EDH,0EBH,027H,060H
	DB	004H,035H,032H,009H,080H,05DH,060H,0D4H,086H,09FH,002H,043H,057H,0BAH,033H,058H,0D8H,0FFH,0E4H,05FH,03CH,012H,0ADH,0ABH,022H,027H,020H,08EH,0EBH,020H,067H
	DB	039H,033H,012H,000H,080H,050H,056H,0D6H,080H,0D0H,001H,04AH,052H,00AH,02DH,07FH,000H,0FFH,0BCH,06CH,027H,005H,09AH,02CH,02DH,012H,02DH,06BH,022H,067H,060H
	DB	018H,018H,042H,00BH,080H,03EH,064H,0D8H,080H,0BFH,000H,04DH,055H,05BH,05FH,07FH,000H,0FFH,0C5H,02CH,0C5H,00BH,0A8H,027H,020H,012H,02DH,06BH,022H,067H,060H
	DB	035H,007H,032H,00CH,081H,04EH,000H,0D1H,080H,092H,001H,056H,055H,041H,016H,020H,081H,090H,0BCH,07FH,0A8H,082H,01EH,025H,025H,028H,03EH,03EH,07EH,07EH,03EH
	DB	046H,014H,042H,009H,081H,04EH,000H,0E0H,080H,08DH,001H,050H,055H,03FH,02BH,00BH,098H,085H,0BCH,0FFH,028H,012H,0A8H,025H,028H,015H,022H,068H,0A5H,022H,027H
	DB	02DH,0B0H,072H,000H,005H,0F6H,056H,0ACH,000H,0BDH,000H,070H,056H,041H,000H,07FH,0A0H,0D6H,0BAH,000H,03CH,00FH,0A2H,033H,033H,022H,01CH,09AH,06DH,028H,07EH
	DB	004H,000H,082H,000H,080H,040H,000H,0CCH,000H,0AAH,000H,05DH,059H,000H,002H,07FH,0A9H,0DFH,0CDH,000H,0AAH,08FH,022H,01AH,027H,028H,03EH,035H,07EH,07EH,03EH
	DB	00CH,000H,042H,001H,080H,000H,000H,0B4H,009H,0A8H,009H,072H,0CEH,0C4H,080H,07FH,035H,0EAH,04EH,001H,0B8H,004H,0BEH,00FH,022H,01AH,027H,0A8H,0BEH,035H,07EH
	DB	006H,00CH,062H,000H,080H,047H,000H,0C5H,000H,0B3H,000H,040H,057H,0B3H,000H,0FFH,080H,0FCH,0CFH,000H,030H,084H,03EH,00FH,022H,01AH,027H,0A8H,0BEH,036H,07EH
	DB	005H,000H,052H,000H,080H,066H,01CH,0CEH,009H,0BAH,000H,070H,05AH,000H,002H,07FH,015H,0DAH,0D0H,001H,0B2H,08FH,022H,01AH,027H,028H,03EH,0F6H,0FEH,03EH,07EH
	DB	006H,000H,062H,000H,080H,01EH,023H,0CBH,000H,09CH,002H,068H,054H,0BCH,080H,07FH,09DH,05CH,0CAH,000H,0ADH,004H,0BEH,00FH,022H,01AH,027H,028H,0BEH,037H,07EH
	DB	059H,000H,072H,000H,082H,066H,000H,0CAH,000H,0B5H,000H,07EH,056H,000H,000H,0FFH,093H,0C4H,0BAH,000H,080H,082H,025H,01AH,02FH,03EH,03EH,0BEH,03EH,0FEH,03EH
	DB	00BH,000H,052H,000H,080H,066H,000H,066H,005H,0BAH,000H,064H,059H,080H,000H,0FFH,005H,0BCH,0C3H,000H,0AAH,007H,09AH,02BH,0A9H,02CH,022H,01CH,061H,0EBH,01DH
	DB	00DH,00FH,002H,000H,080H,000H,040H,03BH,06DH,080H,000H,07FH,050H,000H,000H,07FH,087H,05AH,044H,000H,027H,08FH,022H,01AH,027H,028H,00FH,09AH,0DDH,03EH,07EH
	DB	03DH,006H,002H,000H,080H,04CH,000H,0BEH,078H,0A0H,080H,06FH,055H,040H,000H,07FH,000H,080H,080H,000H,000H,08EH,02BH,020H,01AH,027H,03EH,075H,0BEH,03EH,07EH
	DB	029H,003H,002H,000H,080H,030H,000H,0D0H,027H,0A4H,080H,0D5H,056H,080H,000H,07FH,000H,080H,080H,01FH,00AH,00EH,02BH,0A0H,09AH,027H,03EH,076H,07EH,03EH,07EH
	DB	029H,003H,002H,00DH,000H,030H,000H,0D9H,027H,092H,080H,0DCH,056H,080H,000H,07FH,000H,080H,080H,02DH,00AH,002H,021H,09EH,09EH,02CH,032H,04EH,06BH,020H,067H
	DB	009H,022H,002H,000H,080H,06DH,000H,0C2H,080H,0CDH,000H,0DCH,056H,0B9H,0A5H,053H,000H,0E4H,07CH,07FH,0B5H,00FH,022H,0A9H,09EH,00EH,02BH,020H,01AH,027H,075H
	DB	00AH,028H,062H,000H,080H,064H,04DH,052H,00BH,080H,000H,0C6H,057H,080H,09AH,07FH,080H,0FFH,080H,07FH,038H,00FH,0A2H,0A9H,09EH,00EH,02BH,0A0H,01AH,027H,076H
	DB	02AH,002H,092H,000H,080H,067H,05AH,040H,05CH,080H,000H,04AH,054H,05AH,0CFH,07FH,0E9H,080H,0E6H,07FH,051H,095H,028H,022H,01CH,01EH,00FH,09AH,05DH,07EH,07EH
	DB	00EH,000H,002H,000H,080H,000H,000H,037H,078H,080H,000H,054H,050H,000H,047H,07FH,000H,07FH,0F8H,0F8H,046H,02CH,0A2H,027H,02EH,02CH,028H,0E2H,01DH,05AH,065H
	DB	029H,012H,052H,000H,080H,050H,044H,0C4H,0D2H,080H,000H,05FH,0D3H,033H,03DH,07FH,000H,0FFH,0D6H,037H,03EH,03EH,095H,028H,022H,01CH,01EH,0ACH,07EH,075H,07EH
	DB	01AH,0F0H,032H,006H,080H,000H,000H,0A0H,000H,0FFH,000H,062H,056H,045H,023H,07FH,0D0H,05AH,040H,070H,02CH,081H,02BH,01AH,02CH,02CH,03EH,035H,0FEH,03EH,07EH
	DB	00EH,0F5H,0C2H,000H,080H,06BH,045H,054H,07AH,080H,048H,070H,020H,000H,06EH,045H,058H,0FFH,0E2H,065H,066H,092H,032H,027H,03EH,011H,022H,0ECH,01EH,07EH,07EH
	DB	0D2H,053H,0A2H,006H,000H,000H,000H,0BEH,000H,0FFH,083H,064H,055H,044H,018H,07FH,080H,032H,000H,064H,00AH,012H,0A9H,022H,02DH,03EH,015H,05AH,0E5H,02FH,05EH
	DB	01DH,0F4H,072H,000H,084H,0B5H,05EH,0CFH,000H,0BFH,000H,05AH,055H,041H,00EH,034H,020H,0FFH,0DFH,000H,0ADH,085H,01AH,02DH,03EH,012H,032H,0A7H,0EDH,021H,07EH
	DB	00EH,0F0H,002H,000H,080H,000H,000H,0A6H,02CH,0FFH,000H,072H,055H,000H,000H,07FH,0ACH,000H,000H,07FH,033H,080H,02BH,0A9H,01EH,020H,020H,062H,01AH,06DH,06BH
	DB	03DH,012H,002H,000H,080H,04CH,000H,0BAH,0FFH,0FFH,000H,07FH,057H,041H,000H,07FH,011H,0E4H,0ACH,000H,029H,015H,09EH,0A5H,0A8H,03FH,011H,09EH,06CH,068H,075H
	DB	00DH,0F0H,062H,000H,080H,000H,000H,0B2H,000H,0E9H,084H,05AH,058H,03CH,01FH,07FH,080H,07FH,02EH,050H,08AH,001H,0A2H,0A0H,0BEH,001H,02BH,0DAH,02CH,06CH,07EH
	DB	02DH,001H,072H,000H,080H,061H,000H,0BAH,040H,080H,000H,050H,056H,033H,04FH,0FFH,080H,0FFH,0EEH,06EH,03FH,08FH,01AH,01DH,03EH,035H,03EH,03EH,07EH,07EH,07EH
	DB	06AH,000H,062H,000H,080H,06DH,047H,0CCH,000H,0E2H,080H,03EH,057H,02EH,01AH,0FFH,080H,0FFH,0E4H,02CH,08AH,00BH,09EH,01AH,01DH,012H,032H,027H,0EDH,0E1H,036H
	DB	085H,010H,042H,000H,080H,071H,045H,021H,000H,0D0H,000H,054H,057H,03CH,000H,0FFH,080H,0EAH,0F2H,000H,087H,00BH,09EH,01AH,01DH,012H,032H,067H,06DH,0E1H,037H
	DB	04CH,024H,002H,006H,001H,01AH,044H,0B9H,01BH,094H,00AH,070H,057H,041H,020H,073H,0AAH,0FFH,0EAH,02CH,098H,005H,0A5H,02EH,02DH,01EH,03EH,0BEH,0FEH,03EH,07EH
	DB	078H,011H,022H,000H,080H,035H,042H,0B4H,00BH,07FH,000H,04BH,058H,040H,000H,0FFH,0E2H,06FH,055H,052H,000H,00BH,09EH,01AH,01DH,012H,032H,0A7H,0ADH,0A1H,038H
	DB	081H,040H,022H,007H,080H,04CH,000H,0B4H,000H,0DAH,005H,051H,0D6H,045H,020H,0FFH,080H,07FH,0E0H,03DH,095H,092H,01AH,031H,03EH,03EH,03EH,03EH,03EH,03EH,03EH
	DB	071H,000H,012H,000H,001H,0E2H,080H,0B3H,000H,062H,000H,07FH,057H,033H,000H,07FH,018H,0D3H,0C6H,000H,000H,084H,03EH,001H,01AH,02CH,02CH,0BEH,075H,03EH,07EH
	DB	089H,0B0H,052H,000H,000H,000H,000H,0ABH,02BH,0E8H,080H,07FH,057H,033H,000H,07FH,080H,04DH,02DH,02BH,000H,092H,032H,0A7H,0ADH,021H,001H,0DAH,06CH,02CH,076H
	DB	0C7H,003H,062H,000H,080H,000H,000H,0B5H,01CH,056H,000H,07FH,058H,03CH,000H,07FH,080H,063H,031H,000H,027H,092H,01EH,0AAH,02EH,01EH,027H,05CH,06BH,001H,06CH
	DB	02EH,000H,022H,000H,080H,000H,000H,0C0H,000H,0E2H,000H,062H,057H,033H,000H,07FH,023H,0D6H,0C9H,000H,048H,001H,01EH,025H,025H,02CH,03EH,075H,0FEH,03EH,07EH
	DB	008H,000H,032H,000H,080H,000H,000H,0B2H,011H,0E5H,000H,0C6H,07FH,000H,080H,07FH,000H,0F0H,055H,000H,04EH,001H,01EH,0A5H,0A5H,002H,021H,0E2H,0E6H,01EH,075H
	DB	00EH,000H,062H,000H,080H,000H,000H,051H,072H,080H,000H,0F8H,065H,000H,080H,07FH,000H,0D5H,04AH,000H,046H,001H,01EH,0A5H,0A5H,002H,021H,0A2H,0E6H,01EH,076H
	DB	053H,035H,012H,000H,080H,069H,000H,0CFH,000H,0B1H,000H,068H,058H,0BAH,080H,07FH,033H,0AFH,0D6H,000H,035H,012H,032H,0A7H,0BFH,001H,01EH,065H,025H,028H,07EH
	DB	02AH,000H,022H,000H,002H,0A2H,0A4H,0B6H,014H,0B8H,000H,07FH,058H,000H,080H,07FH,00CH,0CEH,0B2H,000H,0B0H,00CH,09AH,02BH,022H,026H,01BH,01AH,0BEH,0FEH,03EH
	DB	009H,000H,052H,014H,080H,022H,000H,0B3H,000H,0E4H,00FH,064H,055H,0B1H,086H,07FH,08AH,0E0H,0C2H,000H,043H,012H,0B2H,027H,03EH,00AH,028H,0ADH,028H,0BEH,03EH
	DB	009H,005H,052H,000H,080H,056H,000H,0B3H,000H,0CCH,000H,064H,055H,0AEH,080H,030H,09FH,0FFH,0C0H,000H,03EH,012H,02DH,0A5H,083H,02BH,02EH,0E6H,041H,067H,05DH
	DB	034H,000H,052H,000H,080H,02DH,03FH,0C1H,000H,0A7H,000H,070H,056H,000H,001H,07FH,029H,0DFH,0C4H,001H,043H,007H,09AH,02BH,029H,03EH,03EH,0FEH,0BEH,03EH,07EH
	DB	00EH,018H,002H,07FH,07FH,07FH,0FFH,0D0H,080H,0CCH,000H,06EH,07FH,046H,048H,07FH,000H,0B1H,0C0H,000H,00AH,013H,02BH,028H,027H,0BEH,081H,0E5H,05AH,02CH,06DH
	DB	00EH,028H,0C2H,000H,000H,000H,000H,0B9H,0E8H,0CFH,000H,07FH,07FH,000H,000H,07FH,000H,05DH,032H,000H,0B9H,00DH,028H,022H,02CH,09EH,092H,021H,028H,02DH,06CH
	DB	05EH,005H,012H,000H,080H,000H,000H,025H,07FH,09EH,010H,060H,07FH,000H,065H,07FH,000H,07FH,0B4H,06EH,0E5H,093H,030H,022H,025H,022H,02DH,05EH,019H,0A7H,05EH
	DB	00BH,018H,0C2H,000H,0FFH,07FH,07FH,0CBH,080H,0D7H,000H,072H,07FH,046H,030H,07FH,02EH,098H,080H,000H,000H,092H,09CH,02BH,01AH,02DH,09CH,0A1H,0E2H,0A7H,07EH
	DB	05FH,090H,052H,000H,080H,07FH,059H,05EH,080H,0B2H,000H,06EH,055H,03DH,03CH,0FFH,0ADH,000H,0DAH,05AH,040H,012H,032H,027H,03EH,004H,01CH,021H,068H,07EH,07EH
	DB	0F3H,028H,09CH,07FH,0FDH,06DH,033H,0E6H,0A5H,080H,080H,065H,076H,000H,057H,07FH,026H,0C2H,0E8H,07BH,02FH,08FH,028H,025H,01EH,00FH,028H,06CH,022H,0EDH,027H
	DB	04EH,003H,02CH,07FH,0FFH,080H,080H,024H,07FH,09FH,010H,06AH,07FH,056H,064H,07FH,058H,000H,080H,000H,080H,03FH,03FH,014H,03FH,005H,03FH,04EH,03FH,0FFH,07EH
	DB	0F8H,028H,062H,000H,00EH,068H,05AH,0C4H,000H,028H,000H,06CH,07FH,000H,000H,07FH,000H,0DAH,0C2H,000H,03CH,093H,0A2H,0A6H,0A9H,0ACH,0BEH,03EH,03EH,03EH,07EH
;
	REPT 16
	DB	00H		; spacer bytes to keep alignment
	ENDM
;	
	REPT 16
	DB	0FFH	; spacer bytes to keep alignment
	ENDM
;
	REPT 16
	DB	00H		; spacer bytes to keep alignment
	ENDM
;
; # VERSION STRING #
;
VersionStr:
	if CFW = 0
		DB	'Ver 2.1 11.07 86'
	else
		DB	'Ver 3.0  5-11-19'	
	endif	
;
;	Register/Memory Equates
;
RB0R0	EQU	0
RB0R1	EQU	1
RB0R2	EQU	2
RB0R3	EQU	3
RB0R4	EQU	4
RB0R5	EQU	5
RB0R6	EQU	6
RB0R7	EQU	7
RB1R0	EQU	8
RB1R1	EQU	9
RB1R2	EQU	0AH
RB1R3	EQU	0BH
RB1R5	EQU	0DH
RB1R6	EQU	0EH
RB1R7	EQU	0FH
RB2R0	EQU	10H
RB2R2	EQU	12H
RB2R3	EQU	13H
RB2R4	EQU	14H
RB2R5	EQU	15H
RB2R7	EQU	17H
RB3R0	EQU	18H
RB3R2	EQU	1AH
RB3R4	EQU	1CH
RB3R5	EQU	1DH
RB3R6	EQU	1EH
RB3R7	EQU	1FH

; ########################################################
; # EQUATES FOR INTERNAL MEMORY LOCATIONS                #
; ########################################################

LAST_BANK	EQU	77H		; copy of P2 bank register used to used
					; P2's value after a serial interrupt

;
;
;
; ########################################################
; # EQUATES FOR PERIPHERALS AND RAM OUTSIDE OF ROM SPACE #
; ########################################################
;
;
;
X8FFF	EQU	8FFFH			; RAM pointer
XA000	EQU	0A000H			; RAM pointer
XC00C	EQU	0C00CH			; possibly peripheral pointer?
XC00D	EQU	0C00DH			; possibly peripheral pointer?
XC00E	EQU	0C00EH			; possibly peripheral pointer?
TONES	EQU	0E000H			; probably the tone memories in RAM
PATCHES	EQU	0F000H			; probably the patch memories in RAM
XFE58	EQU	0FE58H			; unknown
XFE59	EQU	0FE59H			; unknown
XFE62	EQU	0FE62H			; unknown
XFE63	EQU	0FE63H			; unknown
XFE6D	EQU	0FE6DH			; unknown
XFE73	EQU	0FE73H			; unknown
XFE90	EQU	0FE90H			; probably chord tables (16 * 6 = $60 bytes)
XFEF0	EQU	0FEF0H			; unknown
XFEF1	EQU	0FEF1H			; unknown
XFEF2	EQU	0FEF2H			; unknown
XFEF3	EQU	0FEF3H			; unknown
XFF00	EQU	0FF00H			; unknown
;
; # probably references to addresses which are actually data
;
XFF97	EQU	0FF97H
;
	END
;
